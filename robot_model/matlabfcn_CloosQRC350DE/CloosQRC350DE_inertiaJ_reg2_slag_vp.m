% Calculate inertial parameters regressor of joint inertia matrix for
% CloosQRC350DE
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6,kDG]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2020-06-23 21:15
% Revision: 3f22bf868ffa24e21e77a0fe3b46e78b2d6fdc1f (2020-06-23)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = CloosQRC350DE_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'CloosQRC350DE_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'CloosQRC350DE_inertiaJ_reg2_slag_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-06-23 21:07:35
% EndTime: 2020-06-23 21:07:42
% DurationCPUTime: 4.51s
% Computational Cost: add. (613->235), mult. (1470->343), div. (0->0), fcn. (1239->10), ass. (0->175)
t101 = cos(qJ(3));
t93 = t101 ^ 2;
t140 = 0.4e1 * t93;
t188 = 0.2e1 * t101;
t106 = pkin(6) ^ 2;
t99 = cos(qJ(5));
t91 = t99 ^ 2;
t78 = t106 * t91;
t55 = t78 - t106;
t100 = cos(qJ(4));
t92 = t100 ^ 2;
t43 = t55 * t92;
t195 = t78 - t43;
t95 = sin(qJ(5));
t155 = t100 * t95;
t132 = pkin(4) * t155;
t80 = pkin(5) * t99;
t37 = t80 + t132;
t102 = cos(qJ(2));
t98 = sin(qJ(2));
t194 = (t140 - 0.2e1) * t102 * t98;
t108 = pkin(4) ^ 2;
t131 = pkin(6) * t155;
t193 = -0.2e1 * pkin(4) * t131 + t108;
t107 = pkin(5) ^ 2;
t109 = pkin(3) ^ 2;
t97 = sin(qJ(3));
t79 = pkin(5) * t97;
t144 = pkin(3) * t79;
t192 = t107 + t109 - 0.2e1 * t144;
t191 = 0.2e1 * pkin(4);
t190 = -0.2e1 * pkin(5);
t189 = -0.2e1 * t98;
t186 = pkin(5) * t93;
t185 = pkin(5) * t98;
t147 = t102 * t101;
t161 = t97 * t98;
t35 = -t147 + t161;
t184 = pkin(6) * t35;
t183 = pkin(6) * t91;
t96 = sin(qJ(4));
t182 = pkin(6) * t96;
t181 = pkin(6) * t99;
t153 = t102 * t97;
t36 = t101 * t98 + t153;
t173 = t36 * t99;
t115 = t35 * t155 - t173;
t180 = t115 * t99;
t179 = t95 * pkin(4);
t77 = t98 * pkin(3);
t178 = t99 * pkin(4);
t82 = pkin(4) * t101;
t177 = pkin(3) + t82;
t63 = t77 + pkin(2);
t83 = pkin(3) * t97;
t67 = t83 - pkin(5);
t85 = pkin(2) * t98;
t71 = t85 + pkin(3);
t66 = pkin(5) + t181;
t81 = pkin(4) * t97;
t30 = t101 * t66 + t81;
t176 = t30 * t98;
t145 = -0.2e1 * t79;
t34 = t98 * t145 + t63;
t175 = t34 * t99;
t174 = t36 * t95;
t172 = t37 * t93;
t75 = pkin(7) * qJ(5) - qJ(6);
t57 = sin(t75);
t171 = t57 * t95;
t58 = cos(t75);
t170 = t58 * t95;
t64 = (t91 - 0.1e1) * pkin(6);
t169 = t64 * t92;
t168 = t67 * t99;
t167 = t71 * t97;
t166 = (t99 + 0.1e1) * (t99 - 0.1e1);
t165 = t93 * t98;
t84 = pkin(3) * t101;
t70 = t84 + pkin(4);
t164 = t95 * t70;
t60 = t95 * t96;
t163 = t96 * t35;
t162 = t96 * t99;
t160 = t97 * t99;
t41 = t66 - t83;
t159 = t99 * t41;
t38 = 0.2e1 * t169;
t51 = -0.2e1 * t132;
t158 = t51 - t38;
t76 = -0.2e1 * t181;
t157 = t76 + t83;
t156 = t100 * t35;
t154 = t100 * t99;
t47 = -pkin(4) + t131;
t151 = t47 * t101;
t150 = t97 * t101;
t105 = 0.2e1 * pkin(5);
t149 = -0.2e1 * t167 + t105;
t148 = t79 - pkin(3) / 0.2e1;
t88 = t107 + t108;
t143 = -0.2e1 * (-pkin(5) + t167) * t99;
t142 = 0.2e1 * t168;
t141 = -0.4e1 * t161;
t139 = pkin(6) * t60;
t7 = t35 * t154 + t174;
t138 = t7 * t162;
t137 = pkin(6) * t174;
t136 = t115 * t60;
t135 = pkin(4) * t160;
t54 = pkin(6) * t160;
t134 = -0.2e1 * t155;
t133 = -t79 + t71;
t18 = t100 * t58 + t57 * t162;
t130 = t18 * t171;
t129 = t57 * t170;
t128 = t92 * t166;
t127 = pkin(7) * t60;
t126 = t96 * t156;
t125 = t70 * t155;
t124 = (t84 + t191) * t155;
t123 = -t43 + t193;
t65 = pkin(5) + 0.2e1 * t181;
t94 = t102 ^ 2;
t122 = pkin(3) * t94 - t71;
t121 = -0.2e1 * t80 - 0.2e1 * t183;
t120 = t66 * t97 - t82;
t118 = t107 + t43;
t117 = pkin(6) * t156 * t166;
t74 = pkin(3) * t82;
t25 = t108 + 0.2e1 * t74 + t192;
t116 = pkin(5) * t76 - t107 - t78;
t68 = t83 + t190;
t114 = -t68 * t99 - t124;
t28 = t74 - t144 + t88;
t53 = t58 ^ 2;
t113 = ((t91 + 0.1e1) * t156 + t95 * t173) * t53;
t112 = -0.2e1 * t125 - 0.2e1 * t168;
t111 = (t35 * (t92 - 0.1e1 / 0.2e1) * t99 + t36 * t155 / 0.2e1) * t57 * t58;
t110 = pkin(2) ^ 2;
t104 = 0.2e1 * pkin(6);
t90 = t96 ^ 2;
t89 = t95 ^ 2;
t61 = t91 * t90;
t59 = t89 * t90;
t56 = t181 + pkin(5) / 0.2e1;
t52 = t57 ^ 2;
t50 = t178 * t189;
t46 = t95 * t162;
t45 = t63 * t97;
t44 = t101 * pkin(5) + t81;
t42 = -t79 + t177;
t33 = t132 * t141;
t32 = t36 ^ 2;
t31 = t35 ^ 2;
t29 = t101 * t65 + t81;
t27 = -t65 * t97 + t177;
t26 = pkin(3) - t120;
t24 = t90 * t31;
t19 = t100 * t57 - t58 * t162;
t17 = t19 ^ 2;
t16 = t18 ^ 2;
t15 = t102 * t44 + t42 * t98 + pkin(2);
t14 = t15 ^ 2;
t13 = t19 * t57;
t12 = t18 * t58;
t11 = t15 * t99;
t10 = t19 * t170;
t6 = t115 ^ 2;
t5 = (-t101 * t154 + t95 * t97) * t102 + t98 * (t101 * t95 + t97 * t154);
t4 = t57 * t163 + t5 * t58;
t3 = -t58 * t163 + t5 * t57;
t2 = -t96 * t113 + 0.2e1 * t111 + t126;
t1 = -0.2e1 * t111 + (-t7 * t99 + t113) * t96;
t8 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t94, 0, 0, t98 ^ 2, 0, 0, 0.2e1 * t85, 0, 0, t110, t31, -t194 + (-0.4e1 * t94 + 0.2e1) * t150, 0, t32, 0, 0, -0.2e1 * t122 * t101 + 0.2e1 * t63 * t153, 0.2e1 * t122 * t97 + 0.2e1 * t63 * t147, 0, t63 ^ 2, t92 * t31, 0, 0, t24, 0, t32, 0, 0, -0.2e1 * t186 + (-0.2e1 * t150 + t194) * pkin(4) + 0.2e1 * (t150 * t191 + 0.2e1 * t186 + t67) * t94 + 0.2e1 * t34 * t147 + t149, t14, t7 ^ 2, 0, 0, t6, 0, t24, 0, (t142 + t51 + 0.4e1 * t172 + 0.4e1 * (-t148 * t155 + t135) * t101) * t94 + (-0.4e1 * (pkin(5) * t155 - t178) * t165 + (t33 + 0.2e1 * t175) * t101 + t50 + (t45 - t185) * t134) * t102 - 0.2e1 * t172 + (-t133 * t155 - t135) * t188 + t143, 0, t14, t4 ^ 2, 0, 0, t3 ^ 2, 0, t6, 0, 0, ((t169 + t37 + t183) * t140 + (-0.8e1 * (t54 + t79 / 0.2e1 - pkin(3) / 0.4e1) * t155 + 0.4e1 * t135) * t101 - 0.2e1 * t159 + t158) * t94 + (-0.8e1 * (t56 * t155 - t178 / 0.2e1) * t165 + (pkin(6) * t128 * t141 + t33 + 0.2e1 * t99 * (t54 * t189 + t34)) * t101 + (-t65 * t98 + t45) * t134 + t50) * t102 + (t121 + t158) * t93 + t149 * t99 + t104 + (-(-0.2e1 * t54 + t133) * t155 - t135) * t188 + t38, (0.2e1 * (-t108 + t118 + t78) * t93 - 0.4e1 * (t54 + t148) * t151 - t78 + (t37 * t140 + t142) * pkin(6) + t123 - t192) * t94 + ((pkin(5) * t63 + pkin(6) * t175) * t188 - 0.2e1 * t45 * t47 + (0.2e1 * (-0.2e1 * t93 + 0.1e1) * t47 * t66 + 0.2e1 * (-t107 + t193 + (-t91 - t128) * t106) * t150) * t98) * t102 + (t116 + t123) * t93 - 0.2e1 * (-t54 + t133) * t151 + pkin(6) * t143 + t71 * t145 + 0.2e1 * pkin(2) * t77 + t110 + t109 + t106 + t118; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t102, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35, 0, t36, 0, 0, 0, pkin(3) * t102, 0, -t126, 0, 0, t126, 0, 0, 0, 0, 0, 0, -t138, 0, 0, -t136, 0, t126, 0, (t102 * t42 - t44 * t98) * t60, 0, 0, t2, 0, 0, t1, 0, -t136, 0, 0, ((t27 * t102 + (t56 * t101 + t81 / 0.2e1) * t189) * t95 - 0.2e1 * t117) * t96, ((t102 * t26 - t176) * t95 - t117) * t182; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t84, -0.2e1 * t83, 0, t109, t90, 0, 0, t92, 0, 0, 0, 0, -0.2e1 * t67, t25, t61, 0, 0, t59, 0, t92, 0, t112, 0, t25, t17, 0, 0, t16, 0, t59, 0, 0, -0.2e1 * t125 - t38 + 0.2e1 * t159, pkin(6) * t112 + t195 + t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35, 0, t36, 0, 0, 0, 0, 0, -t126, 0, 0, t126, 0, 0, 0, 0, 0, 0, -t138, 0, 0, -t136, 0, t126, 0, -(t97 * (pkin(4) * t98 + pkin(5) * t102) - t101 * (t102 * pkin(4) - t185)) * t60, 0, 0, t2, 0, 0, t1, 0, -t136, 0, 0, -t96 * (((0.2e1 * t56 * t97 - t82) * t102 + t29 * t98) * t95 + 0.2e1 * t117), -((t102 * t120 + t176) * t95 + t117) * t182; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t84, -t83, 0, 0, t90, 0, 0, t92, 0, 0, 0, 0, -t68, t28, t61, 0, 0, t59, 0, t92, 0, t114, 0, t28, t17, 0, 0, t16, 0, t59, 0, 0, -t38 - t124 - t99 * (t190 + t157), t114 * pkin(6) + t195 + t28; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t90, 0, 0, t92, 0, 0, 0, 0, t105, t88, t61, 0, 0, t59, 0, t92, 0, 0.2e1 * t80 - 0.2e1 * t132, 0, t88, t17, 0, 0, t16, 0, t59, 0, 0, -t121 + t158, -t116 + t123; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, 0, 0, 0, 0, t7 * t95, 0, 0, -t180, 0, 0, 0, -t15 * t155, 0, 0, t4 * t170, 0, 0, t3 * t171, 0, -t180, 0, 0, -t95 * ((t102 * t29 + t27 * t98 + pkin(2)) * t100 - 0.2e1 * t137), -((t102 * t30 + t26 * t98 + pkin(2)) * t100 - t137) * pkin(6) * t95; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t46, 0, 0, t46, 0, 0, 0, t67 * t60, 0, 0, t10, 0, 0, -t130, 0, t46, 0, 0, (-pkin(5) + t157) * t60, -t41 * t139; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t46, 0, 0, t46, 0, 0, 0, -pkin(5) * t60, 0, 0, t10, 0, 0, -t130, 0, t46, 0, 0, -t65 * t60, -t66 * t139; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t89, 0, 0, t91, 0, 0, 0, 0, 0, 0, t53 * t89, 0, 0, t52 * t89, 0, t91, 0, 0, -0.2e1 * t64, -t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t163, 0, -t15 * t162, 0, 0, t4 * t57, 0, 0, -t3 * t58, 0, pkin(7) * t115, 0, 0, -(t11 - 0.2e1 * t184) * t96, -(t11 - t184) * t182; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t100, 0, -t67 * t154 - t164, 0, 0, t13, 0, 0, t12, 0, -t127, 0, 0, (t104 - t168) * t100 - t164, -((-pkin(6) + t168) * t100 + t164) * pkin(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t100, 0, pkin(5) * t154 - t179, 0, 0, t13, 0, 0, t12, 0, -t127, 0, 0, (t80 + t104) * t100 - t179, -pkin(6) * ((-t80 - pkin(6)) * t100 + t179); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t129, 0, 0, -t129, 0, -t99 * pkin(7), 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t52, 0, 0, t53, 0, pkin(7) ^ 2, 0, 0, t104, t106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t115, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -pkin(7), 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg = t8;
