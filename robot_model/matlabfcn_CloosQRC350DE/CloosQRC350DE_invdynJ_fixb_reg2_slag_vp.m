% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% CloosQRC350DE
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6,kDG]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-06-23 21:15
% Revision: 3f22bf868ffa24e21e77a0fe3b46e78b2d6fdc1f (2020-06-23)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = CloosQRC350DE_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'CloosQRC350DE_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'CloosQRC350DE_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'CloosQRC350DE_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'CloosQRC350DE_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'CloosQRC350DE_invdynJ_fixb_reg2_slag_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-06-23 21:07:31
% EndTime: 2020-06-23 21:07:51
% DurationCPUTime: 15.72s
% Computational Cost: add. (12026->462), mult. (25230->683), div. (0->0), fcn. (18916->10), ass. (0->256)
t200 = sin(qJ(3));
t201 = sin(qJ(2));
t204 = cos(qJ(3));
t205 = cos(qJ(2));
t162 = t200 * t205 + t201 * t204;
t157 = qJD(1) * t162;
t295 = t201 * t200;
t262 = qJD(1) * t295;
t290 = qJD(1) * t205;
t158 = t204 * t290 - t262;
t198 = sin(qJ(5));
t199 = sin(qJ(4));
t284 = qJD(5) * t198;
t202 = cos(qJ(5));
t203 = cos(qJ(4));
t294 = t202 * t203;
t346 = -t157 * t294 - t158 * t198 + t199 * t284;
t153 = qJD(4) + t157;
t131 = -pkin(4) * t158 + pkin(5) * t157;
t329 = pkin(3) * qJD(2);
t271 = t204 * t329;
t117 = -t131 * t199 + t203 * t271;
t272 = t200 * t329;
t283 = qJD(5) * t202;
t282 = qJD(5) * t203;
t286 = qJD(4) * t202;
t343 = t198 * t282 + t199 * t286;
t292 = -pkin(4) * t283 - pkin(5) * t343 + t117 * t202 - t198 * t272;
t193 = pkin(7) * qJD(5) - qJD(6);
t355 = -(-t193 + t286) * t203 + t346;
t354 = -t193 * t202 + t153;
t353 = t346 * pkin(6);
t116 = t131 * t203 + t199 * t271;
t195 = t198 * pkin(4);
t156 = t195 + (-pkin(5) * t202 - pkin(6)) * t203;
t333 = pkin(6) * t202;
t187 = pkin(5) + t333;
t285 = qJD(4) * t203;
t352 = -t156 * t193 - t187 * t285 - t116 + t353;
t164 = t187 * t199;
t287 = qJD(4) * t199;
t192 = pkin(6) * t287;
t309 = t157 * t199;
t351 = -pkin(6) * t309 + t164 * t193 - t192 + t292;
t125 = -pkin(3) * t290 + t131;
t335 = pkin(3) * t200;
t188 = -pkin(5) + t335;
t334 = pkin(3) * t204;
t189 = pkin(4) + t334;
t147 = t188 * t294 + t189 * t198;
t141 = -pkin(6) * t203 + t147;
t257 = t188 - t333;
t288 = qJD(3) * t204;
t273 = pkin(3) * t288;
t350 = t125 * t203 + t141 * t193 - t199 * t273 - t257 * t285 - t353;
t237 = t203 * t273;
t328 = pkin(3) * qJD(3);
t274 = t200 * t328;
t105 = -t188 * t343 + t189 * t283 - t198 * t274 + t202 * t237;
t154 = t257 * t199;
t349 = -t154 * t193 - t105 - t192 + (-pkin(6) * t157 - t125 * t202) * t199;
t194 = pkin(7) * qJ(5) - qJ(6);
t183 = sin(t194);
t184 = cos(t194);
t301 = t184 * t199;
t348 = t183 * t355 + t301 * t354;
t304 = t183 * t199;
t347 = t184 * t355 - t304 * t354;
t280 = qJD(1) * qJD(2);
t258 = t205 * t280;
t278 = qJDD(1) * t201;
t345 = t258 + t278;
t344 = t198 * t285 + t199 * t283;
t342 = t287 + t309;
t341 = t183 * t350 + t184 * t349;
t340 = t183 * t349 - t184 * t350;
t339 = t183 * t352 - t184 * t351;
t338 = t183 * t351 + t184 * t352;
t186 = -pkin(3) * t201 - pkin(2);
t281 = t186 * qJD(1);
t119 = -pkin(4) * t157 - pkin(5) * t158 + t281;
t196 = qJDD(2) + qJDD(3);
t277 = qJDD(2) * t200;
t151 = -t196 * pkin(5) + (qJD(2) * t288 + t277) * pkin(3);
t197 = qJD(2) + qJD(3);
t166 = -pkin(5) * t197 + t272;
t133 = t197 * t162;
t161 = -t204 * t205 + t295;
t109 = qJD(1) * t133 + qJDD(1) * t161;
t261 = t205 * t288;
t275 = t205 * qJDD(1);
t110 = qJD(1) * t261 - t197 * t262 + t200 * t275 + t204 * t345;
t236 = pkin(3) * t258;
t276 = t186 * qJDD(1);
t59 = -pkin(4) * t110 + pkin(5) * t109 - t236 + t276;
t33 = t199 * t151 - t119 * t287 + (qJD(4) * t166 + t59) * t203;
t30 = t33 * t199;
t98 = t119 * t203 + t166 * t199;
t337 = -t285 * t98 - t30;
t86 = -t157 * t197 + t109;
t87 = -t158 * t197 + t110;
t222 = t158 * t203 + t197 * t199;
t111 = t153 * t202 + t198 * t222;
t72 = qJD(4) * t222 - t199 * t109 - t203 * t196;
t323 = t203 * t98;
t99 = -t119 * t199 + t166 * t203;
t226 = t199 * t99 - t323;
t319 = qJD(4) * t98;
t32 = t151 * t203 - t199 * t59 - t319;
t322 = t32 * t203;
t336 = qJD(4) * t226 - t30 - t322;
t159 = t161 * g(3);
t332 = t201 * g(3);
t112 = t153 * t198 - t202 * t222;
t139 = t158 * t199 - t197 * t203;
t138 = qJD(5) - t139;
t223 = t112 * t183 - t138 * t184;
t68 = t112 * t184 + t138 * t183;
t331 = t223 * t68;
t190 = qJDD(2) * t334;
t150 = pkin(4) * t196 - qJD(3) * t272 + t190;
t167 = pkin(4) * t197 + t271;
t77 = t167 * t198 + t202 * t99;
t21 = -qJD(5) * t77 + t150 * t202 - t198 * t32;
t297 = t198 * t203;
t76 = t167 * t202 - t198 * t99;
t330 = t21 * (-t188 * t297 + t189 * t202) + t76 * ((-t188 * t282 - t274) * t202 + (-qJD(5) * t189 + t188 * t287 - t237) * t198);
t326 = t198 * t76;
t325 = t202 * t77;
t324 = t202 * t98;
t71 = qJD(4) * t139 + t203 * t109 - t196 * t199;
t321 = t71 * t199;
t320 = t72 * t203;
t318 = t112 * t111;
t317 = t138 * t202;
t316 = t139 * t199;
t315 = t139 * t202;
t314 = t222 * t139;
t313 = t222 * t203;
t312 = t153 * t158;
t311 = t157 * t158;
t307 = t161 * t199;
t306 = t183 * t111;
t305 = t183 * t193;
t303 = t184 * t111;
t302 = t184 * t193;
t300 = t193 * t198;
t298 = t198 * t199;
t296 = t199 * t202;
t293 = t205 * qJD(1) ^ 2;
t289 = qJD(2) * t205;
t270 = t76 * t298;
t269 = pkin(3) * t289;
t268 = t201 * t293;
t20 = t150 * t198 + t167 * t283 + t202 * t32 - t284 * t99;
t62 = pkin(6) * t112 + t98;
t69 = qJDD(5) - t72;
t255 = pkin(6) * t69 - t193 * t62 - t20;
t108 = qJDD(4) + t110;
t35 = qJD(5) * t111 + t198 * t108 + t202 * t71;
t63 = -pkin(6) * t138 + t77;
t256 = -pkin(6) * t35 + t193 * t63 - t33;
t2 = t183 * t256 + t184 * t255;
t228 = t183 * t63 - t184 * t62;
t260 = -t193 * t228 + t2;
t28 = t183 * t62 + t184 * t63;
t3 = t183 * t255 - t184 * t256;
t259 = t193 * t28 + t3;
t247 = -t138 * t193 - t35;
t249 = t112 * t193 - t69;
t13 = t183 * t249 + t184 * t247;
t254 = t193 * t223 - t13;
t14 = t183 * t247 - t184 * t249;
t253 = t193 * t68 + t14;
t132 = -pkin(4) * t162 + pkin(5) * t161 + t186;
t230 = -pkin(6) * t161 - t132 * t202;
t129 = t161 * t294 + t162 * t198;
t81 = pkin(6) * t129 + t132 * t203;
t134 = t197 * t295 - t204 * t289 - t261;
t90 = pkin(4) * t134 + pkin(5) * t133 - t269;
t252 = -t193 * t81 - t230 * t285 - (-pkin(6) * t133 + t132 * t284 - t202 * t90) * t199;
t251 = t90 * t270 + (t21 * t298 + t344 * t76) * t132;
t102 = t230 * t199;
t215 = t133 * t203 - t161 * t287;
t211 = -qJD(5) * t162 - t215;
t231 = -t161 * t282 - t134;
t55 = t198 * t231 - t202 * t211;
t250 = -pkin(6) * t55 + t102 * t193 + t132 * t287 - t203 * t90;
t217 = (pkin(4) * t200 + pkin(5) * t204) * t205;
t233 = pkin(4) * t204 - pkin(5) * t200;
t248 = -t98 * t116 + (t201 * t233 + t217) * g(3);
t242 = t198 * t138;
t241 = qJD(4) * t188 - t125;
t239 = qJD(2) * (-qJD(3) + t197);
t238 = qJD(3) * (-qJD(2) - t197);
t235 = t21 * (pkin(4) * t202 + pkin(5) * t297) + (t198 * t117 + t202 * t272 - pkin(4) * t284 + (-t198 * t287 + t202 * t282) * pkin(5)) * t76;
t234 = -t193 * t307 - t55;
t232 = -t157 * t281 - t159;
t229 = t28 * t183 - t184 * t228;
t225 = t199 * t98 + t203 * t99;
t173 = pkin(6) * t297 - pkin(4);
t221 = -t173 * t204 - t187 * t200;
t220 = -t157 * t323 + t342 * t99 - t159 + t337;
t219 = g(3) * t162 + t158 * t281 + t190;
t127 = (-t161 * t202 - t162 * t297) * g(3);
t218 = t342 * t77 + t346 * t98 + t127;
t216 = t133 * t199 + t161 * t285;
t214 = (-t173 * t200 + t187 * t204) * t205;
t213 = t157 * t297 - t158 * t202 + t344;
t212 = -t129 * t193 + t216;
t144 = t183 * t296 + t184 * t203;
t145 = -t183 * t203 + t184 * t296;
t209 = t2 * t144 - t3 * t145 - t228 * t347 + t28 * t348 + t127;
t208 = -t183 * t260 + t184 * t259;
t36 = -qJD(5) * t112 + t108 * t202 - t198 * t71;
t163 = -pkin(5) * t294 + t195;
t149 = t298 * t159;
t135 = (-(-pkin(3) - t233) * t201 + t217) * g(3);
t130 = -t161 * t297 + t162 * t202;
t126 = t129 * g(3);
t121 = -t156 * t184 + t164 * t183;
t120 = -t156 * t183 - t164 * t184;
t114 = -t157 ^ 2 + t158 ^ 2;
t107 = t111 - t193;
t104 = -t141 * t184 - t154 * t183;
t103 = -t141 * t183 + t154 * t184;
t96 = -t129 * t184 - t161 * t304;
t95 = -t129 * t183 + t161 * t301;
t89 = t183 * t222 - t184 * t315;
t88 = -t183 * t315 - t184 * t222;
t70 = pkin(6) * t315 + t99;
t66 = pkin(6) * t222 - t324;
t56 = t198 * t211 + t202 * t231;
t53 = t98 * t326;
t52 = -t102 * t184 - t183 * t81;
t51 = -t102 * t183 + t184 * t81;
t50 = -pkin(7) * t68 - t306;
t49 = pkin(7) * t223 - t303;
t45 = t153 * t316 - t320;
t44 = t153 * t313 - t321;
t43 = -t138 * t153 * t199 + t203 * t69;
t38 = -t183 * t70 - t184 * t66;
t37 = -t183 * t66 + t184 * t70;
t34 = -pkin(7) * qJDD(5) + qJDD(6) + t36;
t25 = t183 * t234 + t184 * t212;
t24 = -t183 * t212 + t184 * t234;
t16 = pkin(6) * t303 - pkin(7) * t28 - t183 * t76;
t15 = -pkin(6) * t306 + pkin(7) * t228 - t184 * t76;
t10 = t111 * t213 + t298 * t36;
t9 = -t35 * t296 + (-t202 * t285 + t346) * t112;
t8 = t107 * t213 + t298 * t34;
t7 = t183 * t252 - t184 * t250;
t6 = t183 * t250 + t184 * t252;
t5 = t14 * t144 + t223 * t348;
t4 = t13 * t145 + t347 * t68;
t1 = [0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, (-0.2e1 * t201 * t280 + t275) * t205, 0, qJD(2) ^ 2 * t201 - qJDD(2) * t205, (0.2e1 * t258 + t278) * t201, 0, 0, 0.2e1 * t345 * pkin(2), 0, 0, qJDD(1) * pkin(2) ^ 2, t109 * t161 - t133 * t158, t109 * t162 + t110 * t161 + t133 * t157 + t134 * t158, t133 * t197 + t161 * t196, t110 * t162 - t134 * t157, -t134 * t197 + t162 * t196, 0, 0.2e1 * t157 * t269 + (qJD(1) * t134 - qJDD(1) * t162 - t110) * t186, (-qJD(1) * t161 + t158) * t269 + 0.2e1 * t186 * t109, ((-t161 * t204 + t162 * t200) * qJDD(2) + (-t133 * t204 - t134 * t200 + (t161 * t200 + t162 * t204) * qJD(3)) * qJD(2)) * pkin(3), (-0.2e1 * t236 + t276) * t186, t161 * t203 * t71 - t215 * t222, 0, 0, -t139 * t216 - t307 * t72, 0, t108 * t162 - t134 * t153, 0, 0, (t132 * t71 + t133 * t98 - t222 * t90 + t161 * t33 + (-t132 * t139 - t161 * t99) * qJD(4)) * t203 + (-t132 * t72 - t133 * t99 - t139 * t90 - t161 * t32 + (t132 * t222 - t161 * t98) * qJD(4)) * t199, -t226 * t90 + (-qJD(4) * t225 - t199 * t32 + t203 * t33) * t132, t112 * t55 + t129 * t35, 0, 0, t111 * t56 + t130 * t36, 0, t138 * t216 + t307 * t69, 0, t33 * t129 + t98 * t55 + (t112 * t90 + t132 * t35 + (t132 * t317 - t161 * t77) * qJD(4)) * t203 + (t90 * t317 - t133 * t77 - t161 * t20 + (-qJD(4) * t112 - t138 * t284 + t202 * t69) * t132) * t199, 0, (-t296 * t77 + t323) * t90 + ((-t286 * t77 + t33) * t203 + (-t20 * t202 + t284 * t77 - t319) * t199) * t132 + t251, t13 * t96 - t24 * t68, 0, 0, t14 * t95 - t223 * t25, 0, t107 * t56 + t130 * t34, 0, 0, -t13 * t51 + t14 * t52 + t2 * t95 - t223 * t6 + t228 * t24 - t25 * t28 - t3 * t96 + t68 * t7, t2 * t52 - t228 * t7 - t28 * t6 + t3 * t51 + t251; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t268, 0, -t275, -t268, 0, qJDD(2), -pkin(2) * t293 + t332, 0, 0, 0, t311, t114, t86, -t311, t87, t196, (-t157 * t290 + t196 * t204 + t200 * t238) * pkin(3) + t219, (-t158 * t290 + (-qJDD(2) - t196) * t200 + t204 * t238) * pkin(3) + t232, (t200 * t87 - t204 * t86) * pkin(3), (t186 * t293 + t332 + (t200 ^ 2 + t204 ^ 2) * qJDD(2) * pkin(3)) * pkin(3), t44, 0, 0, t45, 0, -t312, 0, 0, (-t139 * t241 + t188 * t71 - t222 * t273) * t199 + (t139 * t273 + t188 * t72 - t222 * t241 - t32) * t203 + t220, t150 * t189 + t135 + t226 * t125 + (-t167 * t200 + t204 * t225) * t328 - t336 * t188, t9, 0, 0, t10, 0, t43, 0, -t105 * t138 - t147 * t69 + (-t112 * t125 - t20 + (t112 * t188 - t324) * qJD(4)) * t203 + (t112 * t273 + t188 * t35 + (-t125 * t138 - t33) * t202) * t199 + t218, 0, t77 * t105 + t20 * t147 + t135 + t241 * t323 + (t98 * t273 + t188 * t33 + (t325 - t326) * t125) * t199 + t330, t4, 0, 0, t5, 0, t8, 0, 0, -t103 * t13 + t104 * t14 - t223 * t341 + t340 * t68 + t209, t2 * t104 + t3 * t103 - t125 * t270 + g(3) * (-(-pkin(3) - t221) * t201 + t214) + t330 - t341 * t28 - t340 * t228; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t311, t114, t86, -t311, t87, t196, t239 * t335 + t219, (t204 * t239 - t277) * pkin(3) + t232, 0, 0, t44, 0, 0, t45, 0, -t312, 0, 0, t116 * t222 - t117 * t139 - t322 + (-t321 - t320 + (t313 + t316) * qJD(4)) * pkin(5) + t220, t150 * pkin(4) + pkin(5) * t336 - t99 * t117 + t167 * t272 + t248, t9, 0, 0, t10, 0, t43, 0, -t116 * t112 - t163 * t69 + (-pkin(5) * t35 - t202 * t33) * t199 + t292 * t138 + (-t20 + (-pkin(5) * t112 - t324) * qJD(4)) * t203 + t218, 0, pkin(5) * t337 + t20 * t163 - t292 * t77 + t235 + t248, t4, 0, 0, t5, 0, t8, 0, 0, -t120 * t13 + t121 * t14 + t223 * t339 + t338 * t68 + t209, t2 * t121 + t3 * t120 + g(3) * (t201 * t221 + t214) + t235 + t339 * t28 - t338 * t228; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t314, 0, 0, -t314, 0, t108, 0, 0, 0, 0, t112 * t317 + t198 * t35, 0, 0, -t111 * t242 + t36 * t202, 0, t138 * t222, 0, -t99 * t112 + t33 * t198 - t222 * t77 + t149, 0, -t53 + (-t99 + t325) * t98, -t13 * t184 * t198 + (-t183 * t300 + t184 * t283 + t89) * t68, 0, 0, -t14 * t183 * t198 - (-t183 * t283 - t184 * t300 - t88) * t223, 0, -t107 * t242 + t202 * t34, 0, 0, -t228 * t89 + t28 * t88 - t37 * t68 + t38 * t223 + t149 + ((t183 * t223 + t184 * t68) * pkin(6) + t229) * t283 + ((-t183 * t253 + t184 * t254) * pkin(6) + t208) * t198, t228 * t37 + t28 * t38 - t53 + (t229 * t283 + (g(3) * t307 + t208) * t198) * pkin(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t318, 0, 0, t318, 0, t69, 0, -t111 * t98 + t138 * t76 - t126 - t20, 0, 0, -t13 * t183 + (t49 + t302) * t68, 0, 0, t14 * t184 - (-t50 - t305) * t223, 0, -pkin(7) * t34 + t107 * t112, 0, 0, t15 * t223 - t16 * t68 - t228 * t49 + t28 * t50 - t126 + t260 * t184 + t259 * t183 + (t183 * t254 + t184 * t253) * pkin(6), t28 * t15 + t228 * t16 + t77 * t76 + (t2 * t184 + t28 * t305 + t3 * t183 - t228 * t302 + g(3) * ((-t198 * t200 + t204 * t294) * t205 + (-t198 * t204 - t200 * t294) * t201)) * pkin(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t331, 0, 0, t331, 0, t34, 0, 0, 0, 0;];
tau_reg = t1;
