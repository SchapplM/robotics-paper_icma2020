% Calculate inertial parameters regressor of coriolis joint torque vector for
% CloosQRC350DE
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6,kDG]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-06-23 21:15
% Revision: 3f22bf868ffa24e21e77a0fe3b46e78b2d6fdc1f (2020-06-23)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = CloosQRC350DE_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'CloosQRC350DE_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'CloosQRC350DE_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'CloosQRC350DE_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-06-23 21:07:31
% EndTime: 2020-06-23 21:07:47
% DurationCPUTime: 11.95s
% Computational Cost: add. (10432->397), mult. (23097->605), div. (0->0), fcn. (17076->10), ass. (0->236)
t181 = sin(qJ(3));
t182 = sin(qJ(2));
t185 = cos(qJ(3));
t186 = cos(qJ(2));
t151 = t181 * t186 + t182 * t185;
t148 = qJD(1) * t151;
t262 = qJD(1) * t186;
t267 = t181 * t182;
t149 = -qJD(1) * t267 + t185 * t262;
t179 = sin(qJ(5));
t180 = sin(qJ(4));
t256 = qJD(5) * t179;
t183 = cos(qJ(5));
t184 = cos(qJ(4));
t266 = t183 * t184;
t315 = -t148 * t266 - t149 * t179 + t180 * t256;
t144 = qJD(4) + t148;
t175 = pkin(7) * qJD(5) - qJD(6);
t258 = qJD(4) * t183;
t324 = -(-t175 + t258) * t184 + t315;
t323 = -t175 * t183 + t144;
t128 = -pkin(4) * t149 + t148 * pkin(5);
t301 = pkin(3) * qJD(2);
t252 = t185 * t301;
t115 = -t128 * t180 + t184 * t252;
t253 = t181 * t301;
t255 = qJD(5) * t183;
t254 = qJD(5) * t184;
t313 = t179 * t254 + t180 * t258;
t264 = -pkin(4) * t255 - t313 * pkin(5) + t183 * t115 - t179 * t253;
t322 = t315 * pkin(6);
t176 = pkin(7) * qJ(5) - qJ(6);
t168 = sin(t176);
t169 = cos(t176);
t272 = t169 * t180;
t321 = t324 * t168 + t323 * t272;
t274 = t168 * t180;
t320 = t324 * t169 - t323 * t274;
t114 = t128 * t184 + t180 * t252;
t177 = t179 * pkin(4);
t147 = t177 + (-pkin(5) * t183 - pkin(6)) * t184;
t308 = pkin(6) * t183;
t244 = -pkin(5) - t308;
t257 = qJD(4) * t184;
t319 = -t147 * t175 + t244 * t257 - t114 + t322;
t153 = t244 * t180;
t259 = qJD(4) * t180;
t174 = pkin(6) * t259;
t278 = t148 * t180;
t318 = -pkin(6) * t278 - t153 * t175 - t174 + t264;
t123 = -pkin(3) * t262 + t128;
t171 = pkin(3) * t181 - pkin(5);
t172 = pkin(3) * t185 + pkin(4);
t141 = t171 * t266 + t179 * t172;
t136 = -pkin(6) * t184 + t141;
t233 = t171 - t308;
t260 = qJD(3) * t185;
t249 = pkin(3) * t260;
t317 = t123 * t184 + t136 * t175 - t180 * t249 - t233 * t257 - t322;
t215 = t184 * t249;
t300 = pkin(3) * qJD(3);
t250 = t181 * t300;
t104 = -t313 * t171 + t172 * t255 - t179 * t250 + t183 * t215;
t145 = t233 * t180;
t316 = -t145 * t175 - t104 - t174 + (-pkin(6) * t148 - t123 * t183) * t180;
t314 = t179 * t257 + t180 * t255;
t312 = t259 + t278;
t170 = -pkin(3) * t182 - pkin(2);
t263 = qJD(1) * t170;
t117 = -pkin(4) * t148 - pkin(5) * t149 + t263;
t178 = qJD(2) + qJD(3);
t155 = -pkin(5) * t178 + t253;
t246 = qJD(2) * t300;
t213 = t185 * t246;
t130 = t178 * t151;
t125 = qJD(1) * t130;
t150 = -t185 * t186 + t267;
t310 = qJD(1) * t150;
t126 = t178 * t310;
t261 = qJD(2) * t186;
t234 = qJD(1) * t261;
t214 = pkin(3) * t234;
t74 = pkin(4) * t126 + pkin(5) * t125 - t214;
t46 = t180 * t213 - t117 * t259 + (qJD(4) * t155 + t74) * t184;
t44 = t46 * t180;
t97 = t117 * t184 + t155 * t180;
t311 = -t97 * t257 - t44;
t105 = -t148 * t178 + t125;
t106 = -t149 * t178 - t126;
t135 = -t149 * t184 - t180 * t178;
t108 = -t135 * t179 + t183 * t144;
t156 = pkin(4) * t178 + t252;
t212 = t181 * t246;
t289 = qJD(4) * t97;
t45 = -t180 * t74 + t184 * t213 - t289;
t98 = -t180 * t117 + t155 * t184;
t24 = -t179 * (qJD(5) * t98 + t212) + t156 * t255 + t183 * t45;
t293 = t184 * t97;
t201 = t180 * t98 - t293;
t294 = t184 * t45;
t309 = qJD(4) * t201 - t294 - t44;
t109 = t135 * t183 + t144 * t179;
t134 = t149 * t180 - t178 * t184;
t133 = qJD(5) - t134;
t198 = t109 * t168 - t133 * t169;
t69 = t109 * t169 + t133 * t168;
t307 = t198 * t69;
t76 = t156 * t179 + t183 * t98;
t25 = -qJD(5) * t76 - t179 * t45 - t183 * t212;
t269 = t179 * t184;
t75 = t156 * t183 - t179 * t98;
t306 = t25 * (-t171 * t269 + t172 * t183) + t75 * ((-t171 * t254 - t250) * t183 + (-qJD(5) * t172 + t171 * t259 - t215) * t179);
t305 = t318 * t168 + t319 * t169;
t304 = t319 * t168 - t318 * t169;
t303 = t317 * t168 + t316 * t169;
t302 = t316 * t168 - t317 * t169;
t299 = t114 * t97;
t297 = t179 * t75;
t296 = t183 * t76;
t295 = t183 * t97;
t89 = qJD(4) * t134 + t184 * t125;
t292 = t89 * t180;
t90 = t125 * t180 - t149 * t257 - t178 * t259;
t291 = t90 * t184;
t288 = t109 * t108;
t287 = t133 * t183;
t286 = t134 * t180;
t285 = t134 * t183;
t284 = t135 * t134;
t282 = t135 * t184;
t281 = t144 * t149;
t280 = t148 * t149;
t276 = t150 * t180;
t275 = t168 * t108;
t273 = t169 * t108;
t271 = t175 * t179;
t270 = t179 * t180;
t268 = t180 * t183;
t265 = t186 * qJD(1) ^ 2;
t251 = pkin(3) * t261;
t248 = t75 * t270;
t247 = t90 * t276;
t245 = t182 * t265;
t238 = t148 * t263;
t237 = t149 * t263;
t41 = t108 * qJD(5) - t179 * t126 + t183 * t89;
t64 = -pkin(6) * t133 + t76;
t229 = -pkin(6) * t41 + t175 * t64 - t46;
t63 = pkin(6) * t109 + t97;
t230 = pkin(6) * t90 - t175 * t63 - t24;
t2 = t168 * t229 + t169 * t230;
t203 = t168 * t64 - t169 * t63;
t236 = -t175 * t203 + t2;
t28 = t168 * t63 + t169 * t64;
t3 = t168 * t230 - t169 * t229;
t235 = t175 * t28 + t3;
t224 = -t133 * t175 - t41;
t225 = t109 * t175 - t90;
t13 = t168 * t225 + t169 * t224;
t232 = t175 * t198 - t13;
t14 = t168 * t224 - t169 * t225;
t231 = t175 * t69 + t14;
t129 = -pkin(4) * t151 + pkin(5) * t150 + t170;
t205 = -pkin(6) * t150 - t129 * t183;
t127 = t150 * t266 + t151 * t179;
t80 = pkin(6) * t127 + t129 * t184;
t131 = t178 * t267 - t185 * t261 - t186 * t260;
t87 = pkin(4) * t131 + pkin(5) * t130 - t251;
t228 = -t175 * t80 - t205 * t257 - (-pkin(6) * t130 + t129 * t256 - t183 * t87) * t180;
t227 = t87 * t248 + (t25 * t270 + t314 * t75) * t129;
t101 = t205 * t180;
t196 = t130 * t184 - t150 * t259;
t192 = -qJD(5) * t151 - t196;
t206 = -t150 * t254 - t131;
t57 = t179 * t206 - t183 * t192;
t226 = -pkin(6) * t57 + t101 * t175 + t129 * t259 - t184 * t87;
t219 = t179 * t133;
t218 = qJD(4) * t171 - t123;
t216 = qJD(3) * (-qJD(2) - t178);
t211 = t25 * (pkin(4) * t183 + pkin(5) * t269) + (t115 * t179 + t183 * t253 - pkin(4) * t256 + (-t179 * t259 + t183 * t254) * pkin(5)) * t75;
t210 = t182 * t234;
t209 = -t148 * t293 + t312 * t98 + t311;
t208 = -t175 * t276 - t57;
t207 = (-qJD(3) + t178) * t301;
t204 = t168 * t28 - t169 * t203;
t200 = t180 * t97 + t184 * t98;
t199 = t312 * t76 + t315 * t97;
t197 = t130 * t180 + t150 * t257;
t194 = t148 * t269 - t149 * t183 + t314;
t193 = -t127 * t175 + t197;
t139 = t168 * t268 + t169 * t184;
t140 = -t168 * t184 + t169 * t268;
t191 = t2 * t139 - t140 * t3 - t320 * t203 + t321 * t28;
t189 = t168 * t235 + t169 * t236;
t188 = -t168 * t236 + t169 * t235;
t152 = -pkin(5) * t266 + t177;
t119 = -t147 * t169 - t153 * t168;
t118 = -t147 * t168 + t153 * t169;
t112 = -t148 ^ 2 + t149 ^ 2;
t111 = t126 * t151;
t107 = t108 - t175;
t103 = -t136 * t169 - t145 * t168;
t102 = -t136 * t168 + t145 * t169;
t95 = -t127 * t169 - t150 * t274;
t94 = -t127 * t168 + t150 * t272;
t86 = -t135 * t168 - t169 * t285;
t85 = t135 * t169 - t168 * t285;
t70 = pkin(6) * t285 + t98;
t67 = -pkin(6) * t135 - t295;
t58 = t179 * t192 + t183 * t206;
t55 = t97 * t297;
t54 = -t101 * t169 - t168 * t80;
t53 = -t101 * t168 + t169 * t80;
t52 = t144 * t286 + t291;
t51 = -t144 * t282 - t292;
t50 = -t133 * t144 * t180 + t291;
t49 = -pkin(7) * t69 - t275;
t48 = pkin(7) * t198 - t273;
t42 = -qJD(5) * t109 - t183 * t126 - t179 * t89;
t40 = t42 * t183;
t37 = t42 * t270;
t32 = t42 * (-t150 * t269 + t151 * t183);
t31 = -t168 * t70 - t169 * t67;
t30 = -t168 * t67 + t169 * t70;
t22 = t168 * t208 + t169 * t193;
t21 = -t168 * t193 + t169 * t208;
t12 = t108 * t194 + t37;
t11 = -t41 * t268 + (-t183 * t257 + t315) * t109;
t10 = pkin(6) * t273 - pkin(7) * t28 - t168 * t75;
t9 = -pkin(6) * t275 + pkin(7) * t203 - t169 * t75;
t8 = t107 * t194 + t37;
t7 = t168 * t228 - t169 * t226;
t6 = t168 * t226 + t169 * t228;
t5 = t14 * t139 + t321 * t198;
t4 = t13 * t140 + t320 * t69;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t210, 0, qJD(2) ^ 2 * t182, 0.2e1 * t210, 0, 0, 0.2e1 * pkin(2) * t234, 0, 0, 0, t125 * t150 - t130 * t149, t125 * t151 - t126 * t150 + t130 * t148 + t131 * t149, t130 * t178, -t131 * t148 - t111, -t131 * t178, 0, (qJD(1) * t131 + t126) * t170 + 0.2e1 * t148 * t251, 0.2e1 * t170 * t125 + (t149 - t310) * t251, (-t130 * t185 - t131 * t181 + (t150 * t181 + t151 * t185) * qJD(3)) * t301, -0.2e1 * t170 * t214, t89 * t184 * t150 + t135 * t196, 0, 0, -t134 * t197 + t247, 0, -t131 * t144 - t111, 0, 0, (t129 * t89 + t130 * t97 + t135 * t87 + t150 * t46 + (-t129 * t134 - t150 * t98) * qJD(4)) * t184 + (t129 * t90 - t130 * t98 - t134 * t87 - t150 * t45 + (-t129 * t135 - t150 * t97) * qJD(4)) * t180, -t201 * t87 + (-qJD(4) * t200 - t180 * t45 + t184 * t46) * t129, t109 * t57 + t127 * t41, 0, 0, t108 * t58 + t32, 0, t133 * t197 + t247, 0, t127 * t46 + t57 * t97 + (t109 * t87 + t129 * t41 + (t129 * t287 - t150 * t76) * qJD(4)) * t184 + (t87 * t287 - t130 * t76 - t150 * t24 + (-qJD(4) * t109 - t133 * t256 + t183 * t90) * t129) * t180, 0, (-t268 * t76 + t293) * t87 + ((-t258 * t76 + t46) * t184 + (-t183 * t24 + t256 * t76 - t289) * t180) * t129 + t227, t13 * t95 - t21 * t69, 0, 0, t14 * t94 - t198 * t22, 0, t107 * t58 + t32, 0, 0, -t13 * t53 + t14 * t54 - t198 * t6 + t2 * t94 + t203 * t21 - t22 * t28 - t3 * t95 + t69 * t7, t2 * t54 - t203 * t7 - t28 * t6 + t3 * t53 + t227; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t245, 0, 0, -t245, 0, 0, -pkin(2) * t265, 0, 0, 0, t280, t112, t105, -t280, t106, 0, t237 + (-t148 * t262 + t181 * t216) * pkin(3), -t238 + (-t149 * t262 + t185 * t216) * pkin(3), (-t105 * t185 + t106 * t181) * pkin(3), t170 * pkin(3) * t265, t51, 0, 0, t52, 0, -t281, 0, 0, (-t134 * t218 + t135 * t249 + t171 * t89) * t180 + (t134 * t249 + t135 * t218 - t171 * t90 - t45) * t184 + t209, t201 * t123 - t309 * t171 + (t200 * t185 + (-qJD(2) * t172 - t156) * t181) * t300, t11, 0, 0, t12, 0, t50, 0, -t104 * t133 - t141 * t90 + (-t109 * t123 - t24 + (t109 * t171 - t295) * qJD(4)) * t184 + (t109 * t249 + t171 * t41 + (-t123 * t133 - t46) * t183) * t180 + t199, 0, t104 * t76 + t141 * t24 + t218 * t293 + (t97 * t249 + t171 * t46 + (t296 - t297) * t123) * t180 + t306, t4, 0, 0, t5, 0, t8, 0, 0, -t102 * t13 + t103 * t14 - t198 * t303 + t302 * t69 + t191, t102 * t3 + t103 * t2 - t123 * t248 - t203 * t302 - t28 * t303 + t306; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t280, t112, t105, -t280, t106, 0, t181 * t207 + t237, t185 * t207 - t238, 0, 0, t51, 0, 0, t52, 0, -t281, 0, 0, -t114 * t135 - t115 * t134 - t294 + (-t292 + t291 + (-t282 + t286) * qJD(4)) * pkin(5) + t209, -t299 - t115 * t98 + (-pkin(4) * qJD(3) + t156) * t253 + t309 * pkin(5), t11, 0, 0, t12, 0, t50, 0, -t109 * t114 - t152 * t90 + (-pkin(5) * t41 - t183 * t46) * t180 + t264 * t133 + (-t24 + (-pkin(5) * t109 - t295) * qJD(4)) * t184 + t199, 0, t311 * pkin(5) + t152 * t24 - t264 * t76 + t211 - t299, t4, 0, 0, t5, 0, t8, 0, 0, -t118 * t13 + t119 * t14 + t198 * t304 + t305 * t69 + t191, t118 * t3 + t119 * t2 - t203 * t305 + t304 * t28 + t211; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t284, 0, 0, t284, 0, -t126, 0, 0, 0, 0, t109 * t287 + t41 * t179, 0, 0, -t108 * t219 + t40, 0, -t133 * t135, 0, -t109 * t98 + t135 * t76 + t179 * t46, 0, -t55 + (-t98 + t296) * t97, -t13 * t169 * t179 + (-t168 * t271 + t169 * t255 + t86) * t69, 0, 0, -t14 * t168 * t179 - (-t168 * t255 - t169 * t271 - t85) * t198, 0, -t107 * t219 + t40, 0, 0, -t203 * t86 + t28 * t85 - t30 * t69 + t31 * t198 + ((t168 * t198 + t169 * t69) * pkin(6) + t204) * t255 + ((-t168 * t231 + t169 * t232) * pkin(6) + t188) * t179, t203 * t30 + t28 * t31 - t55 + (t179 * t188 + t204 * t255) * pkin(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t288, 0, 0, t288, 0, t90, 0, -t108 * t97 + t133 * t75 - t24, 0, 0, -t13 * t168 + (t169 * t175 + t48) * t69, 0, 0, t14 * t169 - (-t168 * t175 - t49) * t198, 0, -pkin(7) * t42 + t107 * t109, 0, 0, -t10 * t69 - t203 * t48 + t28 * t49 + t198 * t9 + (t168 * t232 + t169 * t231) * pkin(6) + t189, pkin(6) * t189 + t10 * t203 + t28 * t9 + t75 * t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t307, 0, 0, t307, 0, t42, 0, 0, 0, 0;];
tauc_reg = t1;
