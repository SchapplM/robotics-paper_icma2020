% Calculate minimal parameter regressor of joint inertia matrix for
% CloosQRC350OL
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x36]
%   minimal parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2020-06-20 08:27
% Revision: 6013df02bda2c1f6ebc95d3649839f696d960e41 (2020-06-19)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = CloosQRC350OL_inertiaJ_regmin_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'CloosQRC350OL_inertiaJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'CloosQRC350OL_inertiaJ_regmin_slag_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2020-06-20 08:18:57
% EndTime: 2020-06-20 08:19:04
% DurationCPUTime: 3.25s
% Computational Cost: add. (1033->150), mult. (2477->314), div. (0->0), fcn. (3076->10), ass. (0->148)
t166 = 2 * pkin(2);
t155 = cos(qJ(3));
t93 = sin(qJ(3));
t94 = sin(qJ(2));
t98 = cos(qJ(2));
t57 = t155 * t98 - t93 * t94;
t97 = cos(qJ(4));
t128 = t97 * t57;
t56 = -t155 * t94 - t93 * t98;
t91 = sin(qJ(5));
t96 = cos(qJ(5));
t26 = t91 * t128 - t96 * t56;
t165 = -0.2e1 * t26;
t80 = t94 * pkin(3) + pkin(2);
t31 = -t56 * pkin(4) + t57 * pkin(5) + t80;
t164 = 0.2e1 * t31;
t92 = sin(qJ(4));
t131 = t96 * t92;
t90 = sin(qJ(6));
t95 = cos(qJ(6));
t50 = t90 * t131 - t95 * t97;
t163 = -0.2e1 * t50;
t162 = 0.2e1 * t57;
t161 = -0.2e1 * t92;
t160 = 0.2e1 * t97;
t159 = pkin(6) * t96;
t158 = t93 * pkin(3);
t83 = t155 * pkin(3);
t79 = t83 + pkin(4);
t157 = pkin(4) + t79;
t140 = t92 * t31;
t113 = t91 * t140;
t130 = t97 * t31;
t28 = t96 * t128 + t91 * t56;
t100 = t28 * pkin(6) + t130;
t14 = (-pkin(6) * t57 - t31 * t96) * t92;
t3 = t95 * t100 + t90 * t14;
t71 = t91 * t92;
t156 = t50 * t113 + t3 * t71;
t138 = t92 * t57;
t13 = t90 * t138 - t95 * t28;
t154 = t13 * t90;
t153 = t26 * t96;
t152 = t26 * t97;
t151 = t28 * t91;
t150 = t28 * t97;
t51 = t95 * t131 + t90 * t97;
t46 = t51 * t90;
t86 = t92 ^ 2;
t149 = t86 * t91;
t148 = t86 * t96;
t147 = t90 * t26;
t146 = t90 * t91;
t145 = t90 * t95;
t144 = t90 * t96;
t143 = t91 * t26;
t142 = t91 * t79;
t141 = t91 * t96;
t72 = t91 * t97;
t139 = t92 * t56;
t78 = -pkin(5) + t158;
t137 = t92 * t78;
t136 = t92 * t95;
t135 = t92 * t97;
t134 = t95 * t26;
t133 = t95 * t91;
t132 = t95 * t96;
t76 = t96 * t97;
t129 = t97 * t56;
t127 = t97 * t78;
t101 = (t78 - t159) * t92;
t38 = t142 + (t78 * t96 - pkin(6)) * t97;
t18 = t95 * t101 + t90 * t38;
t42 = -t91 * t127 + t96 * t79;
t126 = t18 * t71 + t42 * t50;
t103 = (-pkin(5) - t159) * t92;
t81 = t91 * pkin(4);
t47 = t81 + (-pkin(5) * t96 - pkin(6)) * t97;
t29 = t95 * t103 + t90 * t47;
t58 = t96 * pkin(4) + pkin(5) * t72;
t125 = t29 * t71 + t58 * t50;
t124 = pkin(5) * t149 + t58 * t97;
t123 = t56 * t162;
t122 = -0.2e1 * t138;
t121 = -0.2e1 * t135;
t69 = 0.2e1 * t135;
t120 = t28 * t131;
t119 = t51 * t133;
t118 = t78 * t148;
t85 = t91 ^ 2;
t117 = t90 * t85 * t92;
t116 = t90 * t143;
t64 = t90 * t71;
t115 = t90 * t141;
t114 = t57 * t149;
t112 = t85 * t136;
t111 = t26 * t133;
t65 = t92 * t133;
t110 = t91 * t132;
t109 = t57 * t148;
t108 = pkin(6) * t64;
t107 = pkin(6) * t117;
t106 = pkin(6) * t65;
t4 = -t90 * t100 + t95 * t14;
t105 = t51 * t113 + t4 * t71;
t104 = -t78 * t149 + t42 * t97;
t102 = pkin(4) * t57 + pkin(5) * t56;
t99 = -t56 * t78 + t57 * t79;
t89 = t97 ^ 2;
t88 = t96 ^ 2;
t87 = t95 ^ 2;
t84 = t90 ^ 2;
t75 = t88 * t86;
t70 = t85 * t86;
t68 = pkin(5) * t148;
t66 = t91 * t131;
t63 = t96 * t121;
t62 = -0.2e1 * t86 * t141;
t61 = t91 * t69;
t60 = pkin(6) * t112;
t59 = pkin(5) * t76 - t81;
t55 = (t85 - t88) * t92;
t54 = t57 ^ 2;
t49 = t51 ^ 2;
t45 = t92 * t128;
t43 = t96 * t127 + t142;
t41 = 0.2e1 * t51 * t71;
t40 = t71 * t163;
t37 = t58 * t51;
t35 = t51 * t96 - t112;
t34 = -t50 * t96 + t117;
t33 = t51 * t163;
t32 = (t86 - t89) * t57;
t30 = -t90 * t103 + t95 * t47;
t25 = t42 * t51;
t23 = -t90 * t50 + t51 * t95;
t21 = t26 * t71;
t20 = (t50 * t95 + t46) * t91;
t19 = -t90 * t101 + t95 * t38;
t12 = t57 * t136 + t90 * t28;
t11 = -t109 + t150;
t10 = t114 - t152;
t9 = t13 * t51;
t7 = (t151 + t153) * t92;
t6 = t13 * t71 - t51 * t26;
t5 = t12 * t71 + t50 * t26;
t1 = t51 * t12 - t13 * t50;
t2 = [1, t98 ^ 2, -0.2e1 * t98 * t94, 0, 0, 0, t94 * t166, t98 * t166, t54, t123, 0, 0, 0, -0.2e1 * t80 * t56, t80 * t162, t89 * t54, t54 * t121, t97 * t123, t56 * t122, t56 ^ 2, -0.2e1 * t31 * t129, t139 * t164, t28 ^ 2, t28 * t165, 0.2e1 * t28 * t138, t26 * t122, t86 * t54, (t114 + t152) * t164, (t109 + t150) * t164, t13 ^ 2, 0.2e1 * t13 * t12, t13 * t165, t12 * t165, t26 ^ 2, -0.2e1 * t113 * t12 - 0.2e1 * t3 * t26, 0.2e1 * t113 * t13 - 0.2e1 * t4 * t26; 0, 0, 0, t98, -t94, 0, 0, 0, 0, 0, t57, t56, 0, 0, 0, -t45, t32, -t139, -t129, 0, t99 * t92, t99 * t97, -t120, t7, t11, t10, t45, (t26 * t78 + t42 * t57) * t92, (t28 * t78 - t43 * t57) * t92, t9, t1, t6, t5, -t21, -t42 * t12 - t18 * t26 + t156, t42 * t13 - t19 * t26 + t105; 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t83, -0.2e1 * t158, t86, t69, 0, 0, 0, t79 * t160, t79 * t161, t75, t62, t63, t61, t89, 0.2e1 * t104, -0.2e1 * t43 * t97 - 0.2e1 * t118, t49, t33, t41, t40, t70, 0.2e1 * t126, 0.2e1 * t19 * t71 + 0.2e1 * t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, t56, 0, 0, 0, -t45, t32, -t139, -t129, 0, t102 * t92, t102 * t97, -t120, t7, t11, t10, t45, (-pkin(5) * t26 + t57 * t58) * t92, (-pkin(5) * t28 + t57 * t59) * t92, t9, t1, t6, t5, -t21, -t58 * t12 - t29 * t26 + t156, t58 * t13 - t30 * t26 + t105; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t83, -t158, t86, t69, 0, 0, 0, t157 * t97, -t157 * t92, t75, t62, t63, t61, t89, t104 + t124, -t118 + t68 + (-t43 + t59) * t97, t49, t33, t41, t40, t70, t125 + t126, t25 + t37 + (t19 + t30) * t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t86, t69, 0, 0, 0, pkin(4) * t160, pkin(4) * t161, t75, t62, t63, t61, t89, 0.2e1 * t124, 0.2e1 * t59 * t97 + 0.2e1 * t68, t49, t33, t41, t40, t70, 0.2e1 * t125, 0.2e1 * t30 * t71 + 0.2e1 * t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t128, -t138, t56, -t130, t140, t151, t28 * t96 - t143, t91 * t138, t57 * t131, 0, -t96 * t130, t91 * t130, -t13 * t133, (-t12 * t95 + t154) * t91, t13 * t96 + t111, t12 * t96 - t116, -t153, -pkin(6) * t111 - t117 * t31 + t3 * t96, pkin(6) * t116 - t112 * t31 + t4 * t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t92, -t97, 0, -t137, -t127, -t66, t55, t72, t76, 0, -t78 * t131, t91 * t137, -t119, t20, t35, t34, t66, -t146 * t42 + t18 * t96 + t60, -t133 * t42 + t19 * t96 - t107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t92, -t97, 0, t92 * pkin(5), t97 * pkin(5), -t66, t55, t72, t76, 0, pkin(5) * t131, -pkin(5) * t71, -t119, t20, t35, t34, t66, -t146 * t58 + t29 * t96 + t60, -t133 * t58 + t30 * t96 - t107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t85, 0.2e1 * t141, 0, 0, 0, 0, 0, t87 * t85, -0.2e1 * t85 * t145, -0.2e1 * t110, 0.2e1 * t115, t88, 0.2e1 * pkin(6) * t110, -0.2e1 * pkin(6) * t115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, -t26, t138, t113, t31 * t131, t154, t90 * t12 + t13 * t95, -t147, -t134, 0, pkin(6) * t147 - t31 * t65, pkin(6) * t134 + t113 * t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t131, t71, t97, t42, -t43, t46, t23, t64, t65, 0, -t42 * t95 - t108, t90 * t42 - t106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t131, t71, t97, t58, t59, t46, t23, t64, t65, 0, -t58 * t95 - t108, t90 * t58 - t106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91, t96, 0, 0, 0, -t90 * t133, (t84 - t87) * t91, t144, t132, 0, -pkin(6) * t144, -pkin(6) * t132; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t84, 0.2e1 * t145, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13, t12, -t26, t3, t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t51, -t50, t71, t18, t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t51, -t50, t71, t29, t30; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t133, t146, t96, pkin(6) * t133, -pkin(6) * t146; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t90, t95, 0, -t90 * pkin(6), -t95 * pkin(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0;];
MM_reg = t2;
