% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% CloosQRC350OL
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6]';
%
% Output:
% m_new_reg [(3*7)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-06-23 22:05
% Revision: 9ee7546dde8543a81bf40e37a1400ef9d9e232c4 (2020-06-23)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = CloosQRC350OL_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'CloosQRC350OL_invdynm_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'CloosQRC350OL_invdynm_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'CloosQRC350OL_invdynm_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'CloosQRC350OL_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'CloosQRC350OL_invdynm_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-06-23 22:04:00
% EndTime: 2020-06-23 22:04:37
% DurationCPUTime: 38.41s
% Computational Cost: add. (153343->522), mult. (322395->826), div. (0->0), fcn. (237881->12), ass. (0->414)
t1006 = sin(qJ(3));
t1007 = sin(qJ(2));
t1012 = cos(qJ(3));
t1067 = t1007 * t1012;
t1013 = cos(qJ(2));
t1068 = t1006 * t1013;
t971 = (-t1067 - t1068) * qJD(1);
t1065 = t1012 * t1013;
t1069 = t1006 * t1007;
t973 = (t1065 - t1069) * qJD(1);
t1094 = t973 * t971;
t998 = qJDD(2) + qJDD(3);
t1105 = t998 + t1094;
t1111 = t1006 * t1105;
t1110 = t1012 * t1105;
t1016 = qJD(1) ^ 2;
t1064 = t1013 * t1016;
t996 = t1007 * g(3);
t985 = pkin(2) * t1064 - t996;
t994 = t1007 * t1064;
t990 = qJDD(2) - t994;
t957 = t990 * pkin(3) - t985;
t984 = -t1007 * t1016 * pkin(2) - t1013 * g(3);
t1000 = t1007 ^ 2;
t1015 = qJD(2) ^ 2;
t991 = -t1000 * t1016 - t1015;
t965 = pkin(3) * t991 + t984;
t926 = t1006 * t965 - t1012 * t957;
t927 = t1006 * t957 + t1012 * t965;
t877 = t1006 * t927 - t1012 * t926;
t1109 = t1007 * t877;
t1108 = t1013 * t877;
t999 = qJD(2) + qJD(3);
t1093 = t999 * t971;
t1071 = qJD(1) * qJD(2);
t1046 = t1013 * t1071;
t1062 = t1007 * qJDD(1);
t982 = -t1046 - t1062;
t1047 = t1007 * t1071;
t995 = t1013 * qJDD(1);
t983 = t995 - t1047;
t925 = t971 * qJD(3) + t1006 * t982 + t1012 * t983;
t1107 = t925 + t1093;
t1106 = -t982 + t1046;
t1004 = sin(qJ(5));
t1010 = cos(qJ(5));
t1005 = sin(qJ(4));
t1011 = cos(qJ(4));
t948 = -t1005 * t999 + t1011 * t973;
t967 = qJD(4) + t971;
t921 = -t1004 * t948 + t1010 * t967;
t922 = t1004 * t967 + t1010 * t948;
t880 = t921 * t922;
t1026 = t948 * qJD(4) + t1005 * t925 + t1011 * t998;
t887 = qJDD(5) + t1026;
t840 = t880 - t887;
t969 = t971 ^ 2;
t970 = t973 ^ 2;
t997 = t999 ^ 2;
t1040 = t1007 * t985 + t1013 * t984;
t1104 = pkin(2) * t1040;
t1099 = qJDD(1) * pkin(2);
t956 = pkin(3) * t1106 + t1099;
t1103 = pkin(3) * t956;
t1003 = sin(qJ(6));
t1009 = cos(qJ(6));
t1092 = t999 * t973;
t1041 = t1006 * t983 - t1012 * t982;
t924 = -t973 * qJD(3) - t1041;
t844 = t1107 * pkin(5) + (-t924 + t1092) * pkin(4) + t956;
t939 = -t971 * pkin(4) + t973 * pkin(5);
t875 = -t997 * pkin(4) - t998 * pkin(5) + t971 * t939 + t927;
t819 = -t1005 * t844 + t1011 * t875;
t874 = t998 * pkin(4) - t997 * pkin(5) - t973 * t939 - t926;
t793 = t1004 * t874 + t1010 * t819;
t772 = pkin(6) * t840 + t793;
t947 = -t1005 * t973 - t1011 * t999;
t946 = qJD(5) - t947;
t1096 = t946 * t921;
t818 = t1005 * t875 + t1011 * t844;
t889 = t947 * qJD(4) - t1005 * t998 + t1011 * t925;
t923 = qJDD(4) + t924;
t1030 = -t1004 * t923 - t1010 * t889;
t839 = t921 * qJD(5) - t1030;
t777 = (t839 + t1096) * pkin(6) + t818;
t740 = t1003 * t772 + t1009 * t777;
t741 = t1003 * t777 - t1009 * t772;
t708 = t1003 * t741 + t1009 * t740;
t1102 = pkin(6) * t708;
t709 = t1003 * t740 - t1009 * t741;
t1101 = pkin(6) * t709;
t1100 = pkin(4) * t1006;
t890 = t1003 * t922 + t1009 * t946;
t891 = t1003 * t946 - t1009 * t922;
t842 = t890 * t891;
t918 = qJD(6) + t921;
t1098 = t918 * t890;
t1097 = t918 * t891;
t1095 = t946 * t922;
t917 = t947 * t948;
t893 = -t922 ^ 2 - t946 ^ 2;
t1091 = t1003 * t839;
t1090 = t1003 * t887;
t1089 = t1003 * t918;
t1088 = t1004 * t946;
t1087 = t1005 * t818;
t1086 = t1005 * t967;
t937 = -t1094 + t998;
t1085 = t1006 * t937;
t1084 = t1006 * t956;
t1083 = t1006 * t999;
t1082 = t1007 * t990;
t1081 = t1009 * t839;
t1080 = t1009 * t887;
t1079 = t1009 * t918;
t1078 = t1010 * t946;
t1077 = t1011 * t818;
t1076 = t1011 * t967;
t1075 = t1012 * t937;
t1074 = t1012 * t956;
t1073 = t1012 * t999;
t1072 = -qJD(6) + t918;
t1070 = t1005 * t1010;
t1066 = t1010 * t1011;
t1001 = t1013 ^ 2;
t1063 = -t1000 - t1001;
t1008 = sin(qJ(1));
t1061 = t1008 * qJDD(1);
t1014 = cos(qJ(1));
t1060 = t1014 * qJDD(1);
t1059 = t1013 * t1103;
t1058 = t1004 * t842;
t1057 = t1005 * t880;
t1056 = t1006 * t917;
t1055 = t1008 * t1094;
t1054 = t1010 * t842;
t1053 = t1011 * t880;
t1052 = t1012 * t917;
t1051 = t1014 * t1094;
t1050 = -pkin(4) * t1012 - pkin(3);
t792 = -t1004 * t819 + t1010 * t874;
t757 = -t1004 * t792 + t1010 * t793;
t745 = t1011 * t757 + t1087;
t756 = t1004 * t793 + t1010 * t792;
t1049 = pkin(4) * t756 - pkin(5) * t745;
t774 = t1011 * t819 + t1087;
t1048 = pkin(4) * t874 - pkin(5) * t774;
t1045 = t1008 * t995;
t1044 = t1013 * t1060;
t1043 = t1072 * t890;
t1042 = t1072 * t891;
t879 = t1006 * t926 + t1012 * t927;
t720 = t1006 * t745 + t1012 * t756;
t1039 = pkin(3) * t720 + t1049;
t765 = t1006 * t774 + t1012 * t874;
t1038 = pkin(3) * t765 + t1048;
t1037 = t1008 * t994;
t1036 = t1014 * t994;
t988 = -t1008 * t1016 + t1060;
t1035 = -pkin(1) * t988 - t1008 * g(3);
t935 = -t997 - t969;
t894 = t1006 * t935 + t1110;
t1034 = pkin(3) * t894 - t926;
t1033 = pkin(5) * t1012 + t1100;
t1032 = -t890 * qJD(6) - t1090;
t1031 = -t891 * qJD(6) + t1080;
t773 = -t1005 * t819 + t1077;
t942 = t1007 * t984 - t1013 * t985;
t1029 = pkin(5) * t1006 + t1050;
t838 = -t922 * qJD(5) - t1004 * t889 + t1010 * t923;
t955 = -t970 - t997;
t907 = t1012 * t955 - t1085;
t1028 = pkin(3) * t907 - t927;
t1027 = (-qJD(3) + t999) * t973 - t1041;
t932 = t967 * t948;
t870 = -t1026 + t932;
t931 = t967 * t947;
t871 = -t889 + t931;
t825 = -t1005 * t871 + t1011 * t870;
t915 = -t947 ^ 2 - t948 ^ 2;
t1025 = pkin(4) * t915 - pkin(5) * t825 - t774;
t801 = t1006 * t825 + t1012 * t915;
t1024 = pkin(3) * t801 + t1025;
t1017 = -t1009 * (t1042 + t1080) + t1003 * (t1043 - t1090);
t694 = -pkin(6) * t1017 - t709;
t747 = t1009 * (t1043 + t1081) + (t1042 + t1091) * t1003;
t695 = pkin(6) * t747 + t708;
t841 = -t890 ^ 2 - t891 ^ 2;
t739 = -t1004 * t841 + t1010 * t1017;
t711 = t1005 * t747 + t1011 * t739;
t738 = t1004 * (-t1009 * (t1031 + t1097) + t1003 * (t1032 + t1098)) + t1010 * t841;
t1023 = pkin(4) * t738 - pkin(5) * t711 + t1011 * t694 - t695 * t1070;
t822 = -t1004 * t893 + t1010 * t840;
t823 = (-qJD(5) - t946) * t921 + t1030;
t776 = -t1005 * t823 + t1011 * t822;
t821 = t1004 * t840 + t1010 * t893;
t1022 = pkin(4) * t821 - pkin(5) * t776 - t1011 * t793 - t818 * t1070;
t690 = t1006 * t711 + t1012 * t738;
t1021 = pkin(3) * t690 + t1023;
t752 = t1006 * t776 + t1012 * t821;
t1020 = pkin(3) * t752 + t1022;
t784 = t893 * pkin(6) + t792;
t700 = -t1004 * t784 + t1010 * t709;
t681 = t1005 * t708 + t1011 * t700;
t699 = t1004 * t709 + t1010 * t784;
t1019 = -pkin(5) * t681 + pkin(4) * t699 + (-t1011 * t709 - t708 * t1070) * pkin(6);
t671 = t1006 * t681 + t1012 * t699;
t1018 = pkin(3) * t671 + t1019;
t1002 = pkin(2) ^ 2 * qJDD(1);
t992 = -t1001 * t1016 + t1015;
t989 = t1063 * t1016;
t987 = t1014 * t1016 + t1061;
t986 = t1063 * qJDD(1);
t981 = 0.2e1 * t1046 + t1062;
t980 = t1013 * t990;
t979 = t1063 * t1071;
t968 = -pkin(1) * t987 + t1014 * g(3);
t963 = (t981 + t1062) * pkin(2);
t961 = -t970 + t997;
t960 = t969 - t997;
t959 = t1001 * t1071 + t1007 * t983;
t958 = t1000 * t1071 + t1013 * t982;
t954 = -t1007 * t992 + t980;
t953 = (t983 - t1047) * t1013;
t952 = t1013 * t992 + t1082;
t951 = t1007 * t991 + t980;
t950 = t1106 * t1007;
t940 = t970 - t969;
t934 = t996 + (t1082 + (-t1016 - t991) * t1013) * pkin(2);
t933 = pkin(2) * t989 - t942;
t930 = (t1006 * t973 + t1012 * t971) * t999;
t929 = (t1006 * t971 - t1012 * t973) * t999;
t928 = -t969 - t970;
t914 = (pkin(3) * t1007 + pkin(2)) * t956;
t912 = t1012 * t960 - t1085;
t911 = -t1006 * t961 + t1110;
t910 = t1006 * t960 + t1075;
t909 = t1012 * t961 + t1111;
t908 = -t1006 * t955 - t1075;
t906 = -t1093 + t925;
t901 = (qJD(3) + t999) * t973 + t1041;
t899 = t1012 * t925 - t973 * t1083;
t898 = t1006 * t925 + t973 * t1073;
t897 = -t1006 * t924 - t971 * t1073;
t896 = t1012 * t924 - t971 * t1083;
t895 = t1012 * t935 - t1111;
t886 = (t1005 * t948 + t1011 * t947) * t967;
t885 = (-t1005 * t947 + t1011 * t948) * t967;
t884 = -t1007 * t929 + t1013 * t930;
t883 = -pkin(3) * t901 - t1074;
t882 = t1007 * t930 + t1013 * t929;
t881 = -pkin(3) * t1107 + t1084;
t876 = pkin(3) * t877;
t869 = t1013 * t881 + t956 * t1067;
t868 = t1013 * t883 + t956 * t1069;
t867 = -t1007 * t910 + t1013 * t912;
t866 = -t1007 * t909 + t1013 * t911;
t865 = t1007 * t912 + t1013 * t910;
t864 = t1007 * t911 + t1013 * t909;
t863 = t1011 * t889 - t948 * t1086;
t862 = -t1005 * t889 - t948 * t1076;
t861 = t1005 * t1026 - t947 * t1076;
t860 = t1011 * t1026 + t947 * t1086;
t859 = t1007 * t908 + t1013 * t907;
t858 = t1006 * t906 + t1012 * t1027;
t857 = -t1006 * t1107 - t1012 * t901;
t856 = t1006 * t1027 - t1012 * t906;
t855 = -t1006 * t901 + t1012 * t1107;
t854 = pkin(3) * t856;
t853 = -t1006 * t923 + t1012 * t886;
t852 = t1006 * t886 + t1012 * t923;
t851 = -pkin(3) * t928 + t879;
t850 = -t1007 * t898 + t1013 * t899;
t849 = -t1007 * t896 + t1013 * t897;
t848 = t1007 * t899 + t1013 * t898;
t847 = t1007 * t897 + t1013 * t896;
t846 = (t1004 * t922 + t1010 * t921) * t946;
t845 = (t1004 * t921 - t1010 * t922) * t946;
t843 = t1007 * t895 + t1013 * t894;
t837 = t1012 * t863 + t1056;
t836 = t1012 * t861 - t1056;
t835 = t1006 * t863 - t1052;
t834 = t1006 * t861 + t1052;
t833 = qJDD(6) + t838;
t832 = pkin(2) * t1107 - t1007 * t881 + t956 * t1065;
t831 = pkin(2) * t901 - t1007 * t883 + t956 * t1068;
t830 = t1007 * t879 + t1108;
t829 = t1005 * t887 + t1011 * t846;
t828 = -t1005 * t846 + t1011 * t887;
t827 = -pkin(2) * (-t1007 * t907 + t1013 * t908) + t1028;
t826 = t1013 * t851 - t1109;
t824 = -t1005 * t870 - t1011 * t871;
t817 = (-t1003 * t891 - t1009 * t890) * t918;
t816 = (t1003 * t890 - t1009 * t891) * t918;
t815 = t1010 * t839 - t922 * t1088;
t814 = t1004 * t839 + t922 * t1078;
t813 = -t1004 * t838 - t921 * t1078;
t812 = t1010 * t838 - t921 * t1088;
t811 = t1004 * t818;
t810 = -t1007 * t855 + t1013 * t857;
t809 = t1007 * t858 + t1013 * t856;
t808 = t1007 * t857 + t1013 * t855;
t807 = -pkin(2) * (-t1007 * t894 + t1013 * t895) + t1034;
t806 = -t1007 * t852 + t1013 * t853;
t805 = t1007 * t853 + t1013 * t852;
t804 = pkin(2) * t928 - t1007 * t851 - t1108;
t803 = -pkin(2) * (t1013 * t879 - t1109) + t876;
t802 = -t1006 * t915 + t1012 * t825;
t799 = -t1032 - t1081;
t798 = t1031 + t1091;
t797 = t1011 * t815 - t1057;
t796 = t1011 * t813 + t1057;
t795 = -t1005 * t815 - t1053;
t794 = -t1005 * t813 + t1053;
t791 = -t1007 * t835 + t1013 * t837;
t790 = -t1007 * t834 + t1013 * t836;
t789 = t1007 * t837 + t1013 * t835;
t788 = t1007 * t836 + t1013 * t834;
t787 = -t1006 * t845 + t1012 * t829;
t786 = t1006 * t829 + t1012 * t845;
t785 = -pkin(2) * (-t1007 * t856 + t1013 * t858) + t854;
t783 = -t1004 * t833 + t1010 * t817;
t782 = t1004 * t817 + t1010 * t833;
t781 = -t1009 * t799 + t891 * t1089;
t780 = t1003 * t799 + t891 * t1079;
t779 = t1003 * t798 + t890 * t1079;
t778 = -t1009 * t798 + t890 * t1089;
t775 = -t1005 * t822 - t1011 * t823;
t771 = t1007 * t802 + t1013 * t801;
t770 = -t1006 * t814 + t1012 * t797;
t769 = -t1006 * t812 + t1012 * t796;
t768 = t1006 * t797 + t1012 * t814;
t767 = t1006 * t796 + t1012 * t812;
t766 = -t1006 * t874 + t1012 * t774;
t763 = t1010 * t781 + t1058;
t762 = t1010 * t779 - t1058;
t761 = t1004 * t781 - t1054;
t760 = t1004 * t779 + t1054;
t759 = t1005 * t816 + t1011 * t783;
t758 = -t1005 * t783 + t1011 * t816;
t754 = pkin(5) * t824 + t773;
t753 = -t1006 * t821 + t1012 * t776;
t750 = -pkin(4) * t775 + t811;
t749 = -t1007 * t786 + t1013 * t787;
t748 = t1007 * t787 + t1013 * t786;
t744 = -t1005 * t757 + t1077;
t743 = t1012 * t754 + t824 * t1100;
t742 = t1033 * t773;
t736 = t1005 * t780 + t1011 * t763;
t735 = -t1005 * t778 + t1011 * t762;
t734 = -t1005 * t763 + t1011 * t780;
t733 = -t1005 * t762 - t1011 * t778;
t732 = pkin(5) * t775 - t1005 * t793 + t818 * t1066;
t731 = -t1006 * t782 + t1012 * t759;
t730 = t1006 * t759 + t1012 * t782;
t729 = -t1007 * t768 + t1013 * t770;
t728 = -t1007 * t767 + t1013 * t769;
t727 = t1007 * t770 + t1013 * t768;
t726 = t1007 * t769 + t1013 * t767;
t725 = t1007 * t766 + t1013 * t765;
t724 = t1006 * t754 + t1050 * t824;
t723 = t1007 * t753 + t1013 * t752;
t722 = t1029 * t773;
t721 = -t1006 * t756 + t1012 * t745;
t719 = -pkin(2) * (-t1007 * t801 + t1013 * t802) + t1024;
t717 = -t1006 * t761 + t1012 * t736;
t716 = -t1006 * t760 + t1012 * t735;
t715 = t1006 * t736 + t1012 * t761;
t714 = t1006 * t735 + t1012 * t760;
t713 = -t1006 * t750 + t1012 * t732;
t712 = t1033 * t744;
t710 = -t1005 * t739 + t1011 * t747;
t707 = t1004 * t1102;
t706 = t1007 * t743 + t1013 * t724;
t705 = -t1007 * t730 + t1013 * t731;
t704 = t1007 * t731 + t1013 * t730;
t703 = -pkin(3) * t775 + t1006 * t732 + t1012 * t750;
t702 = -pkin(2) * (-t1007 * t765 + t1013 * t766) + t1038;
t701 = pkin(2) * t824 - t1007 * t724 + t1013 * t743;
t697 = t1007 * t742 + t1013 * t722;
t696 = t1029 * t744;
t693 = t1004 * t695;
t692 = pkin(2) * t773 - t1007 * t722 + t1013 * t742;
t691 = -t1006 * t738 + t1012 * t711;
t688 = t1007 * t721 + t1013 * t720;
t687 = -t1007 * t715 + t1013 * t717;
t686 = -t1007 * t714 + t1013 * t716;
t685 = t1007 * t717 + t1013 * t715;
t684 = t1007 * t716 + t1013 * t714;
t683 = -pkin(2) * (-t1007 * t752 + t1013 * t753) + t1020;
t682 = t1007 * t713 + t1013 * t703;
t680 = -t1005 * t700 + t1011 * t708;
t679 = pkin(2) * t775 - t1007 * t703 + t1013 * t713;
t678 = t1007 * t712 + t1013 * t696;
t677 = -pkin(4) * t710 + t693;
t676 = pkin(2) * t744 - t1007 * t696 + t1013 * t712;
t675 = t1007 * t691 + t1013 * t690;
t674 = -pkin(4) * t680 + t707;
t673 = -pkin(2) * (-t1007 * t720 + t1013 * t721) + t1039;
t672 = -t1006 * t699 + t1012 * t681;
t669 = pkin(5) * t710 + t1005 * t694 + t695 * t1066;
t668 = pkin(5) * t680 + (-t1005 * t709 + t708 * t1066) * pkin(6);
t667 = -t1006 * t677 + t1012 * t669;
t666 = t1007 * t672 + t1013 * t671;
t665 = -pkin(3) * t710 + t1006 * t669 + t1012 * t677;
t664 = -t1006 * t674 + t1012 * t668;
t663 = -pkin(2) * (-t1007 * t690 + t1013 * t691) + t1021;
t662 = -pkin(3) * t680 + t1006 * t668 + t1012 * t674;
t661 = t1007 * t667 + t1013 * t665;
t660 = pkin(2) * t710 - t1007 * t665 + t1013 * t667;
t659 = -pkin(2) * (-t1007 * t671 + t1013 * t672) + t1018;
t658 = t1007 * t664 + t1013 * t662;
t657 = pkin(2) * t680 - t1007 * t662 + t1013 * t664;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t988, 0, -t987, 0, t1035, -t968, 0, 0, t1014 * t959 - t1037, 0, t1014 * t952 - t1045, t1014 * t958 + t1037, 0, -t1008 * qJDD(2) + t1014 * t979, -pkin(2) * t1044 - t1008 * t934 - pkin(1) * (t1008 * t951 + t1014 * t981), 0, t1014 * t1040 - pkin(1) * (t1008 * t986 + t1014 * t989), t1008 * t1104 - pkin(1) * (pkin(2) * t1060 + t1008 * t942), t1014 * t848 + t1055, -t1008 * t940 + t1014 * t808, -t1008 * t906 + t1014 * t864, t1014 * t847 - t1055, -t1008 * t1027 + t1014 * t865, -t1008 * t998 + t1014 * t882, t1014 * t868 - t1008 * t807 - pkin(1) * (t1008 * t843 + t1014 * t901), t1014 * t869 - t1008 * t827 - pkin(1) * (t1008 * t859 + t1014 * t1107), t1014 * t826 - t1008 * t785 - pkin(1) * (t1008 * t809 + t1014 * t928), -t1014 * t1059 - t1008 * t803 - pkin(1) * (t1008 * t830 + t1014 * t956), -t1008 * t862 + t1014 * t789, 0, 0, -t1008 * t860 + t1014 * t788, 0, -t1008 * t885 + t1014 * t805, 0, 0, t1014 * t706 - t1008 * t719 - pkin(1) * (t1008 * t771 + t1014 * t824), t1014 * t697 - t1008 * t702 - pkin(1) * (t1008 * t725 + t1014 * t773), -t1008 * t795 + t1014 * t727, 0, 0, -t1008 * t794 + t1014 * t726, 0, -t1008 * t828 + t1014 * t748, 0, t1014 * t682 - t1008 * t683 - pkin(1) * (t1008 * t723 + t1014 * t775), 0, t1014 * t678 - t1008 * t673 - pkin(1) * (t1008 * t688 + t1014 * t744), -t1008 * t734 + t1014 * t685, 0, 0, -t1008 * t733 + t1014 * t684, 0, -t1008 * t758 + t1014 * t704, 0, 0, t1014 * t661 - t1008 * t663 - pkin(1) * (t1008 * t675 + t1014 * t710), t1014 * t658 - t1008 * t659 - pkin(1) * (t1008 * t666 + t1014 * t680); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t987, 0, t988, 0, t968, t1035, 0, 0, t1008 * t959 + t1036, 0, t1008 * t952 + t1044, t1008 * t958 - t1036, 0, t1014 * qJDD(2) + t1008 * t979, -pkin(2) * t1045 + t1014 * t934 + pkin(1) * (-t1008 * t981 + t1014 * t951), 0, t1008 * t1040 + pkin(1) * (-t1008 * t989 + t1014 * t986), -t1014 * t1104 + pkin(1) * (-pkin(2) * t1061 + t1014 * t942), t1008 * t848 - t1051, t1008 * t808 + t1014 * t940, t1008 * t864 + t1014 * t906, t1008 * t847 + t1051, t1008 * t865 + t1014 * t1027, t1008 * t882 + t1014 * t998, t1008 * t868 + t1014 * t807 + pkin(1) * (-t1008 * t901 + t1014 * t843), t1008 * t869 + t1014 * t827 + pkin(1) * (-t1008 * t1107 + t1014 * t859), t1008 * t826 + t1014 * t785 + pkin(1) * (-t1008 * t928 + t1014 * t809), -t1008 * t1059 + t1014 * t803 + pkin(1) * (-t1008 * t956 + t1014 * t830), t1008 * t789 + t1014 * t862, 0, 0, t1008 * t788 + t1014 * t860, 0, t1008 * t805 + t1014 * t885, 0, 0, t1008 * t706 + t1014 * t719 + pkin(1) * (-t1008 * t824 + t1014 * t771), t1008 * t697 + t1014 * t702 + pkin(1) * (-t1008 * t773 + t1014 * t725), t1008 * t727 + t1014 * t795, 0, 0, t1008 * t726 + t1014 * t794, 0, t1008 * t748 + t1014 * t828, 0, t1008 * t682 + t1014 * t683 + pkin(1) * (-t1008 * t775 + t1014 * t723), 0, t1008 * t678 + t1014 * t673 + pkin(1) * (-t1008 * t744 + t1014 * t688), t1008 * t685 + t1014 * t734, 0, 0, t1008 * t684 + t1014 * t733, 0, t1008 * t704 + t1014 * t758, 0, 0, t1008 * t661 + t1014 * t663 + pkin(1) * (-t1008 * t710 + t1014 * t675), t1008 * t658 + t1014 * t659 + pkin(1) * (-t1008 * t680 + t1014 * t666); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, t953, 0, t954, t950, 0, 0, t963, 0, t933, t1002, t850, t810, t866, t849, t867, t884, t831, t832, t804, t914, t791, 0, 0, t790, 0, t806, 0, 0, t701, t692, t729, 0, 0, t728, 0, t749, 0, t679, 0, t676, t687, 0, 0, t686, 0, t705, 0, 0, t660, t657; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1016, 0, 0, -g(3), 0, 0, t959, 0, t952, t958, 0, t979, -pkin(2) * t995, 0, t1040, 0, t848, t808, t864, t847, t865, t882, t868, t869, t826, -t1059, t789, 0, 0, t788, 0, t805, 0, 0, t706, t697, t727, 0, 0, t726, 0, t748, 0, t682, 0, t678, t685, 0, 0, t684, 0, t704, 0, 0, t661, t658; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1016, 0, qJDD(1), 0, g(3), 0, 0, 0, t994, 0, t995, -t994, 0, qJDD(2), t934, 0, 0, -t1104, -t1094, t940, t906, t1094, t1027, t998, t807, t827, t785, t803, t862, 0, 0, t860, 0, t885, 0, 0, t719, t702, t795, 0, 0, t794, 0, t828, 0, t683, 0, t673, t734, 0, 0, t733, 0, t758, 0, 0, t663, t659; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, t953, 0, t954, t950, 0, 0, t963, 0, t933, t1002, t850, t810, t866, t849, t867, t884, t831, t832, t804, t914, t791, 0, 0, t790, 0, t806, 0, 0, t701, t692, t729, 0, 0, t728, 0, t749, 0, t679, 0, t676, t687, 0, 0, t686, 0, t705, 0, 0, t660, t657; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t983, 0, t990, t1047, 0, -t1047, 0, 0, t985, 0, t899, t857, t911, t897, t912, t930, t1084, t1074, -t877, 0, t837, 0, 0, t836, 0, t853, 0, 0, t743, t742, t770, 0, 0, t769, 0, t787, 0, t713, 0, t712, t717, 0, 0, t716, 0, t731, 0, 0, t667, t664; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1046, 0, t992, t982, 0, -t1046, -t1099, 0, t984, 0, t898, t855, t909, t896, t910, t929, t883, t881, t851, -t1103, t835, 0, 0, t834, 0, t852, 0, 0, t724, t722, t768, 0, 0, t767, 0, t786, 0, t703, 0, t696, t715, 0, 0, t714, 0, t730, 0, 0, t665, t662; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t994, 0, t995, -t994, 0, qJDD(2), -t985, 0, 0, 0, -t1094, t940, t906, t1094, t1027, t998, t1034, t1028, t854, t876, t862, 0, 0, t860, 0, t885, 0, 0, t1024, t1038, t795, 0, 0, t794, 0, t828, 0, t1020, 0, t1039, t734, 0, 0, t733, 0, t758, 0, 0, t1021, t1018; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t925, -t901, t1105, -t1093, t960, t1093, 0, t956, t926, 0, t863, 0, 0, t861, 0, t886, 0, 0, t754, pkin(5) * t773, t797, 0, 0, t796, 0, t829, 0, t732, 0, pkin(5) * t744, t736, 0, 0, t735, 0, t759, 0, 0, t669, t668; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1092, t1107, t961, t924, t937, -t1092, -t956, 0, t927, 0, -t917, 0, 0, t917, 0, t923, 0, 0, -pkin(4) * t824, -pkin(4) * t773, t814, 0, 0, t812, 0, t845, 0, t750, 0, -pkin(4) * t744, t761, 0, 0, t760, 0, t782, 0, 0, t677, t674; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1094, t940, t906, t1094, t1027, t998, -t926, -t927, 0, 0, t862, 0, 0, t860, 0, t885, 0, 0, t1025, t1048, t795, 0, 0, t794, 0, t828, 0, t1022, 0, t1049, t734, 0, 0, t733, 0, t758, 0, 0, t1023, t1019; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t889, 0, 0, -t931, 0, t931, 0, 0, t818, 0, t815, 0, 0, t813, 0, t846, 0, t1010 * t818, 0, 0, t763, 0, 0, t762, 0, t783, 0, 0, t1010 * t695, t1010 * t1102; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t932, 0, 0, -t1026, 0, -t932, 0, 0, t819, 0, t880, 0, 0, -t880, 0, -t887, 0, t793, 0, 0, -t780, 0, 0, t778, 0, -t816, 0, 0, -t694, t1101; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t917, 0, 0, t917, 0, t923, 0, 0, 0, 0, t814, 0, 0, t812, 0, t845, 0, t811, 0, 0, t761, 0, 0, t760, 0, t782, 0, 0, t693, t707; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t839, 0, 0, -t1096, 0, t1096, 0, t818, 0, 0, t781, 0, 0, t779, 0, t817, 0, 0, t695, t1102; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1095, 0, 0, t838, 0, -t1095, 0, 0, 0, 0, -t842, 0, 0, t842, 0, t833, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t880, 0, 0, t880, 0, t887, 0, -t793, 0, 0, t780, 0, 0, -t778, 0, t816, 0, 0, t694, -t1101; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t799, 0, 0, -t1098, 0, t1098, 0, 0, -t740, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1097, 0, 0, t798, 0, -t1097, 0, 0, t741, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t842, 0, 0, t842, 0, t833, 0, 0, 0, 0;];
m_new_reg = t1;
