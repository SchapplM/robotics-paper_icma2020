% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% CloosQRC350OL
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inertia matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2020-06-20 08:27
% Revision: 6013df02bda2c1f6ebc95d3649839f696d960e41 (2020-06-19)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = CloosQRC350OL_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'CloosQRC350OL_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'CloosQRC350OL_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'CloosQRC350OL_inertiaDJ_reg2_slag_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-06-20 08:18:58
% EndTime: 2020-06-20 08:19:48
% DurationCPUTime: 31.22s
% Computational Cost: add. (9543->595), mult. (23260->1003), div. (0->0), fcn. (23024->10), ass. (0->338)
t228 = sin(qJ(2));
t232 = cos(qJ(2));
t466 = cos(qJ(3));
t371 = t466 * t232;
t465 = sin(qJ(3));
t184 = -t228 * t465 + t371;
t214 = pkin(3) * t228 + pkin(2);
t262 = t228 * t466 + t232 * t465;
t126 = pkin(4) * t262 + pkin(5) * t184 + t214;
t226 = sin(qJ(5));
t227 = sin(qJ(4));
t230 = cos(qJ(5));
t397 = qJD(5) * t230;
t357 = t227 * t397;
t231 = cos(qJ(4));
t401 = qJD(4) * t231;
t174 = t226 * t401 + t357;
t417 = t226 * t227;
t132 = (qJD(2) + qJD(3)) * t262;
t390 = t232 * qJD(2);
t383 = pkin(3) * t390;
t339 = t465 * qJD(3);
t340 = qJD(3) * t466;
t468 = -t228 * (qJD(2) * t465 + t339) + qJD(2) * t371 + t232 * t340;
t69 = pkin(4) * t468 - pkin(5) * t132 + t383;
t384 = t69 * t417;
t486 = t126 * t174 + t384;
t229 = cos(qJ(6));
t225 = sin(qJ(6));
t414 = t227 * t230;
t378 = t225 * t414;
t176 = -t229 * t231 + t378;
t393 = qJD(6) * t229;
t350 = t226 * t393;
t255 = t225 * t397 + t350;
t377 = t229 * t414;
t177 = t225 * t231 + t377;
t399 = qJD(5) * t227;
t359 = t226 * t399;
t413 = t230 * t231;
t415 = t227 * t229;
t109 = -t225 * t359 + t177 * qJD(6) + (t225 * t413 + t415) * qJD(4);
t418 = t225 * t109;
t49 = -t176 * t255 - t226 * t418;
t221 = t227 ^ 2;
t224 = t231 ^ 2;
t404 = t221 - t224;
t471 = qJD(4) * t404;
t392 = qJD(6) * t230;
t348 = t229 * t392;
t220 = t226 ^ 2;
t223 = t230 ^ 2;
t405 = t220 - t223;
t470 = qJD(5) * t405;
t482 = t225 * t470 - t226 * t348;
t352 = t225 * t392;
t481 = t226 * t352 + t229 * t470;
t472 = qJD(4) * t262;
t480 = -t227 * t472 + t231 * t468;
t103 = t227 * t468 + t231 * t472;
t400 = qJD(5) * t226;
t479 = (t132 * t230 + t184 * t400) * t221;
t316 = pkin(3) * t339;
t201 = t227 * t316;
t388 = t466 * pkin(3);
t213 = t388 + pkin(4);
t478 = -t213 * t401 + t201;
t331 = t230 * t262;
t416 = t226 * t231;
t379 = t184 * t416;
t120 = t331 + t379;
t386 = pkin(6) * qJD(6) * t120;
t476 = t486 - t386;
t216 = qJD(4) * t227;
t288 = t231 * t316;
t475 = -t213 * t216 - t288;
t426 = t132 * t227;
t104 = t184 * t401 - t426;
t412 = t231 * t132;
t474 = -t184 * t216 - t412;
t448 = t227 * t69;
t473 = t126 * t401 + t448;
t219 = t225 ^ 2;
t222 = t229 ^ 2;
t407 = t219 - t222;
t321 = qJD(6) * t407;
t349 = t227 * t393;
t130 = t174 * t225 + t226 * t349;
t387 = t465 * pkin(3);
t212 = t387 - pkin(5);
t396 = qJD(5) * t231;
t358 = t226 * t396;
t260 = t216 * t230 + t358;
t317 = pkin(3) * t340;
t285 = t231 * t317;
t96 = t212 * t260 - t213 * t397 + t226 * t316 - t230 * t285;
t376 = t184 * t413;
t121 = -t226 * t262 + t376;
t247 = qJD(6) * t121 + t104;
t394 = qJD(6) * t227;
t353 = t225 * t394;
t36 = qJD(5) * t331 + t184 * t260 + t226 * t468 + t230 * t412;
t15 = -t184 * t353 - t225 * t36 + t229 * t247;
t85 = t121 * t225 + t184 * t415;
t469 = -t226 * (t15 * t227 + t401 * t85) - t85 * t357;
t467 = 0.2e1 * pkin(6);
t398 = qJD(5) * t229;
t343 = t226 * t398;
t363 = t230 * t401;
t108 = -t229 * t363 - t231 * t393 + (t343 + (qJD(4) + t392) * t225) * t227;
t464 = pkin(6) * t108;
t462 = pkin(6) * t177;
t461 = pkin(6) * t220;
t460 = pkin(6) * t230;
t155 = -t212 * t416 + t213 * t230;
t246 = t212 * t216 - t285;
t97 = (-t212 * t396 - t316) * t230 + (-qJD(5) * t213 + t246) * t226;
t459 = -t108 * t155 + t177 * t97;
t458 = pkin(3) * qJD(3);
t457 = t126 * t69;
t14 = t184 * t349 + t225 * t247 + t229 * t36;
t456 = t14 * t225;
t455 = t14 * t229;
t454 = t15 * t229;
t453 = t225 * t15;
t452 = t225 * t85;
t419 = t184 * t227;
t86 = t121 * t229 - t225 * t419;
t451 = t225 * t86;
t450 = t226 * t36;
t366 = t226 * t216;
t37 = qJD(5) * t121 - t184 * t366 - t226 * t412 + t230 * t468;
t449 = t226 * t37;
t447 = t229 * t85;
t446 = t229 * t86;
t445 = t230 * t37;
t156 = t212 * t413 + t213 * t226;
t143 = -pkin(6) * t231 + t156;
t338 = t212 - t460;
t166 = t338 * t227;
t105 = t143 * t225 + t166 * t229;
t200 = pkin(6) * t359;
t286 = t227 * t317;
t119 = t338 * t401 + t200 + t286;
t215 = pkin(6) * t216;
t81 = t215 - t96;
t28 = qJD(6) * t105 + t119 * t225 - t229 * t81;
t444 = t28 * t229;
t443 = t36 * t231;
t442 = t37 * t231;
t217 = t226 * pkin(4);
t170 = t217 + (-pkin(5) * t230 - pkin(6)) * t231;
t373 = -pkin(5) - t460;
t187 = t373 * t227;
t123 = t170 * t225 + t187 * t229;
t152 = pkin(4) * t397 + pkin(5) * t260;
t138 = t215 + t152;
t154 = t373 * t401 + t200;
t54 = qJD(6) * t123 - t229 * t138 + t225 * t154;
t441 = t54 * t229;
t440 = t96 * t230;
t439 = t97 * t226;
t355 = t230 * t396;
t175 = t355 - t366;
t153 = -pkin(4) * t400 + pkin(5) * t175;
t185 = pkin(4) * t230 + pkin(5) * t416;
t438 = t153 * t155 + t185 * t97;
t125 = t126 ^ 2;
t344 = t227 * t401;
t313 = t220 * t344;
t385 = t221 * t457;
t437 = t125 * t313 + t220 * t385;
t436 = -t108 * t185 + t153 * t177;
t278 = t143 * t229 - t166 * t225;
t435 = t278 * t229;
t434 = t108 * t225;
t433 = t108 * t229;
t432 = t109 * t229;
t431 = t120 * t226;
t430 = t120 * t230;
t429 = t121 * t226;
t428 = t121 * t230;
t277 = t170 * t229 - t187 * t225;
t427 = t277 * t229;
t425 = t152 * t230;
t424 = t153 * t226;
t423 = t176 * t225;
t422 = t177 * t229;
t421 = t184 * t132;
t420 = t184 * t221;
t411 = t278 + t277;
t186 = -pkin(5) * t413 + t217;
t203 = 0.2e1 * t344;
t301 = pkin(5) * t203;
t410 = t186 * t216 + t230 * t301;
t345 = t226 * t397;
t305 = t227 * t345;
t295 = pkin(6) * t305;
t364 = t229 * t401;
t409 = 0.2e1 * t229 * t295 + t364 * t461;
t395 = qJD(6) * t225;
t391 = t228 * qJD(2);
t389 = -0.2e1 * pkin(4) * qJD(4);
t382 = t226 * t433;
t380 = t126 * t417;
t204 = -0.2e1 * t344;
t298 = t212 * t204;
t361 = t221 * t400;
t375 = t156 * t216 + t212 * t361 + t230 * t298;
t374 = pkin(5) * t221 * t397 + t153 * t231 + t226 * t301;
t372 = t466 * t224;
t362 = qJD(5) * t120 * t225;
t356 = t229 * t397;
t354 = t220 * t394;
t351 = t226 * t394;
t346 = t225 * t393;
t342 = t228 * t390;
t65 = pkin(6) * t121 + t126 * t231;
t294 = -pkin(6) * t184 - t126 * t230;
t89 = t294 * t227;
t32 = t225 * t89 + t229 * t65;
t33 = t225 * t65 - t229 * t89;
t272 = t126 * t216 - t231 * t69;
t16 = -pkin(6) * t36 - t272;
t19 = t294 * t401 + (pkin(6) * t132 + t126 * t400 - t230 * t69) * t227;
t7 = qJD(6) * t32 + t16 * t225 - t19 * t229;
t8 = -qJD(6) * t33 + t16 * t229 + t225 * t19;
t341 = t108 * t32 - t109 * t33 - t176 * t7 - t177 * t8;
t337 = qJD(4) * (-pkin(4) - t213);
t29 = qJD(6) * t278 + t229 * t119 + t225 * t81;
t336 = t105 * t108 + t109 * t278 - t176 * t28 - t177 * t29;
t55 = qJD(6) * t277 + t225 * t138 + t229 * t154;
t335 = t108 * t123 + t109 * t277 - t176 * t54 - t177 * t55;
t334 = t155 * t486 + t97 * t380;
t333 = t153 * t380 + t185 * t486;
t332 = t132 * t262;
t330 = t231 * t262;
t329 = (-t155 - t185) * t227;
t328 = 0.2e1 * t379;
t327 = 0.4e1 * t231 * t419;
t326 = -0.2e1 * t377;
t318 = pkin(6) * t354;
t181 = t184 ^ 2;
t314 = t181 * t344;
t312 = t221 * t345;
t310 = t220 * t346;
t304 = t225 * t356;
t303 = t226 * t363;
t302 = t105 * t174 + t155 * t109 + t97 * t176 + t29 * t417;
t297 = t155 * t363 + t156 * t174 + t97 * t414 - t96 * t417;
t296 = t185 * t109 + t123 * t174 + t153 * t176 + t55 * t417;
t293 = t225 * t28 + t229 * t29;
t292 = t225 * t33 + t229 * t32;
t291 = t225 * t54 + t229 * t55;
t290 = t447 + t451;
t289 = t446 + t452;
t287 = t221 * t317;
t284 = -t356 * t462 + (t382 + t49) * pkin(6);
t283 = t152 * t417 + t153 * t414 + t174 * t186 + t185 * t363;
t282 = t105 * t229 - t225 * t278;
t281 = -t429 + t430;
t280 = t429 + t430;
t279 = t123 * t229 - t225 * t277;
t276 = t176 * t229 + t177 * t225;
t275 = (t219 + t222) * t345;
t274 = t109 * t380 + t174 * t32 + t176 * t486 + t8 * t417;
t271 = t120 * t393 + t225 * t37;
t270 = t120 * t395 - t229 * t37;
t269 = t155 * t395 - t97 * t229;
t267 = -t153 * t229 + t185 * t395;
t266 = (t422 + t423) * pkin(6);
t265 = t262 * t317;
t264 = pkin(6) * t37 + t126 * t351;
t263 = -t221 * t466 - t372;
t261 = -t359 + t363;
t259 = -t353 + t364;
t258 = t225 * t401 + t349;
t257 = -t226 * t395 + t356;
t256 = t343 + t352;
t254 = t225 * t400 - t348;
t251 = (-t132 * t226 + t184 * t397) * t221;
t250 = t282 * t397;
t249 = t279 * t397;
t248 = t174 * pkin(6);
t245 = -0.2e1 * t225 * t295 - t258 * t461;
t244 = t225 * t7 + t229 * t8 + (-t225 * t32 + t229 * t33) * qJD(6);
t243 = -qJD(6) * t292 - t8 * t225 + t7 * t229;
t240 = -t86 * t357 + (t14 * t227 - t401 * t86) * t226;
t238 = t226 * t298 + t97 * t231 + (-t212 * t397 - t226 * t317) * t221;
t235 = t130 * pkin(6);
t234 = (-t227 * t7 - t33 * t401) * t226 - t108 * t380 - t33 * t357 + t486 * t177;
t202 = -0.2e1 * t345;
t193 = t225 * pkin(6) * t351;
t183 = -0.2e1 * t471;
t180 = t212 * t287;
t165 = t263 * t458;
t151 = 0.2e1 * t223 * t344 - 0.2e1 * t312;
t150 = 0.2e1 * t312 + 0.2e1 * t313;
t146 = t399 * t405 - t303;
t145 = t226 * t321 - t304;
t144 = t401 * t405 + 0.4e1 * t305;
t140 = -0.2e1 * t226 * t471 + 0.2e1 * t227 * t355;
t139 = 0.2e1 * t227 * t358 + 0.2e1 * t230 * t471;
t131 = 0.2e1 * t221 * t470 - 0.4e1 * t227 * t303;
t129 = t226 * t259 + t227 * t356;
t122 = t185 * t153;
t111 = 0.2e1 * t262 * t468;
t107 = pkin(6) * t432;
t83 = -0.2e1 * t177 * t108;
t82 = 0.2e1 * t176 * t109;
t72 = -0.2e1 * t132 * t420 + 0.2e1 * t314;
t71 = t176 * t395 - t432;
t70 = t177 * t393 - t434;
t68 = t184 * t471 + t227 * t412;
t64 = t155 * t97;
t58 = qJD(4) * t327 - t132 * t404;
t48 = -t177 * t257 + t382;
t47 = -0.2e1 * t109 * t417 - 0.2e1 * t174 * t176;
t46 = -0.2e1 * t108 * t417 + 0.2e1 * t174 * t177;
t44 = -t109 * t230 + t258 * t220 + (t176 + 0.2e1 * t378) * t400;
t43 = -t108 * t230 - t259 * t220 + (-t177 + t326) * t400;
t42 = t224 * t457;
t38 = 0.2e1 * t108 * t176 - 0.2e1 * t109 * t177;
t34 = -qJD(6) * t276 - t418 - t433;
t26 = 0.2e1 * t120 * t37;
t25 = t120 * t400 - t445;
t20 = t276 * t397 + (-t434 + t432 + (t422 - t423) * qJD(6)) * t226;
t18 = -t120 * t174 - t37 * t417;
t17 = -t121 * t261 + t36 * t414;
t13 = -t442 + t251 + (t120 + t328) * t216;
t12 = -t443 + t479 + (-t121 - 0.2e1 * t376) * t216;
t11 = -t109 * t85 - t15 * t176;
t10 = t108 * t86 + t14 * t177;
t9 = t280 * t401 + (-t450 + t445 + (t428 - t431) * qJD(5)) * t227;
t5 = t109 * t120 + t176 * t37 - t469;
t4 = t108 * t120 - t177 * t37 + t240;
t1 = -t108 * t85 + t109 * t86 - t14 * t176 + t15 * t177;
t2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t342, 0.2e1 * (t228 ^ 2 - t232 ^ 2) * qJD(2), 0, 0.2e1 * t342, 0, 0, 0.2e1 * pkin(2) * t390, -0.2e1 * pkin(2) * t391, 0, 0, -0.2e1 * t421, -0.2e1 * t184 * t468 + 0.2e1 * t332, 0, t111, 0, 0, 0.2e1 * t214 * t468 + 0.2e1 * t262 * t383, -0.2e1 * t132 * t214 + 0.2e1 * t184 * t383, 0, 0.2e1 * t214 * t383, -0.2e1 * t224 * t421 - 0.2e1 * t314, t132 * t327 + 0.2e1 * t181 * t471, 0.2e1 * t132 * t330 - 0.2e1 * t184 * t480, t72, 0.2e1 * t103 * t184 - 0.2e1 * t227 * t332, t111, 0.2e1 * t126 * t480 + 0.2e1 * t330 * t69, -0.2e1 * t103 * t126 - 0.2e1 * t262 * t448, 0.2e1 * (-t126 * t132 + t184 * t69) * (t221 + t224), 0.2e1 * t42 + 0.2e1 * t385, -0.2e1 * t121 * t36, 0.2e1 * t120 * t36 - 0.2e1 * t121 * t37, 0.2e1 * t104 * t121 - 0.2e1 * t36 * t419, t26, -0.2e1 * t104 * t120 - 0.2e1 * t37 * t419, t72, 0.2e1 * (t120 * t231 + t226 * t420) * t69 + 0.2e1 * (t442 + t251 + (-t120 + t328) * t216) * t126, 0.2e1 * (t121 * t231 + t230 * t420) * t69 + 0.2e1 * (-t443 - t479 + (-t121 + 0.2e1 * t376) * t216) * t126, 0.2e1 * t281 * t448 + 0.2e1 * (t281 * t401 + (t450 + t445 + (-t428 - t431) * qJD(5)) * t227) * t126, 0.2e1 * t223 * t385 + 0.2e1 * t42 + 0.2e1 * (t223 - 0.1e1) * t125 * t344 + 0.2e1 * t437, -0.2e1 * t86 * t14, 0.2e1 * t14 * t85 - 0.2e1 * t15 * t86, -0.2e1 * t120 * t14 + 0.2e1 * t37 * t86, 0.2e1 * t85 * t15, -0.2e1 * t120 * t15 - 0.2e1 * t37 * t85, t26, -0.2e1 * t120 * t8 + 0.2e1 * t126 * t469 - 0.2e1 * t32 * t37 - 0.2e1 * t384 * t85, 0.2e1 * t120 * t7 + 0.2e1 * t126 * t240 + 0.2e1 * t33 * t37 - 0.2e1 * t384 * t86, -0.2e1 * t14 * t32 + 0.2e1 * t15 * t33 + 0.2e1 * t7 * t85 + 0.2e1 * t8 * t86, 0.2e1 * t125 * t312 + 0.2e1 * t32 * t8 + 0.2e1 * t33 * t7 + 0.2e1 * t437; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t391, 0, -t390, 0, 0, 0, 0, 0, 0, 0, -t132, 0, -t468, 0, 0, 0, t132 * t388 + t184 * t316 - t387 * t468 - t265, 0, t68, t58, t103, -t68, t480, 0, t103 * t212 - t184 * t478 - t213 * t426 + t227 * t265, t184 * t475 + t212 * t480 - t213 * t412 + t262 * t285, 0, 0, t17, t9, t12, t18, t13, -t68, (t120 * t212 + t155 * t184) * t401 + (t120 * t317 - t132 * t155 + t184 * t97 + t212 * t37) * t227, (t121 * t212 - t156 * t184) * t401 + (t121 * t317 + t132 * t156 + t184 * t96 - t212 * t36) * t227, t120 * t96 - t121 * t97 + t155 * t36 - t156 * t37, (-t156 * t230 + t212 * t231) * t448 + ((t156 * t400 + t285 + t440) * t227 + (-t156 * t413 - t212 * t404) * qJD(4)) * t126 + t334, t10, t1, t4, t11, t5, t18, -t105 * t37 - t120 * t29 - t15 * t155 - t85 * t97 + t274, t120 * t28 + t14 * t155 - t278 * t37 - t86 * t97 + t234, -t105 * t14 - t15 * t278 + t28 * t85 + t29 * t86 + t341, t105 * t8 - t278 * t7 + t28 * t33 + t29 * t32 + t334; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t316, -0.2e1 * t317, 0, 0, t203, t183, 0, t204, 0, 0, 0.2e1 * t475, 0.2e1 * t478, 0.2e1 * t165, 0.2e1 * t180 + 0.2e1 * (t212 * t372 - t213 * t465) * t458, t151, t131, t139, t150, t140, t204, -0.2e1 * t155 * t216 + 0.2e1 * t238, -0.2e1 * t230 * t287 + 0.2e1 * t231 * t96 + 0.2e1 * t375, -0.2e1 * t155 * t359 + 0.2e1 * t297, 0.2e1 * t212 ^ 2 * t344 - 0.2e1 * t156 * t96 + 0.2e1 * t180 + 0.2e1 * t64, t83, t38, t46, t82, t47, t150, 0.2e1 * t302, 0.2e1 * t174 * t278 - 0.2e1 * t28 * t417 + 0.2e1 * t459, 0.2e1 * t336, 0.2e1 * t105 * t29 - 0.2e1 * t278 * t28 + 0.2e1 * t64; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t132, 0, -t468, 0, 0, 0, 0, 0, t68, t58, t103, -t68, t480, 0, pkin(4) * t104 - pkin(5) * t103, pkin(4) * t474 - pkin(5) * t480, 0, 0, t17, t9, t12, t18, t13, -t68, (-pkin(5) * t120 + t184 * t185) * t401 + (-pkin(5) * t37 - t132 * t185 + t153 * t184) * t227, (-pkin(5) * t121 - t184 * t186) * t401 + (pkin(5) * t36 + t132 * t186 - t152 * t184) * t227, -t120 * t152 - t121 * t153 + t185 * t36 - t186 * t37, (-pkin(5) * t231 - t186 * t230) * t448 + ((t186 * t400 - t425) * t227 + (pkin(5) * t404 - t186 * t413) * qJD(4)) * t126 + t333, t10, t1, t4, t11, t5, t18, -t120 * t55 - t123 * t37 - t15 * t185 - t153 * t85 + t274, t120 * t54 + t14 * t185 - t153 * t86 - t277 * t37 + t234, -t123 * t14 - t15 * t277 + t54 * t85 + t55 * t86 + t341, t123 * t8 - t277 * t7 + t32 * t55 + t33 * t54 + t333; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t316, -t317, 0, 0, t203, t183, 0, t204, 0, 0, t227 * t337 - t288, t231 * t337 + t201, t165, (-pkin(4) * t465 + pkin(5) * t263) * t458, t151, t131, t139, t150, t140, t204, qJD(4) * t329 + t238 + t374, (-t152 + t96) * t231 + (-pkin(5) * t400 - t230 * t317) * t221 + t375 + t410, t329 * t400 + t283 + t297, t156 * t152 - t96 * t186 + (-t287 + t298) * pkin(5) + t438, t83, t38, t46, t82, t47, t150, t296 + t302, t411 * t357 + ((-t28 - t54) * t227 + t411 * t401) * t226 + t436 + t459, t335 + t336, t105 * t55 + t123 * t29 - t277 * t28 - t278 * t54 + t438; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t203, t183, 0, t204, 0, 0, t227 * t389, t231 * t389, 0, 0, t151, t131, t139, t150, t140, t204, -0.2e1 * t185 * t216 + 0.2e1 * t374, -0.2e1 * pkin(5) * t361 - 0.2e1 * t152 * t231 + 0.2e1 * t410, -0.2e1 * t185 * t359 + 0.2e1 * t283, 0.2e1 * pkin(5) ^ 2 * t344 + 0.2e1 * t152 * t186 + 0.2e1 * t122, t83, t38, t46, t82, t47, t150, 0.2e1 * t296, 0.2e1 * t174 * t277 - 0.2e1 * t417 * t54 + 0.2e1 * t436, 0.2e1 * t335, 0.2e1 * t123 * t55 - 0.2e1 * t277 * t54 + 0.2e1 * t122; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t474, 0, -t104, -t468, t272, t473, 0, 0, t121 * t397 - t450, -qJD(5) * t280 - t230 * t36 - t449, -t132 * t417 + t174 * t184, t25, -t132 * t414 + t184 * t261, 0, t126 * t260 - t413 * t69, t126 * t175 + t416 * t69, t473 * (-t220 - t223), 0, t86 * t356 + (-t395 * t86 - t455) * t226, -t290 * t397 + (t456 - t454 + (-t446 + t452) * qJD(6)) * t226, (t120 * t398 + t14) * t230 + (qJD(5) * t86 - t270) * t226, t85 * t350 + (t15 * t226 + t397 * t85) * t225, (t15 - t362) * t230 + (-qJD(5) * t85 - t271) * t226, t25, -t32 * t400 + t230 * t8 + (-t126 * t354 + (-t120 * t397 - t449) * pkin(6)) * t229 + (t226 * t386 - t220 * t448 + (-t220 * t401 - 0.2e1 * t305) * t126) * t225, (pkin(6) * t362 - t7) * t230 + (-t126 * t259 - t415 * t69) * t220 + ((t126 * t326 + t33) * qJD(5) + t271 * pkin(6)) * t226, (pkin(6) * t289 + t292) * t397 + ((-t455 + t453 + (t447 - t451) * qJD(6)) * pkin(6) + t244) * t226, (t226 * t244 + t292 * t397) * pkin(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t401, 0, t216, 0, -t212 * t401 - t286, t246, 0, 0, t146, t144, t175, -t146, -t260, 0, -t212 * t261 - t230 * t286, t174 * t212 + t226 * t286, -t439 - t440 + (-t155 * t230 - t156 * t226) * qJD(5), 0, t48, t20, t43, t49, t44, -t146, t230 * t29 + (-qJD(5) * t105 - t155 * t393) * t226 + (-t155 * t397 - t318 - t439) * t225 + t409, (-t155 * t398 - t28) * t230 + (-qJD(5) * t278 + t269) * t226 + t245, t250 + ((-t435 + (-t105 + t462) * t225) * qJD(6) + t293) * t226 + t284, (t250 + ((-t105 * t225 - t435) * qJD(6) + t293) * t226) * pkin(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t401, 0, t216, 0, pkin(5) * t401, -pkin(5) * t216, 0, 0, t146, t144, t175, -t146, -t260, 0, t261 * pkin(5), -t174 * pkin(5), t425 - t424 + (-t185 * t230 - t186 * t226) * qJD(5), 0, t48, t20, t43, t49, t44, -t146, t230 * t55 + (-qJD(5) * t123 - t185 * t393) * t226 + (-t185 * t397 - t318 - t424) * t225 + t409, (-t185 * t398 - t54) * t230 + (-qJD(5) * t277 + t267) * t226 + t245, t249 + ((-t427 + (-t123 + t462) * t225) * qJD(6) + t291) * t226 + t284, (t249 + ((-t123 * t225 - t427) * qJD(6) + t291) * t226) * pkin(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t345, -0.2e1 * t470, 0, t202, 0, 0, 0, 0, 0, 0, 0.2e1 * t222 * t345 - 0.2e1 * t310, 0.2e1 * t220 * t321 - 0.4e1 * t226 * t304, 0.2e1 * t481, 0.2e1 * t219 * t345 + 0.2e1 * t310, -0.2e1 * t482, t202, -t481 * t467, t482 * t467, 0.4e1 * pkin(6) * t275, 0.2e1 * pkin(6) ^ 2 * t275; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t36, 0, -t37, t104, t486, t126 * t261 + t414 * t69, 0, 0, -t393 * t86 + t456, qJD(6) * t290 + t453 + t455, -t271, -t395 * t85 + t454, t270, 0, t225 * t264 - t229 * t476, t225 * t476 + t229 * t264, (-qJD(6) * t289 + t454 + t456) * pkin(6) + t243, t243 * pkin(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t261, 0, t174, -t216, t97, t96, 0, 0, t70, t34, t130, t71, t129, 0, -t235 + t269, t225 * t97 + t193 + (qJD(6) * t155 - t248) * t229, t444 - t107 + (-t29 - t464) * t225 + (t266 - t282) * qJD(6), (-qJD(6) * t282 - t29 * t225 + t444) * pkin(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t261, 0, t174, -t216, t153, -t152, 0, 0, t70, t34, t130, t71, t129, 0, -t235 + t267, t153 * t225 + t193 + (qJD(6) * t185 - t248) * t229, t441 - t107 + (-t55 - t464) * t225 + (t266 - t279) * qJD(6), (-qJD(6) * t279 - t55 * t225 + t441) * pkin(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t397, 0, -t400, 0, 0, 0, 0, 0, t145, 0.4e1 * t226 * t346 + t397 * t407, -t254, -t145, -t256, 0, t254 * pkin(6), t256 * pkin(6), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t346, -0.2e1 * t321, 0, -0.2e1 * t346, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, 0, t15, -t37, t8, -t7, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t108, 0, -t109, t174, t29, -t28, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t108, 0, -t109, t174, t55, -t54, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t257, 0, t255, -t400, t257 * pkin(6), -t255 * pkin(6), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t393, 0, -t395, 0, -pkin(6) * t393, pkin(6) * t395, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg = t2;
