% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% CloosQRC350OL
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x36]
%   minimal parameter regressor of inertia matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2020-06-20 08:27
% Revision: 6013df02bda2c1f6ebc95d3649839f696d960e41 (2020-06-19)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = CloosQRC350OL_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'CloosQRC350OL_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'CloosQRC350OL_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'CloosQRC350OL_inertiaDJ_regmin_slag_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2020-06-20 08:18:58
% EndTime: 2020-06-20 08:19:25
% DurationCPUTime: 15.06s
% Computational Cost: add. (5031->428), mult. (12790->754), div. (0->0), fcn. (12910->10), ass. (0->267)
t168 = cos(qJ(4));
t164 = sin(qJ(4));
t165 = sin(qJ(2));
t169 = cos(qJ(2));
t338 = sin(qJ(3));
t339 = cos(qJ(3));
t308 = t165 * t339 + t169 * t338;
t343 = qJD(4) * t308;
t218 = t164 * t343;
t248 = t338 * qJD(3);
t249 = t339 * qJD(3);
t274 = t339 * t169;
t341 = -t165 * (qJD(2) * t338 + t248) + qJD(2) * t274 + t169 * t249;
t358 = t168 * t341 - t218;
t124 = -t165 * t338 + t274;
t357 = 0.4e1 * t124;
t167 = cos(qJ(5));
t298 = qJD(5) * t167;
t264 = t164 * t298;
t163 = sin(qJ(5));
t302 = qJD(4) * t168;
t273 = t163 * t302;
t115 = t264 + t273;
t158 = t164 ^ 2;
t161 = t168 ^ 2;
t305 = t158 - t161;
t344 = qJD(4) * t305;
t151 = pkin(3) * t165 + pkin(2);
t83 = pkin(4) * t308 + pkin(5) * t124 + t151;
t230 = t83 * t264;
t317 = t163 * t164;
t291 = t169 * qJD(2);
t287 = pkin(3) * t291;
t88 = (qJD(2) + qJD(3)) * t308;
t46 = pkin(4) * t341 - t88 * pkin(5) + t287;
t355 = t83 * t273 + t46 * t317 + t230;
t354 = t46 * t308 + t341 * t83;
t162 = sin(qJ(6));
t166 = cos(qJ(6));
t293 = qJD(6) * t167;
t256 = t166 * t293;
t157 = t163 ^ 2;
t160 = t167 ^ 2;
t306 = t157 - t160;
t342 = qJD(5) * t306;
t353 = t162 * t342 - t163 * t256;
t259 = t162 * t293;
t352 = t163 * t259 + t166 * t342;
t301 = qJD(5) * t163;
t350 = (t124 * t301 + t167 * t88) * t158;
t232 = pkin(3) * t248;
t140 = t164 * t232;
t150 = pkin(3) * t339 + pkin(4);
t349 = -t150 * t302 + t140;
t281 = t83 * t302;
t202 = t164 * t46 + t281;
t175 = t163 * t202 + t230;
t244 = t167 * t308;
t316 = t163 * t168;
t278 = t124 * t316;
t79 = t244 + t278;
t289 = pkin(6) * qJD(6) * t79;
t347 = t175 - t289;
t153 = qJD(4) * t164;
t209 = t168 * t232;
t346 = -t150 * t153 - t209;
t67 = t164 * t341 + t168 * t343;
t297 = qJD(5) * t168;
t265 = t163 * t297;
t303 = qJD(4) * t167;
t191 = t164 * t303 + t265;
t326 = t164 * t88;
t68 = t124 * t302 - t326;
t272 = t124 * t153;
t319 = t168 * t88;
t345 = -t272 - t319;
t159 = t166 ^ 2;
t307 = t162 ^ 2 - t159;
t237 = qJD(6) * t307;
t294 = qJD(6) * t166;
t257 = t164 * t294;
t86 = t115 * t162 + t163 * t257;
t149 = pkin(3) * t338 - pkin(5);
t233 = pkin(3) * t249;
t207 = t168 * t233;
t64 = t149 * t191 - t150 * t298 + t163 * t232 - t167 * t207;
t340 = 0.2e1 * pkin(6);
t337 = pkin(6) * t157;
t336 = pkin(6) * t167;
t102 = -t149 * t316 + t150 * t167;
t314 = t164 * t167;
t277 = t166 * t314;
t118 = t162 * t168 + t277;
t179 = t149 * t153 - t207;
t65 = (-t149 * t297 - t232) * t167 + (-qJD(5) * t150 + t179) * t163;
t299 = qJD(5) * t166;
t266 = t163 * t299;
t313 = t166 * t168;
t71 = (qJD(6) + t303) * t313 + (-t266 + (-qJD(4) - t293) * t162) * t164;
t335 = t102 * t71 + t118 * t65;
t262 = t167 * t297;
t116 = -t153 * t163 + t262;
t100 = -pkin(4) * t301 + pkin(5) * t116;
t125 = pkin(4) * t167 + pkin(5) * t316;
t334 = t100 * t118 + t125 * t71;
t154 = t163 * pkin(4);
t111 = t154 + (-pkin(5) * t167 - pkin(6)) * t168;
t275 = -pkin(5) - t336;
t127 = t275 * t164;
t206 = t111 * t166 - t127 * t162;
t247 = t149 - t336;
t107 = t247 * t164;
t312 = t167 * t168;
t103 = t149 * t312 + t150 * t163;
t94 = -pkin(6) * t168 + t103;
t70 = t107 * t162 - t166 * t94;
t333 = -t70 + t206;
t276 = t124 * t312;
t80 = -t163 * t308 + t276;
t180 = qJD(6) * t80 + t68;
t26 = -qJD(5) * t244 - t124 * t191 - t163 * t341 - t88 * t312;
t295 = qJD(6) * t164;
t11 = (t124 * t295 - t26) * t166 + t180 * t162;
t332 = t11 * t162;
t331 = t11 * t166;
t330 = t124 * t88;
t329 = t162 * t71;
t328 = t163 * t26;
t27 = qJD(5) * t80 - t163 * t272 + t167 * t341 - t316 * t88;
t327 = t163 * t27;
t325 = t166 * t71;
t324 = t167 * t26;
t323 = t167 * t27;
t322 = t168 * t26;
t321 = t168 * t27;
t320 = t168 * t83;
t318 = t124 * t158;
t315 = t164 * t166;
t126 = -pkin(5) * t312 + t154;
t251 = t164 * t302;
t141 = 0.2e1 * t251;
t219 = pkin(5) * t141;
t311 = t126 * t153 + t167 * t219;
t252 = t163 * t298;
t226 = t164 * t252;
t213 = pkin(6) * t226;
t271 = t166 * t302;
t310 = 0.2e1 * t166 * t213 + t271 * t337;
t300 = qJD(5) * t164;
t296 = qJD(6) * t162;
t292 = t165 * qJD(2);
t290 = -0.2e1 * pkin(4) * qJD(4);
t288 = -0.2e1 * t292;
t285 = t83 * t317;
t284 = t164 * t319;
t142 = -0.2e1 * t251;
t215 = t149 * t142;
t268 = t158 * t301;
t283 = t103 * t153 + t149 * t268 + t167 * t215;
t282 = pkin(5) * t158 * t298 + t100 * t168 + t163 * t219;
t280 = qJD(5) * t162 * t79;
t279 = t162 * t314;
t270 = t167 * t302;
t267 = t163 * t300;
t263 = t166 * t298;
t261 = t157 * t295;
t260 = t162 * t295;
t258 = t163 * t295;
t253 = t162 * t294;
t246 = qJD(4) * (-pkin(4) - t150);
t245 = t88 * t308;
t243 = 0.2e1 * t278;
t242 = -0.2e1 * t277;
t234 = pkin(6) * t261;
t121 = t124 ^ 2;
t229 = t121 * t251;
t228 = t158 * t252;
t227 = t162 * t263;
t222 = t163 * t270;
t117 = t279 - t313;
t152 = pkin(6) * t153;
t50 = t152 - t64;
t139 = pkin(6) * t267;
t208 = t164 * t233;
t78 = t247 * t302 + t139 + t208;
t20 = -qJD(6) * t70 + t162 * t50 + t166 * t78;
t69 = t107 * t166 + t162 * t94;
t72 = -t162 * t267 + t118 * qJD(6) + (t162 * t312 + t315) * qJD(4);
t221 = t102 * t72 + t115 * t69 + t65 * t117 + t20 * t317;
t101 = t275 * t302 + t139;
t99 = pkin(4) * t298 + pkin(5) * t191;
t89 = t152 + t99;
t36 = qJD(6) * t206 + t101 * t166 + t162 * t89;
t81 = t111 * t162 + t127 * t166;
t220 = t100 * t117 + t115 * t81 + t125 * t72 + t36 * t317;
t214 = -pkin(6) * t124 - t167 * t83;
t42 = pkin(6) * t80 + t320;
t57 = t214 * t164;
t23 = t162 * t57 + t166 * t42;
t24 = t162 * t42 - t166 * t57;
t53 = t124 * t315 + t162 * t80;
t54 = t124 * t162 * t164 - t166 * t80;
t212 = t162 * t54 - t166 * t53;
t211 = t163 * t80 + t167 * t79;
t210 = t167 * t233;
t205 = t117 * t166 + t118 * t162;
t201 = t153 * t83 - t168 * t46;
t13 = pkin(6) * t26 - t201;
t200 = t167 * t46 - t301 * t83;
t16 = t214 * t302 + (pkin(6) * t88 - t200) * t164;
t6 = -qJD(6) * t24 + t13 * t166 + t16 * t162;
t204 = t115 * t23 + t117 * t355 + t72 * t285 + t6 * t317;
t203 = -t164 * t27 - t302 * t79;
t199 = t162 * t27 + t294 * t79;
t198 = -t166 * t27 + t296 * t79;
t196 = t102 * t296 - t166 * t65;
t195 = -t100 * t166 + t125 * t296;
t194 = pkin(6) * t27 + t258 * t83;
t192 = -t267 + t270;
t190 = -t260 + t271;
t189 = t162 * t302 + t257;
t188 = -t163 * t296 + t263;
t187 = t259 + t266;
t186 = t162 * t298 + t163 * t294;
t185 = t162 * t301 - t256;
t183 = (t124 * t298 - t163 * t88) * t158;
t181 = t115 * pkin(6);
t178 = -0.2e1 * t162 * t213 - t189 * t337;
t174 = t163 * t215 + t65 * t168 + (-t149 * t298 - t163 * t233) * t158;
t171 = t86 * pkin(6);
t5 = qJD(6) * t23 + t13 * t162 - t16 * t166;
t170 = t71 * t285 + (-t164 * t5 - t24 * t302) * t163 - t24 * t264 + t355 * t118;
t133 = t162 * pkin(6) * t258;
t123 = -0.2e1 * t344;
t98 = 0.2e1 * t160 * t251 - 0.2e1 * t228;
t97 = 0.2e1 * t157 * t251 + 0.2e1 * t228;
t96 = t300 * t306 - t222;
t95 = t302 * t306 + 0.4e1 * t226;
t91 = -0.2e1 * t163 * t344 + 0.2e1 * t164 * t262;
t90 = 0.2e1 * t164 * t265 + 0.2e1 * t167 * t344;
t87 = 0.2e1 * t158 * t342 - 0.4e1 * t164 * t222;
t85 = t163 * t190 + t164 * t263;
t51 = 0.2e1 * t118 * t71;
t47 = t118 * t294 + t329;
t45 = t124 * t344 + t284;
t39 = t251 * t357 - t305 * t88;
t35 = qJD(6) * t81 + t101 * t162 - t166 * t89;
t34 = -t118 * t188 - t163 * t325;
t33 = -0.2e1 * t115 * t117 - 0.2e1 * t317 * t72;
t32 = 0.2e1 * t115 * t118 + 0.2e1 * t317 * t71;
t30 = -t167 * t72 + t189 * t157 + (t117 + 0.2e1 * t279) * t301;
t29 = t167 * t71 - t190 * t157 + (-t118 + t242) * t301;
t28 = -0.2e1 * t117 * t71 - 0.2e1 * t118 * t72;
t25 = -qJD(6) * t205 - t162 * t72 + t325;
t19 = qJD(6) * t69 + t162 * t78 - t166 * t50;
t17 = t205 * t298 + (t329 + t166 * t72 + (-t117 * t162 + t118 * t166) * qJD(6)) * t163;
t15 = t163 * t203 - t264 * t79;
t14 = -t80 * t270 + (t301 * t80 - t324) * t164;
t12 = -t124 * t260 + t162 * t26 + t166 * t180;
t10 = -t321 + t183 + (t79 + t243) * t153;
t9 = t322 + t350 + (-t80 - 0.2e1 * t276) * t153;
t8 = t11 * t118 + t54 * t71;
t7 = t211 * t302 + (t328 + t323 + (-t163 * t79 + t167 * t80) * qJD(5)) * t164;
t3 = t53 * t264 + t117 * t27 + t72 * t79 + (t12 * t164 + t302 * t53) * t163;
t2 = t54 * t264 - t118 * t27 - t71 * t79 + (t11 * t164 + t302 * t54) * t163;
t1 = -t11 * t117 + t118 * t12 + t53 * t71 - t54 * t72;
t4 = [0, t169 * t288, 0.2e1 * (t165 ^ 2 - t169 ^ 2) * qJD(2), 0, 0, 0, 0.2e1 * pkin(2) * t291, pkin(2) * t288, -0.2e1 * t330, -0.2e1 * t124 * t341 + 0.2e1 * t245, 0, 0, 0, 0.2e1 * t151 * t341 + 0.2e1 * t287 * t308, 0.2e1 * t124 * t287 - 0.2e1 * t151 * t88, -0.2e1 * t161 * t330 - 0.2e1 * t229, 0.2e1 * t121 * t344 + t284 * t357, -0.2e1 * t124 * t358 + 0.2e1 * t168 * t245, 0.2e1 * t124 * t67 - 0.2e1 * t164 * t245, 0.2e1 * t308 * t341, 0.2e1 * t168 * t354 - 0.2e1 * t83 * t218, -0.2e1 * t164 * t354 - 0.2e1 * t320 * t343, 0.2e1 * t80 * t26, -0.2e1 * t26 * t79 - 0.2e1 * t27 * t80, -0.2e1 * t80 * t326 + 0.2e1 * (t164 * t26 + t302 * t80) * t124, 0.2e1 * t124 * t203 + 0.2e1 * t326 * t79, -0.2e1 * t318 * t88 + 0.2e1 * t229, 0.2e1 * (t163 * t318 + t168 * t79) * t46 + 0.2e1 * (t321 + t183 + (-t79 + t243) * t153) * t83, 0.2e1 * (t167 * t318 + t168 * t80) * t46 + 0.2e1 * (t322 - t350 + (-t80 + 0.2e1 * t276) * t153) * t83, 0.2e1 * t54 * t11, 0.2e1 * t11 * t53 + 0.2e1 * t12 * t54, -0.2e1 * t11 * t79 - 0.2e1 * t27 * t54, -0.2e1 * t12 * t79 - 0.2e1 * t27 * t53, 0.2e1 * t79 * t27, -0.2e1 * t53 * t230 - 0.2e1 * t23 * t27 - 0.2e1 * t6 * t79 + 0.2e1 * (-t53 * t281 + (-t12 * t83 - t46 * t53) * t164) * t163, 0.2e1 * t54 * t230 + 0.2e1 * t24 * t27 + 0.2e1 * t5 * t79 + 0.2e1 * (t54 * t281 + (t11 * t83 + t46 * t54) * t164) * t163; 0, 0, 0, -t292, -t291, 0, 0, 0, 0, 0, -t88, -t341, 0, 0, 0, t45, t39, t67, t358, 0, -t124 * t349 + t149 * t67 - t150 * t326 + t308 * t208, t124 * t346 + t149 * t358 - t150 * t319 + t308 * t207, t14, t7, t9, t10, -t45, (t102 * t124 + t149 * t79) * t302 + (-t102 * t88 + t124 * t65 + t149 * t27 + t233 * t79) * t164, (-t103 * t124 + t149 * t80) * t302 + (t103 * t88 + t124 * t64 + t149 * t26 + t233 * t80) * t164, t8, t1, t2, t3, t15, -t102 * t12 - t20 * t79 - t27 * t69 - t53 * t65 + t204, t102 * t11 + t19 * t79 + t27 * t70 + t54 * t65 + t170; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t232, -0.2e1 * t233, t141, t123, 0, 0, 0, 0.2e1 * t346, 0.2e1 * t349, t98, t87, t90, t91, t142, -0.2e1 * t102 * t153 + 0.2e1 * t174, -0.2e1 * t158 * t210 + 0.2e1 * t168 * t64 + 0.2e1 * t283, t51, t28, t32, t33, t97, 0.2e1 * t221, -0.2e1 * t70 * t264 + 0.2e1 * (-t164 * t19 - t302 * t70) * t163 + 0.2e1 * t335; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t88, -t341, 0, 0, 0, t45, t39, t67, t358, 0, pkin(4) * t68 - pkin(5) * t67, pkin(4) * t345 - pkin(5) * t358, t14, t7, t9, t10, -t45, (-pkin(5) * t79 + t124 * t125) * t302 + (-pkin(5) * t27 + t100 * t124 - t125 * t88) * t164, (-pkin(5) * t80 - t124 * t126) * t302 + (-pkin(5) * t26 - t124 * t99 + t126 * t88) * t164, t8, t1, t2, t3, t15, -t100 * t53 - t12 * t125 - t27 * t81 - t36 * t79 + t204, t100 * t54 + t11 * t125 - t206 * t27 + t35 * t79 + t170; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t232, -t233, t141, t123, 0, 0, 0, t164 * t246 - t209, t168 * t246 + t140, t98, t87, t90, t91, t142, (-t102 - t125) * t153 + t174 + t282, (t64 - t99) * t168 + (-pkin(5) * t301 - t210) * t158 + t283 + t311, t51, t28, t32, t33, t97, t220 + t221, t333 * t264 + ((-t19 - t35) * t164 + t333 * t302) * t163 + t334 + t335; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t141, t123, 0, 0, 0, t164 * t290, t168 * t290, t98, t87, t90, t91, t142, -0.2e1 * t125 * t153 + 0.2e1 * t282, -0.2e1 * pkin(5) * t268 - 0.2e1 * t168 * t99 + 0.2e1 * t311, t51, t28, t32, t33, t97, 0.2e1 * t220, 0.2e1 * t206 * t264 + 0.2e1 * (-t164 * t35 + t206 * t302) * t163 + 0.2e1 * t334; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t345, -t68, -t341, t201, t202, t298 * t80 + t328, -qJD(5) * t211 + t324 - t327, t115 * t124 - t317 * t88, t124 * t192 - t314 * t88, 0, t167 * t201 + t265 * t83, -t163 * t201 + t262 * t83, -t54 * t263 + (t296 * t54 - t331) * t163, t212 * t298 + (t332 - t12 * t166 + (t162 * t53 + t166 * t54) * qJD(6)) * t163, (t299 * t79 + t11) * t167 + (-qJD(5) * t54 - t198) * t163, (t12 - t280) * t167 + (-qJD(5) * t53 - t199) * t163, t301 * t79 - t323, -t23 * t301 + t167 * t6 + (-t83 * t261 + (-t298 * t79 - t327) * pkin(6)) * t166 + ((-0.2e1 * t230 + t289) * t163 - t202 * t157) * t162, (pkin(6) * t280 - t5) * t167 + (-t83 * t271 + (-t166 * t46 + t296 * t83) * t164) * t157 + ((t242 * t83 + t24) * qJD(5) + t199 * pkin(6)) * t163; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t302, t153, 0, -t149 * t302 - t208, t179, t96, t95, t116, -t191, 0, -t149 * t192 - t167 * t208, t115 * t149 + t163 * t208, t34, t17, t29, t30, -t96, t167 * t20 + (-qJD(5) * t69 - t102 * t294) * t163 + (-t102 * t298 - t163 * t65 - t234) * t162 + t310, (-t102 * t299 - t19) * t167 + (qJD(5) * t70 + t196) * t163 + t178; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t302, t153, 0, pkin(5) * t302, -pkin(5) * t153, t96, t95, t116, -t191, 0, t192 * pkin(5), -t115 * pkin(5), t34, t17, t29, t30, -t96, t167 * t36 + (-qJD(5) * t81 - t125 * t294) * t163 + (-t100 * t163 - t125 * t298 - t234) * t162 + t310, (-t125 * t299 - t35) * t167 + (-qJD(5) * t206 + t195) * t163 + t178; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t252, -0.2e1 * t342, 0, 0, 0, 0, 0, -0.2e1 * t157 * t253 + 0.2e1 * t159 * t252, 0.2e1 * t157 * t237 - 0.4e1 * t163 * t227, 0.2e1 * t352, -0.2e1 * t353, -0.2e1 * t252, -t352 * t340, t353 * t340; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26, -t27, t68, t175, t164 * t200 + t270 * t83, t294 * t54 + t332, -qJD(6) * t212 + t12 * t162 + t331, -t199, t198, 0, t162 * t194 - t166 * t347, t162 * t347 + t166 * t194; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t192, t115, -t153, t65, t64, t47, t25, t86, t85, 0, -t171 + t196, t162 * t65 + t133 + (qJD(6) * t102 - t181) * t166; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t192, t115, -t153, t100, -t99, t47, t25, t86, t85, 0, -t171 + t195, t100 * t162 + t133 + (qJD(6) * t125 - t181) * t166; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t298, -t301, 0, 0, 0, t163 * t237 - t227, 0.4e1 * t163 * t253 + t298 * t307, -t185, -t187, 0, t185 * pkin(6), t187 * pkin(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t253, -0.2e1 * t237, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11, t12, -t27, t6, -t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, -t72, t115, t20, -t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, -t72, t115, t36, -t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t188, t186, -t301, t188 * pkin(6), -t186 * pkin(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t294, -t296, 0, -pkin(6) * t294, pkin(6) * t296; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg = t4;
