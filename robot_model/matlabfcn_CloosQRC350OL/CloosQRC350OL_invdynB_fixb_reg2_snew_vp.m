% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% CloosQRC350OL
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-06-23 22:05
% Revision: 9ee7546dde8543a81bf40e37a1400ef9d9e232c4 (2020-06-23)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = CloosQRC350OL_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'CloosQRC350OL_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'CloosQRC350OL_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'CloosQRC350OL_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'CloosQRC350OL_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'CloosQRC350OL_invdynB_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-06-23 22:03:33
% EndTime: 2020-06-23 22:04:00
% DurationCPUTime: 28.03s
% Computational Cost: add. (91503->477), mult. (193039->811), div. (0->0), fcn. (141528->12), ass. (0->387)
t576 = sin(qJ(3));
t569 = qJDD(2) + qJDD(3);
t577 = sin(qJ(2));
t582 = cos(qJ(3));
t583 = cos(qJ(2));
t630 = t576 * t583;
t543 = (-t577 * t582 - t630) * qJD(1);
t624 = t582 * t583;
t631 = t576 * t577;
t545 = (t624 - t631) * qJD(1);
t638 = t545 * t543;
t650 = t569 + t638;
t656 = t576 * t650;
t655 = t582 * t650;
t567 = t577 * g(3);
t586 = qJD(1) ^ 2;
t623 = t583 * t586;
t557 = pkin(2) * t623 - t567;
t609 = t577 * t623;
t562 = qJDD(2) - t609;
t530 = pkin(3) * t562 - t557;
t556 = -t577 * t586 * pkin(2) - t583 * g(3);
t571 = t577 ^ 2;
t585 = qJD(2) ^ 2;
t563 = -t571 * t586 - t585;
t537 = pkin(3) * t563 + t556;
t496 = -t582 * t530 + t576 * t537;
t497 = t576 * t530 + t582 * t537;
t454 = t582 * t496 - t576 * t497;
t654 = t577 * t454;
t653 = t583 * t454;
t618 = qJD(1) * qJD(2);
t600 = t583 * t618;
t617 = t577 * qJDD(1);
t554 = -t600 - t617;
t602 = t577 * t618;
t615 = t583 * qJDD(1);
t555 = -t602 + t615;
t495 = t543 * qJD(3) + t576 * t554 + t582 * t555;
t570 = qJD(2) + qJD(3);
t637 = t570 * t543;
t652 = t495 + t637;
t651 = -t554 + t600;
t541 = t543 ^ 2;
t542 = t545 ^ 2;
t568 = t570 ^ 2;
t597 = t583 * t556 + t577 * t557;
t649 = pkin(2) * t597;
t648 = pkin(4) * t576;
t575 = sin(qJ(4));
t581 = cos(qJ(4));
t521 = t581 * t545 - t575 * t570;
t539 = qJD(4) + t543;
t574 = sin(qJ(5));
t580 = cos(qJ(5));
t492 = t580 * t521 + t574 * t539;
t520 = -t575 * t545 - t581 * t570;
t519 = qJD(5) - t520;
t573 = sin(qJ(6));
t579 = cos(qJ(6));
t465 = t573 * t492 + t579 * t519;
t466 = -t579 * t492 + t573 * t519;
t647 = t465 * t466;
t491 = -t574 * t521 + t580 * t539;
t488 = qJD(6) + t491;
t646 = t488 * t573;
t645 = t488 * t579;
t644 = t491 * t492;
t643 = t519 * t574;
t642 = t519 * t580;
t641 = t520 * t521;
t640 = t539 * t575;
t639 = t539 * t581;
t636 = t570 * t576;
t635 = t570 * t582;
t598 = -t582 * t554 + t576 * t555;
t494 = -t545 * qJD(3) - t598;
t528 = qJDD(1) * pkin(2) + t651 * pkin(3);
t425 = t652 * pkin(5) + (t570 * t545 - t494) * pkin(4) + t528;
t510 = -t543 * pkin(4) + t545 * pkin(5);
t452 = -t568 * pkin(4) - t569 * pkin(5) + t543 * t510 + t497;
t394 = t581 * t425 + t575 * t452;
t634 = t575 * t394;
t633 = t575 * t580;
t508 = -t638 + t569;
t632 = t576 * t508;
t629 = t577 * t562;
t395 = -t575 * t425 + t581 * t452;
t451 = t569 * pkin(4) - t568 * pkin(5) - t545 * t510 - t496;
t370 = t580 * t395 + t574 * t451;
t589 = -t575 * t495 - t581 * t569;
t463 = -t521 * qJD(4) + t589;
t462 = qJDD(5) - t463;
t421 = -t462 + t644;
t349 = pkin(6) * t421 + t370;
t590 = -t581 * t495 + t575 * t569;
t464 = t520 * qJD(4) - t590;
t493 = qJDD(4) + t494;
t591 = -t580 * t464 - t574 * t493;
t420 = t491 * qJD(5) - t591;
t354 = (t519 * t491 + t420) * pkin(6) + t394;
t318 = t573 * t349 + t579 * t354;
t319 = -t579 * t349 + t573 * t354;
t284 = t579 * t318 + t573 * t319;
t628 = t581 * t284;
t627 = t581 * t394;
t626 = t582 * t508;
t625 = t582 * t528;
t622 = t573 * t420 + t579 * t462;
t467 = -t492 ^ 2 - t519 ^ 2;
t572 = t583 ^ 2;
t621 = -t571 - t572;
t620 = -qJD(4) + t539;
t619 = -qJD(6) + t488;
t578 = sin(qJ(1));
t616 = t578 * qJDD(1);
t584 = cos(qJ(1));
t614 = t584 * qJDD(1);
t613 = pkin(3) * t528 * t583;
t612 = t574 * t647;
t611 = t575 * t644;
t610 = t576 * t641;
t608 = t578 * t638;
t607 = t580 * t647;
t606 = t581 * t644;
t605 = t582 * t641;
t604 = t584 * t638;
t603 = -pkin(4) * t582 - pkin(3);
t601 = t578 * t615;
t599 = t583 * t614;
t369 = -t574 * t395 + t580 * t451;
t455 = t576 * t496 + t582 * t497;
t596 = t578 * t609;
t595 = t584 * t609;
t560 = -t578 * t586 + t614;
t594 = -pkin(1) * t560 - t578 * g(3);
t593 = pkin(5) * t582 + t648;
t285 = t573 * t318 - t579 * t319;
t350 = -t575 * t395 + t627;
t351 = t581 * t395 + t634;
t592 = t579 * t420 - t573 * t462;
t513 = t577 * t556 - t583 * t557;
t588 = pkin(5) * t576 + t603;
t419 = -t492 * qJD(5) - t574 * t464 + t580 * t493;
t587 = (-qJD(3) + t570) * t545 - t598;
t564 = -t572 * t586 + t585;
t561 = t621 * t586;
t559 = t584 * t586 + t616;
t558 = t621 * qJDD(1);
t553 = 0.2e1 * t600 + t617;
t552 = t583 * t562;
t551 = t621 * t618;
t540 = -pkin(1) * t559 + t584 * g(3);
t534 = -t542 + t568;
t533 = t541 - t568;
t532 = t577 * t555 + t572 * t618;
t531 = t583 * t554 + t571 * t618;
t527 = -t542 - t568;
t526 = t583 * t563 - t629;
t525 = t583 * t564 + t629;
t524 = t577 * t563 + t552;
t518 = t584 * t558 - t578 * t561;
t517 = t578 * t558 + t584 * t561;
t511 = t542 - t541;
t506 = -t568 - t541;
t505 = t567 + (-t526 - t623) * pkin(2);
t504 = -pkin(2) * t616 + t584 * t513;
t503 = pkin(2) * t614 + t578 * t513;
t502 = t584 * t524 - t578 * t553;
t501 = t578 * t524 + t584 * t553;
t500 = (t543 * t582 + t545 * t576) * t570;
t499 = (t543 * t576 - t545 * t582) * t570;
t498 = -t541 - t542;
t486 = -t520 ^ 2 - t521 ^ 2;
t485 = t582 * t533 - t632;
t484 = -t576 * t534 + t655;
t483 = t576 * t533 + t626;
t482 = t582 * t534 + t656;
t481 = -t576 * t527 - t626;
t480 = t582 * t527 - t632;
t479 = -t637 + t495;
t474 = (qJD(3) + t570) * t545 + t598;
t473 = t582 * t495 - t545 * t636;
t472 = t576 * t495 + t545 * t635;
t471 = -t576 * t494 - t543 * t635;
t470 = t582 * t494 - t543 * t636;
t469 = t582 * t506 - t656;
t468 = t576 * t506 + t655;
t460 = (t520 * t581 + t521 * t575) * t539;
t459 = (-t520 * t575 + t521 * t581) * t539;
t458 = -pkin(3) * t474 - t625;
t457 = t583 * t499 + t577 * t500;
t456 = -pkin(3) * t652 + t576 * t528;
t448 = t620 * t520 + t590;
t447 = t620 * t521 + t589;
t446 = t583 * t456 + t577 * t625;
t445 = t583 * t458 + t528 * t631;
t444 = t583 * t483 + t577 * t485;
t443 = t583 * t482 + t577 * t484;
t442 = t581 * t464 - t521 * t640;
t441 = -t575 * t464 - t521 * t639;
t440 = -t575 * t463 - t520 * t639;
t439 = -t581 * t463 + t520 * t640;
t438 = -t577 * t480 + t583 * t481;
t437 = t583 * t480 + t577 * t481;
t436 = t576 * t479 + t582 * t587;
t435 = -t582 * t474 - t576 * t652;
t434 = -t582 * t479 + t576 * t587;
t433 = -t576 * t474 + t582 * t652;
t432 = t582 * t460 - t576 * t493;
t431 = t576 * t460 + t582 * t493;
t430 = -pkin(3) * t498 + t455;
t429 = t583 * t472 + t577 * t473;
t428 = t583 * t470 + t577 * t471;
t427 = (t491 * t580 + t492 * t574) * t519;
t426 = (t491 * t574 - t492 * t580) * t519;
t424 = -t577 * t468 + t583 * t469;
t423 = t583 * t468 + t577 * t469;
t422 = -t465 ^ 2 - t466 ^ 2;
t418 = t582 * t442 + t610;
t417 = t582 * t440 - t610;
t416 = t576 * t442 - t605;
t415 = t576 * t440 + t605;
t414 = qJDD(6) + t419;
t412 = t583 * t455 + t654;
t411 = t577 * t455 - t653;
t410 = t584 * t437 - t578 * t652;
t409 = t578 * t437 + t584 * t652;
t408 = t584 * t423 - t578 * t474;
t407 = t578 * t423 + t584 * t474;
t406 = t584 * t411 - t578 * t528;
t405 = t578 * t411 + t584 * t528;
t404 = t581 * t427 + t575 * t462;
t403 = -t575 * t427 + t581 * t462;
t402 = -pkin(2) * t438 + pkin(3) * t480 - t497;
t401 = t583 * t430 + t654;
t400 = t581 * t447 - t575 * t448;
t399 = -t575 * t447 - t581 * t448;
t398 = (-qJD(5) - t519) * t491 + t591;
t397 = t580 * t421 - t574 * t467;
t396 = t574 * t421 + t580 * t467;
t393 = (-t465 * t579 - t466 * t573) * t488;
t392 = (-t465 * t573 + t466 * t579) * t488;
t391 = t580 * t420 - t492 * t643;
t390 = t574 * t420 + t492 * t642;
t389 = -t574 * t419 - t491 * t642;
t388 = t580 * t419 - t491 * t643;
t386 = -t577 * t434 + t583 * t436;
t385 = t583 * t434 + t577 * t436;
t384 = t583 * t433 + t577 * t435;
t383 = -pkin(2) * t424 + pkin(3) * t468 - t496;
t382 = t583 * t431 + t577 * t432;
t381 = -pkin(2) * t412 - pkin(3) * t454;
t380 = t582 * t400 - t576 * t486;
t379 = t576 * t400 + t582 * t486;
t378 = t584 * t385 - t578 * t498;
t377 = t578 * t385 + t584 * t498;
t376 = t465 * qJD(6) - t592;
t375 = -qJD(6) * t466 + t622;
t374 = t581 * t391 - t611;
t373 = t581 * t389 + t611;
t372 = -t575 * t391 - t606;
t371 = -t575 * t389 + t606;
t368 = t583 * t416 + t577 * t418;
t367 = t583 * t415 + t577 * t417;
t366 = t582 * t404 - t576 * t426;
t365 = t576 * t404 + t582 * t426;
t364 = -pkin(2) * t386 + pkin(3) * t434;
t363 = t467 * pkin(6) + t369;
t362 = t580 * t393 - t574 * t414;
t361 = t574 * t393 + t580 * t414;
t360 = t619 * t465 + t592;
t359 = t619 * t466 + t622;
t358 = -t579 * t376 + t466 * t646;
t357 = -t573 * t376 - t466 * t645;
t356 = t573 * t375 + t465 * t645;
t355 = -t579 * t375 + t465 * t646;
t353 = t581 * t397 - t575 * t398;
t352 = -t575 * t397 - t581 * t398;
t348 = -t577 * t379 + t583 * t380;
t347 = t583 * t379 + t577 * t380;
t346 = t582 * t374 - t576 * t390;
t345 = t582 * t373 - t576 * t388;
t344 = t576 * t374 + t582 * t390;
t343 = t576 * t373 + t582 * t388;
t342 = t582 * t351 - t576 * t451;
t341 = t576 * t351 + t582 * t451;
t340 = t580 * t358 + t612;
t339 = t580 * t356 - t612;
t338 = t574 * t358 - t607;
t337 = t574 * t356 + t607;
t336 = t581 * t362 - t575 * t392;
t335 = -t575 * t362 - t581 * t392;
t334 = -t574 * t369 + t580 * t370;
t333 = t580 * t369 + t574 * t370;
t332 = pkin(5) * t399 + t350;
t331 = t582 * t353 - t576 * t396;
t330 = t576 * t353 + t582 * t396;
t329 = -pkin(4) * t352 + t574 * t394;
t328 = t583 * t365 + t577 * t366;
t327 = t584 * t347 - t578 * t399;
t326 = t578 * t347 + t584 * t399;
t325 = -t579 * t359 + t573 * t360;
t324 = t573 * t359 + t579 * t360;
t323 = t581 * t334 + t634;
t322 = -t575 * t334 + t627;
t321 = t582 * t332 + t399 * t648;
t320 = t593 * t350;
t317 = t580 * t325 - t574 * t422;
t316 = t574 * t325 + t580 * t422;
t315 = t581 * t340 - t575 * t357;
t314 = t581 * t339 - t575 * t355;
t313 = -t575 * t340 - t581 * t357;
t312 = -t575 * t339 - t581 * t355;
t311 = pkin(5) * t352 - t575 * t370 + t580 * t627;
t310 = t582 * t336 - t576 * t361;
t309 = t576 * t336 + t582 * t361;
t308 = t583 * t344 + t577 * t346;
t307 = t583 * t343 + t577 * t345;
t306 = -t577 * t341 + t583 * t342;
t305 = t583 * t341 + t577 * t342;
t304 = t576 * t332 + t399 * t603;
t303 = -t577 * t330 + t583 * t331;
t302 = t583 * t330 + t577 * t331;
t301 = t588 * t350;
t300 = t582 * t323 - t576 * t333;
t299 = t576 * t323 + t582 * t333;
t298 = -pkin(2) * t348 + pkin(3) * t379 + pkin(4) * t486 - pkin(5) * t400 - t351;
t297 = t582 * t315 - t576 * t338;
t296 = t582 * t314 - t576 * t337;
t295 = t576 * t315 + t582 * t338;
t294 = t576 * t314 + t582 * t337;
t293 = t584 * t305 - t578 * t350;
t292 = t578 * t305 + t584 * t350;
t291 = t582 * t311 - t576 * t329;
t290 = t593 * t322;
t289 = t584 * t302 - t578 * t352;
t288 = t578 * t302 + t584 * t352;
t287 = t581 * t317 + t575 * t324;
t286 = -t575 * t317 + t581 * t324;
t283 = t583 * t304 + t577 * t321;
t282 = t583 * t309 + t577 * t310;
t281 = -pkin(3) * t352 + t576 * t311 + t582 * t329;
t280 = -pkin(2) * t306 + pkin(3) * t341 + pkin(4) * t451 - pkin(5) * t351;
t279 = t580 * t285 - t574 * t363;
t278 = t574 * t285 + t580 * t363;
t277 = t583 * t301 + t577 * t320;
t276 = t588 * t322;
t275 = pkin(6) * t324 + t284;
t274 = pkin(6) * t325 + t285;
t273 = t582 * t287 - t576 * t316;
t272 = t576 * t287 + t582 * t316;
t271 = -t577 * t299 + t583 * t300;
t270 = t583 * t299 + t577 * t300;
t269 = t583 * t295 + t577 * t297;
t268 = t583 * t294 + t577 * t296;
t267 = -pkin(2) * t303 + pkin(3) * t330 + pkin(4) * t396 - pkin(5) * t353 - t581 * t370 - t394 * t633;
t266 = t583 * t281 + t577 * t291;
t265 = t584 * t270 - t578 * t322;
t264 = t578 * t270 + t584 * t322;
t263 = t581 * t279 + t575 * t284;
t262 = -t575 * t279 + t628;
t261 = t583 * t276 + t577 * t290;
t260 = -pkin(4) * t286 + t574 * t275;
t259 = -t577 * t272 + t583 * t273;
t258 = t583 * t272 + t577 * t273;
t257 = t574 * pkin(6) * t284 - pkin(4) * t262;
t256 = -pkin(2) * t271 + pkin(3) * t299 + pkin(4) * t333 - pkin(5) * t323;
t255 = t582 * t263 - t576 * t278;
t254 = t576 * t263 + t582 * t278;
t253 = t581 * t580 * t275 + pkin(5) * t286 - t575 * t274;
t252 = t584 * t258 - t578 * t286;
t251 = t578 * t258 + t584 * t286;
t250 = pkin(5) * t262 + (-t285 * t575 + t580 * t628) * pkin(6);
t249 = t582 * t253 - t576 * t260;
t248 = -t577 * t254 + t583 * t255;
t247 = t583 * t254 + t577 * t255;
t246 = -pkin(3) * t286 + t576 * t253 + t582 * t260;
t245 = t582 * t250 - t576 * t257;
t244 = -pkin(2) * t259 + pkin(3) * t272 + pkin(4) * t316 - pkin(5) * t287 - t581 * t274 - t275 * t633;
t243 = t584 * t247 - t578 * t262;
t242 = t578 * t247 + t584 * t262;
t241 = -pkin(3) * t262 + t576 * t250 + t582 * t257;
t240 = t583 * t246 + t577 * t249;
t239 = -pkin(2) * t248 + pkin(3) * t254 + pkin(4) * t278 - pkin(5) * t263 + (-t284 * t633 - t285 * t581) * pkin(6);
t238 = t583 * t241 + t577 * t245;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t559, -t560, 0, 0, 0, 0, 0, 0, 0, 0, t502, 0, t518, t504, 0, 0, 0, 0, 0, 0, t408, t410, t378, t406, 0, 0, 0, 0, 0, 0, 0, 0, t327, t293, 0, 0, 0, 0, 0, 0, 0, t289, 0, t265, 0, 0, 0, 0, 0, 0, 0, 0, t252, t243; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t560, -t559, 0, 0, 0, 0, 0, 0, 0, 0, t501, 0, t517, t503, 0, 0, 0, 0, 0, 0, t407, t409, t377, t405, 0, 0, 0, 0, 0, 0, 0, 0, t326, t292, 0, 0, 0, 0, 0, 0, 0, t288, 0, t264, 0, 0, 0, 0, 0, 0, 0, 0, t251, t242; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t526, 0, 0, t597, 0, 0, 0, 0, 0, 0, t424, t438, t386, t412, 0, 0, 0, 0, 0, 0, 0, 0, t348, t306, 0, 0, 0, 0, 0, 0, 0, t303, 0, t271, 0, 0, 0, 0, 0, 0, 0, 0, t259, t248; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t560, 0, -t559, 0, t594, -t540, 0, 0, t584 * t532 - t596, 0, t584 * t525 - t601, t584 * t531 + t596, 0, -t578 * qJDD(2) + t584 * t551, -pkin(1) * t501 - pkin(2) * t599 - t578 * t505, 0, -pkin(1) * t517 + t584 * t597, -pkin(1) * t503 + t578 * t649, t584 * t429 + t608, t584 * t384 - t578 * t511, t584 * t443 - t578 * t479, t584 * t428 - t608, t584 * t444 - t578 * t587, t584 * t457 - t578 * t569, -pkin(1) * t407 - t578 * t383 + t584 * t445, -pkin(1) * t409 - t578 * t402 + t584 * t446, -pkin(1) * t377 - t578 * t364 + t584 * t401, -pkin(1) * t405 - t578 * t381 - t584 * t613, t584 * t368 - t578 * t441, 0, 0, t584 * t367 - t578 * t439, 0, t584 * t382 - t578 * t459, 0, 0, -pkin(1) * t326 + t584 * t283 - t578 * t298, -pkin(1) * t292 + t584 * t277 - t578 * t280, t584 * t308 - t578 * t372, 0, 0, t584 * t307 - t578 * t371, 0, t584 * t328 - t578 * t403, 0, -pkin(1) * t288 + t584 * t266 - t578 * t267, 0, -pkin(1) * t264 - t578 * t256 + t584 * t261, t584 * t269 - t578 * t313, 0, 0, t584 * t268 - t578 * t312, 0, t584 * t282 - t578 * t335, 0, 0, -pkin(1) * t251 + t584 * t240 - t578 * t244, -pkin(1) * t242 + t584 * t238 - t578 * t239; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t559, 0, t560, 0, t540, t594, 0, 0, t578 * t532 + t595, 0, t578 * t525 + t599, t578 * t531 - t595, 0, t584 * qJDD(2) + t578 * t551, pkin(1) * t502 - pkin(2) * t601 + t584 * t505, 0, pkin(1) * t518 + t578 * t597, pkin(1) * t504 - t584 * t649, t578 * t429 - t604, t578 * t384 + t584 * t511, t578 * t443 + t584 * t479, t578 * t428 + t604, t578 * t444 + t584 * t587, t578 * t457 + t584 * t569, pkin(1) * t408 + t584 * t383 + t578 * t445, pkin(1) * t410 + t584 * t402 + t578 * t446, pkin(1) * t378 + t584 * t364 + t578 * t401, pkin(1) * t406 + t584 * t381 - t578 * t613, t578 * t368 + t584 * t441, 0, 0, t578 * t367 + t584 * t439, 0, t578 * t382 + t584 * t459, 0, 0, pkin(1) * t327 + t578 * t283 + t584 * t298, pkin(1) * t293 + t578 * t277 + t584 * t280, t578 * t308 + t584 * t372, 0, 0, t578 * t307 + t584 * t371, 0, t578 * t328 + t584 * t403, 0, pkin(1) * t289 + t578 * t266 + t584 * t267, 0, pkin(1) * t265 + t584 * t256 + t578 * t261, t578 * t269 + t584 * t313, 0, 0, t578 * t268 + t584 * t312, 0, t578 * t282 + t584 * t335, 0, 0, pkin(1) * t252 + t578 * t240 + t584 * t244, pkin(1) * t243 + t578 * t238 + t584 * t239; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, (t555 - t602) * t583, 0, -t577 * t564 + t552, t651 * t577, 0, 0, (t553 + t617) * pkin(2), 0, pkin(2) * t561 - t513, pkin(2) ^ 2 * qJDD(1), -t577 * t472 + t583 * t473, -t577 * t433 + t583 * t435, -t577 * t482 + t583 * t484, -t577 * t470 + t583 * t471, -t577 * t483 + t583 * t485, -t577 * t499 + t583 * t500, pkin(2) * t474 - t577 * t458 + t528 * t630, pkin(2) * t652 - t577 * t456 + t528 * t624, pkin(2) * t498 - t577 * t430 + t653, (pkin(3) * t577 + pkin(2)) * t528, -t577 * t416 + t583 * t418, 0, 0, -t577 * t415 + t583 * t417, 0, -t577 * t431 + t583 * t432, 0, 0, pkin(2) * t399 - t577 * t304 + t583 * t321, pkin(2) * t350 - t577 * t301 + t583 * t320, -t577 * t344 + t583 * t346, 0, 0, -t577 * t343 + t583 * t345, 0, -t577 * t365 + t583 * t366, 0, pkin(2) * t352 - t577 * t281 + t583 * t291, 0, pkin(2) * t322 - t577 * t276 + t583 * t290, -t577 * t295 + t583 * t297, 0, 0, -t577 * t294 + t583 * t296, 0, -t577 * t309 + t583 * t310, 0, 0, pkin(2) * t286 - t577 * t246 + t583 * t249, pkin(2) * t262 - t577 * t241 + t583 * t245;];
tauB_reg = t1;
