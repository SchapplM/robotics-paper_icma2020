% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% CloosQRC350OL
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-06-20 08:27
% Revision: 6013df02bda2c1f6ebc95d3649839f696d960e41 (2020-06-19)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = CloosQRC350OL_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'CloosQRC350OL_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'CloosQRC350OL_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'CloosQRC350OL_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'CloosQRC350OL_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'CloosQRC350OL_invdynB_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-06-20 08:19:36
% EndTime: 2020-06-20 08:20:40
% DurationCPUTime: 60.61s
% Computational Cost: add. (152640->789), mult. (311292->1299), div. (0->0), fcn. (241967->12), ass. (0->623)
t1013 = sin(qJ(3));
t1006 = qJDD(2) + qJDD(3);
t1014 = sin(qJ(2));
t1019 = cos(qJ(3));
t1065 = t1014 * t1019;
t1020 = cos(qJ(2));
t1066 = t1013 * t1020;
t970 = (-t1065 - t1066) * qJD(1);
t1062 = t1019 * t1020;
t1067 = t1013 * t1014;
t972 = (t1062 - t1067) * qJD(1);
t1099 = t972 * t970;
t1115 = t1006 + t1099;
t1123 = t1013 * t1115;
t1122 = t1019 * t1115;
t1004 = t1014 * g(3);
t1023 = qJD(1) ^ 2;
t1061 = t1020 * t1023;
t985 = pkin(2) * t1061 - t1004;
t1045 = t1014 * t1061;
t992 = qJDD(2) - t1045;
t1024 = pkin(3) * t992 - t985;
t1064 = t1014 * t1023;
t1103 = t1020 * g(3);
t984 = -pkin(2) * t1064 - t1103;
t1022 = qJD(2) ^ 2;
t1008 = t1014 ^ 2;
t1070 = t1008 * t1023;
t994 = -t1022 - t1070;
t963 = pkin(3) * t994 + t984;
t908 = t1013 * t963 - t1019 * t1024;
t909 = t1013 * t1024 + t1019 * t963;
t841 = t1013 * t909 - t1019 * t908;
t1121 = t1014 * t841;
t1120 = t1020 * t841;
t1007 = qJD(2) + qJD(3);
t1098 = t1007 * t970;
t1073 = qJD(1) * qJD(2);
t1044 = t1020 * t1073;
t1059 = t1014 * qJDD(1);
t981 = -t1044 - t1059;
t1002 = t1020 * qJDD(1);
t1046 = t1014 * t1073;
t982 = t1002 - t1046;
t907 = t970 * qJD(3) + t1013 * t981 + t1019 * t982;
t1119 = t907 + t1098;
t1118 = -t981 + t1044;
t1011 = sin(qJ(5));
t1017 = cos(qJ(5));
t1012 = sin(qJ(4));
t1018 = cos(qJ(4));
t945 = -t1012 * t1007 + t1018 * t972;
t966 = qJD(4) + t970;
t902 = t1011 * t945 - t1017 * t966;
t904 = t1011 * t966 + t1017 * t945;
t848 = t904 * t902;
t1032 = t1018 * t1006 + t1012 * t907;
t858 = -t945 * qJD(4) - t1032;
t857 = qJDD(5) - t858;
t1113 = -t848 + t857;
t1117 = t1011 * t1113;
t1116 = t1017 * t1113;
t1010 = sin(qJ(6));
t1016 = cos(qJ(6));
t943 = t1018 * t1007 + t1012 * t972;
t859 = -t943 * qJD(4) - t1012 * t1006 + t1018 * t907;
t1038 = t1013 * t982 - t1019 * t981;
t906 = -t972 * qJD(3) - t1038;
t905 = qJDD(4) + t906;
t787 = -t902 * qJD(5) + t1011 * t905 + t1017 * t859;
t940 = qJD(5) + t943;
t865 = -t1010 * t940 + t1016 * t904;
t712 = t865 * qJD(6) + t1010 * t787 + t1016 * t857;
t896 = -qJD(6) + t902;
t824 = t896 * t865;
t1114 = t824 + t712;
t1112 = -t857 - t848;
t872 = t940 * t902;
t759 = -t872 + t787;
t901 = t904 ^ 2;
t937 = t940 ^ 2;
t1111 = t901 + t937;
t915 = t966 * t943;
t1110 = -t915 + t859;
t864 = t1010 * t904 + t1016 * t940;
t1102 = t864 * t865;
t1039 = t1011 * t859 - t1017 * t905;
t786 = -t904 * qJD(5) - t1039;
t781 = qJDD(6) + t786;
t1026 = t781 - t1102;
t1109 = t1010 * t1026;
t1100 = t945 * t943;
t1027 = t905 - t1100;
t1108 = t1012 * t1027;
t1107 = t1016 * t1026;
t1106 = t1018 * t1027;
t756 = (qJD(5) - t940) * t904 + t1039;
t862 = t864 ^ 2;
t863 = t865 ^ 2;
t895 = t896 ^ 2;
t900 = t902 ^ 2;
t941 = t943 ^ 2;
t942 = t945 ^ 2;
t965 = t966 ^ 2;
t968 = t970 ^ 2;
t969 = t972 ^ 2;
t1005 = t1007 ^ 2;
t1037 = t1014 * t985 + t1020 * t984;
t1105 = pkin(2) * t1037;
t1104 = pkin(4) * t1013;
t1101 = t864 * t896;
t955 = qJDD(1) * pkin(2) + t1118 * pkin(3);
t799 = t1119 * pkin(5) + (t1007 * t972 - t906) * pkin(4) + t955;
t928 = -t970 * pkin(4) + t972 * pkin(5);
t839 = -t1005 * pkin(4) - t1006 * pkin(5) + t970 * t928 + t909;
t751 = -t1012 * t799 + t1018 * t839;
t838 = -t1006 * pkin(4) + t1005 * pkin(5) + t972 * t928 + t908;
t707 = -t1011 * t838 + t1017 * t751;
t706 = t1011 * t751 + t1017 * t838;
t697 = pkin(6) * t1111 + t706;
t1097 = t1010 * t697;
t714 = -t781 - t1102;
t1096 = t1010 * t714;
t1095 = t1010 * t896;
t1094 = t1011 * t1112;
t1093 = t1011 * t940;
t750 = t1012 * t839 + t1018 * t799;
t1092 = t1012 * t750;
t1091 = t1012 * t838;
t844 = -t905 - t1100;
t1090 = t1012 * t844;
t1089 = t1012 * t966;
t926 = -t1099 + t1006;
t1088 = t1013 * t926;
t991 = qJDD(2) + t1045;
t1087 = t1014 * t991;
t1086 = t1014 * t992;
t1085 = t1016 * t697;
t1084 = t1016 * t714;
t1083 = t1016 * t896;
t1082 = t1017 * t1112;
t1081 = t1017 * t940;
t1080 = t1018 * t750;
t1079 = t1018 * t838;
t1078 = t1018 * t844;
t1077 = t1018 * t966;
t1076 = t1019 * t926;
t1075 = t1020 * t991;
t1072 = t1007 * t1013;
t1071 = t1007 * t1019;
t1009 = t1020 ^ 2;
t1069 = t1009 * t1023;
t1068 = t1012 * t1017;
t1063 = t1017 * t1018;
t1060 = -t1008 - t1009;
t1015 = sin(qJ(1));
t1058 = t1015 * qJDD(1);
t1021 = cos(qJ(1));
t1057 = t1021 * qJDD(1);
t1056 = pkin(3) * t1020 * t955;
t1055 = t1011 * t1102;
t1054 = t1012 * t848;
t1053 = t1013 * t1100;
t1052 = t1015 * t1099;
t1051 = t1017 * t1102;
t1050 = t1018 * t848;
t1049 = t1019 * t1100;
t1048 = t1021 * t1099;
t1047 = -pkin(4) * t1019 - pkin(3);
t1043 = t1014 * t1058;
t1042 = t1015 * t1002;
t1041 = t1014 * t1057;
t1040 = t1020 * t1057;
t633 = t1011 * t706 + t1017 * t707;
t843 = t1013 * t908 + t1019 * t909;
t1036 = t1015 * t1045;
t1035 = t1021 * t1045;
t988 = -t1015 * t1023 + t1057;
t1034 = -pkin(1) * t988 - t1015 * g(3);
t713 = t864 * qJD(6) + t1010 * t857 - t1016 * t787;
t1033 = pkin(5) * t1019 + t1104;
t1025 = pkin(6) * t759 + t750;
t665 = pkin(6) * t1112 + t707;
t589 = t1010 * t665 + t1016 * t1025;
t590 = -t1010 * t1025 + t1016 * t665;
t529 = -t1010 * t590 + t1016 * t589;
t530 = t1010 * t589 + t1016 * t590;
t631 = t1011 * t707 - t1017 * t706;
t668 = -t1012 * t751 + t1080;
t669 = t1018 * t751 + t1092;
t933 = t1014 * t984 - t1020 * t985;
t1031 = pkin(5) * t1013 + t1047;
t1030 = t713 - t1101;
t1029 = (-qJD(3) + t1007) * t972 - t1038;
t1028 = (-qJD(4) + t966) * t945 - t1032;
t996 = -t1022 - t1069;
t995 = t1022 - t1069;
t993 = -t1022 + t1070;
t990 = t1060 * t1023;
t989 = (-t1008 + t1009) * t1023;
t987 = t1021 * t1023 + t1058;
t986 = t1060 * qJDD(1);
t983 = t1002 - 0.2e1 * t1046;
t980 = 0.2e1 * t1044 + t1059;
t979 = t1020 * t992;
t978 = t1060 * t1073;
t967 = -pkin(1) * t987 + t1021 * g(3);
t960 = -t969 + t1005;
t959 = t968 - t1005;
t958 = t1009 * t1073 + t1014 * t982;
t957 = t1008 * t1073 + t1020 * t981;
t954 = -t969 - t1005;
t953 = -t1014 * t996 - t1075;
t952 = t1020 * t994 - t1086;
t951 = t1020 * t996 - t1087;
t950 = t1020 * t995 + t1086;
t949 = t1014 * t994 + t979;
t948 = t1014 * t993 + t1075;
t939 = -t1015 * t990 + t1021 * t986;
t938 = t1015 * t986 + t1021 * t990;
t932 = -t1014 * t980 + t1020 * t983;
t929 = t969 - t968;
t924 = -t1005 - t968;
t923 = t1103 + (-t953 + t1064) * pkin(2);
t922 = t1004 + (-t952 - t1061) * pkin(2);
t921 = -pkin(2) * t1058 + t1021 * t933;
t920 = pkin(2) * t1057 + t1015 * t933;
t919 = -t1015 * t983 + t1021 * t951;
t918 = -t1015 * t980 + t1021 * t949;
t917 = t1015 * t951 + t1021 * t983;
t916 = t1015 * t949 + t1021 * t980;
t914 = -t942 + t965;
t913 = t941 - t965;
t912 = (t1013 * t972 + t1019 * t970) * t1007;
t911 = (t1013 * t970 - t1019 * t972) * t1007;
t910 = -t968 - t969;
t891 = t942 - t941;
t890 = -t942 - t965;
t889 = t1019 * t959 - t1088;
t888 = -t1013 * t960 + t1122;
t887 = t1013 * t959 + t1076;
t886 = t1019 * t960 + t1123;
t885 = -t1013 * t954 - t1076;
t884 = t1019 * t954 - t1088;
t883 = -t1098 + t907;
t878 = (qJD(3) + t1007) * t972 + t1038;
t877 = -t965 - t941;
t876 = t1019 * t907 - t1072 * t972;
t875 = t1013 * t907 + t1071 * t972;
t874 = -t1013 * t906 - t1071 * t970;
t873 = t1019 * t906 - t1072 * t970;
t871 = t1019 * t924 - t1123;
t870 = t1013 * t924 + t1122;
t869 = -t901 + t937;
t868 = t900 - t937;
t867 = -t941 - t942;
t853 = (t1012 * t945 - t1018 * t943) * t966;
t852 = (t1012 * t943 + t1018 * t945) * t966;
t851 = -pkin(3) * t878 - t1019 * t955;
t850 = t1014 * t912 + t1020 * t911;
t849 = -pkin(3) * t1119 + t1013 * t955;
t847 = -t901 + t900;
t835 = -t937 - t900;
t833 = t915 + t859;
t829 = (qJD(4) + t966) * t945 + t1032;
t828 = t1020 * t849 + t1065 * t955;
t827 = t1020 * t851 + t1067 * t955;
t826 = t1014 * t889 + t1020 * t887;
t825 = t1014 * t888 + t1020 * t886;
t823 = t1018 * t859 - t945 * t1089;
t822 = -t1012 * t859 - t945 * t1077;
t821 = -t1012 * t858 + t943 * t1077;
t820 = -t1018 * t858 - t943 * t1089;
t819 = -t863 + t895;
t818 = t862 - t895;
t817 = -t1014 * t884 + t1020 * t885;
t816 = t1014 * t885 + t1020 * t884;
t815 = t1013 * t883 + t1019 * t1029;
t814 = -t1013 * t1119 - t1019 * t878;
t813 = t1013 * t1029 - t1019 * t883;
t812 = -t1013 * t878 + t1019 * t1119;
t811 = -t1013 * t905 + t1019 * t853;
t810 = t1013 * t853 + t1019 * t905;
t809 = t900 + t901;
t808 = -pkin(3) * t910 + t843;
t807 = t1018 * t913 + t1090;
t806 = -t1012 * t914 + t1106;
t805 = -t1012 * t913 + t1078;
t804 = -t1018 * t914 - t1108;
t803 = t1014 * t876 + t1020 * t875;
t802 = t1014 * t874 + t1020 * t873;
t801 = (t1011 * t904 - t1017 * t902) * t940;
t800 = (-t1011 * t902 - t1017 * t904) * t940;
t798 = -t1014 * t870 + t1020 * t871;
t797 = t1014 * t871 + t1020 * t870;
t796 = -t1012 * t890 + t1078;
t795 = -t1018 * t890 - t1090;
t794 = t863 - t862;
t793 = t1018 * t877 - t1108;
t792 = -t1012 * t877 - t1106;
t788 = -t863 - t895;
t785 = t1019 * t823 - t1053;
t784 = t1019 * t821 + t1053;
t783 = t1013 * t823 + t1049;
t782 = t1013 * t821 - t1049;
t779 = t1020 * t843 - t1121;
t778 = t1014 * t843 + t1120;
t777 = -t1015 * t1119 + t1021 * t816;
t776 = t1015 * t816 + t1021 * t1119;
t775 = -t895 - t862;
t774 = -t1015 * t878 + t1021 * t797;
t773 = t1015 * t797 + t1021 * t878;
t772 = -t1015 * t955 + t1021 * t778;
t771 = t1015 * t778 + t1021 * t955;
t770 = -t862 - t863;
t769 = t1012 * t857 + t1018 * t801;
t768 = -t1012 * t801 + t1018 * t857;
t767 = -pkin(2) * t817 + pkin(3) * t884 - t909;
t766 = t1020 * t808 - t1121;
t765 = t1012 * t833 + t1018 * t1028;
t764 = -t1012 * t1110 - t1018 * t829;
t763 = -t1012 * t1028 + t1018 * t833;
t762 = t1012 * t829 - t1018 * t1110;
t760 = -t872 - t787;
t757 = (-qJD(5) - t940) * t904 - t1039;
t755 = t1017 * t868 + t1094;
t754 = -t1011 * t869 + t1116;
t753 = t1011 * t868 - t1082;
t752 = t1017 * t869 + t1117;
t749 = (-t1010 * t865 + t1016 * t864) * t896;
t748 = (t1010 * t864 + t1016 * t865) * t896;
t747 = t1017 * t787 - t904 * t1093;
t746 = t1011 * t787 + t904 * t1081;
t745 = -t1011 * t786 + t902 * t1081;
t744 = t1017 * t786 + t902 * t1093;
t742 = pkin(5) * t795 - t1079;
t741 = -t1014 * t813 + t1020 * t815;
t740 = t1014 * t815 + t1020 * t813;
t739 = t1014 * t814 + t1020 * t812;
t738 = -t1013 * t1028 + t1019 * t807;
t737 = -t1013 * t833 + t1019 * t806;
t736 = t1013 * t807 + t1019 * t1028;
t735 = t1013 * t806 + t1019 * t833;
t734 = -pkin(2) * t798 + pkin(3) * t870 - t908;
t733 = pkin(5) * t792 - t1091;
t732 = t1011 * t1111 + t1082;
t731 = -t1017 * t1111 + t1094;
t730 = t1014 * t811 + t1020 * t810;
t729 = -t1013 * t1110 + t1019 * t796;
t728 = t1013 * t796 + t1019 * t1110;
t727 = -t1013 * t829 + t1019 * t793;
t726 = t1013 * t793 + t1019 * t829;
t725 = -pkin(2) * t779 + pkin(3) * t841;
t724 = t1017 * t835 - t1117;
t723 = t1011 * t835 + t1116;
t722 = -t1013 * t891 + t1019 * t764;
t721 = t1013 * t764 + t1019 * t891;
t720 = -t1015 * t910 + t1021 * t740;
t719 = t1015 * t740 + t1021 * t910;
t718 = -t1013 * t867 + t1019 * t765;
t717 = t1013 * t765 + t1019 * t867;
t711 = t1018 * t747 + t1054;
t710 = t1018 * t745 - t1054;
t709 = -t1012 * t747 + t1050;
t708 = -t1012 * t745 - t1050;
t704 = t1014 * t785 + t1020 * t783;
t703 = t1014 * t784 + t1020 * t782;
t702 = -t1013 * t800 + t1019 * t769;
t701 = t1013 * t769 + t1019 * t800;
t700 = -pkin(2) * t741 + pkin(3) * t813;
t699 = -pkin(4) * t795 - t751;
t698 = -pkin(4) * t792 - t750;
t696 = -t1011 * t781 + t1017 * t749;
t695 = t1011 * t749 + t1017 * t781;
t694 = -t1016 * t818 - t1096;
t693 = t1010 * t819 - t1107;
t692 = -t1010 * t818 + t1084;
t691 = -t1016 * t819 - t1109;
t688 = -t713 - t1101;
t687 = -t824 + t712;
t684 = -t1016 * t713 + t865 * t1095;
t683 = -t1010 * t713 - t865 * t1083;
t682 = t1010 * t712 - t864 * t1083;
t681 = -t1016 * t712 - t864 * t1095;
t680 = -t1011 * t760 - t1017 * t756;
t679 = -t1011 * t759 + t1017 * t757;
t678 = -t1011 * t756 + t1017 * t760;
t677 = t1011 * t757 + t1017 * t759;
t676 = -t1012 * t756 + t1018 * t755;
t675 = -t1012 * t760 + t1018 * t754;
t674 = -t1012 * t755 - t1018 * t756;
t673 = -t1012 * t754 - t1018 * t760;
t671 = t1010 * t788 - t1084;
t670 = t1016 * t788 + t1096;
t667 = t1012 * t759 + t1018 * t732;
t666 = -t1012 * t732 + t1018 * t759;
t664 = t1014 * t738 + t1020 * t736;
t663 = t1014 * t737 + t1020 * t735;
t662 = -t1016 * t775 + t1109;
t661 = t1010 * t775 + t1107;
t660 = -t1012 * t757 + t1018 * t724;
t659 = -t1012 * t724 - t1018 * t757;
t658 = -t1014 * t728 + t1020 * t729;
t657 = t1014 * t729 + t1020 * t728;
t656 = -t1014 * t726 + t1020 * t727;
t655 = t1014 * t727 + t1020 * t726;
t654 = -t1012 * t847 + t1018 * t679;
t653 = -t1012 * t679 - t1018 * t847;
t652 = t1014 * t722 + t1020 * t721;
t651 = -t1013 * t746 + t1019 * t711;
t650 = -t1013 * t744 + t1019 * t710;
t649 = t1013 * t711 + t1019 * t746;
t648 = t1013 * t710 + t1019 * t744;
t647 = t1013 * t838 + t1019 * t669;
t646 = t1013 * t669 - t1019 * t838;
t645 = t1017 * t684 - t1055;
t644 = t1017 * t682 + t1055;
t643 = t1011 * t684 + t1051;
t642 = t1011 * t682 - t1051;
t641 = -t1012 * t809 + t1018 * t680;
t640 = -t1012 * t680 - t1018 * t809;
t639 = -t1014 * t717 + t1020 * t718;
t638 = t1014 * t718 + t1020 * t717;
t637 = -t1013 * t699 + t1019 * t742;
t636 = -t1013 * t698 + t1019 * t733;
t635 = -t1012 * t748 + t1018 * t696;
t634 = -t1012 * t696 - t1018 * t748;
t630 = -t1015 * t795 + t1021 * t657;
t629 = t1015 * t657 + t1021 * t795;
t628 = -t1015 * t792 + t1021 * t655;
t627 = t1015 * t655 + t1021 * t792;
t626 = pkin(5) * t763 + t668;
t625 = -t1013 * t753 + t1019 * t676;
t624 = -t1013 * t752 + t1019 * t675;
t623 = t1013 * t676 + t1019 * t753;
t622 = t1013 * t675 + t1019 * t752;
t621 = t1014 * t702 + t1020 * t701;
t620 = -pkin(4) * t666 + t1011 * t750;
t619 = -pkin(4) * t659 - t1017 * t750;
t618 = -t1013 * t731 + t1019 * t667;
t617 = t1013 * t667 + t1019 * t731;
t616 = -pkin(3) * t795 + t1013 * t742 + t1019 * t699;
t615 = -t1013 * t723 + t1019 * t660;
t614 = t1013 * t660 + t1019 * t723;
t613 = -pkin(3) * t792 + t1013 * t733 + t1019 * t698;
t612 = -t1015 * t763 + t1021 * t638;
t611 = t1015 * t638 + t1021 * t763;
t610 = -t1011 * t1114 + t1017 * t694;
t609 = t1011 * t688 + t1017 * t693;
t608 = t1011 * t694 + t1017 * t1114;
t607 = t1011 * t693 - t1017 * t688;
t606 = t1010 * t1030 - t1016 * t687;
t605 = t1010 * t688 - t1016 * t1114;
t604 = -t1010 * t687 - t1016 * t1030;
t603 = t1010 * t1114 + t1016 * t688;
t602 = pkin(6) * t670 + t1085;
t601 = pkin(6) * t671 + t1097;
t600 = pkin(6) * t662 - t1085;
t599 = pkin(6) * t661 + t1097;
t598 = t1018 * t633 + t1092;
t597 = -t1012 * t633 + t1080;
t596 = -t1011 * t1030 + t1017 * t671;
t595 = t1011 * t671 + t1017 * t1030;
t594 = t1019 * t626 + t763 * t1104;
t593 = t1011 * t687 + t1017 * t662;
t592 = t1011 * t662 - t1017 * t687;
t591 = t1033 * t668;
t588 = -t1011 * t794 + t1017 * t606;
t587 = t1011 * t606 + t1017 * t794;
t586 = -t1013 * t677 + t1019 * t654;
t585 = t1013 * t654 + t1019 * t677;
t584 = -t1012 * t683 + t1018 * t645;
t583 = -t1012 * t681 + t1018 * t644;
t582 = -t1012 * t645 - t1018 * t683;
t581 = -t1012 * t644 - t1018 * t681;
t580 = -t1013 * t695 + t1019 * t635;
t579 = t1013 * t635 + t1019 * t695;
t578 = pkin(5) * t666 - t1012 * t707 + t1063 * t750;
t577 = -t1013 * t678 + t1019 * t641;
t576 = t1013 * t641 + t1019 * t678;
t575 = pkin(5) * t659 + t1011 * t1080 - t1012 * t706;
t574 = -t1011 * t770 + t1017 * t605;
t573 = t1011 * t605 + t1017 * t770;
t572 = -pkin(2) * t658 + pkin(3) * t728 + pkin(4) * t1110 - pkin(5) * t796 + t1091;
t571 = t1014 * t651 + t1020 * t649;
t570 = t1014 * t650 + t1020 * t648;
t569 = -t1014 * t646 + t1020 * t647;
t568 = t1014 * t647 + t1020 * t646;
t567 = t1013 * t626 + t1047 * t763;
t566 = -pkin(2) * t656 + pkin(3) * t726 + pkin(4) * t829 - pkin(5) * t793 - t1079;
t565 = -pkin(4) * t640 + t633;
t564 = pkin(5) * t640 - t1018 * t631;
t563 = -t1012 * t692 + t1018 * t610;
t562 = -t1012 * t691 + t1018 * t609;
t561 = -t1012 * t610 - t1018 * t692;
t560 = -t1012 * t609 - t1018 * t691;
t559 = t1012 * t670 + t1018 * t596;
t558 = -t1012 * t596 + t1018 * t670;
t557 = t1014 * t637 + t1020 * t616;
t556 = t1014 * t625 + t1020 * t623;
t555 = t1014 * t624 + t1020 * t622;
t554 = t1031 * t668;
t553 = t1014 * t636 + t1020 * t613;
t552 = t1012 * t661 + t1018 * t593;
t551 = -t1012 * t593 + t1018 * t661;
t550 = -t1014 * t617 + t1020 * t618;
t549 = t1014 * t618 + t1020 * t617;
t548 = -t1014 * t614 + t1020 * t615;
t547 = t1014 * t615 + t1020 * t614;
t546 = -t1013 * t631 + t1019 * t598;
t545 = t1013 * t598 + t1019 * t631;
t544 = -t1013 * t643 + t1019 * t584;
t543 = -t1013 * t642 + t1019 * t583;
t542 = t1013 * t584 + t1019 * t643;
t541 = t1013 * t583 + t1019 * t642;
t540 = -t1015 * t668 + t1021 * t568;
t539 = t1015 * t568 + t1021 * t668;
t538 = -pkin(2) * t639 + pkin(3) * t717 + pkin(4) * t867 - pkin(5) * t765 - t669;
t537 = -t1013 * t620 + t1019 * t578;
t536 = t1033 * t597;
t535 = -t1013 * t619 + t1019 * t575;
t534 = -t1011 * t590 + t1017 * t602;
t533 = -t1011 * t589 + t1017 * t599;
t532 = -t1012 * t604 + t1018 * t588;
t531 = -t1012 * t588 - t1018 * t604;
t528 = t1012 * t603 + t1018 * t574;
t527 = -t1012 * t574 + t1018 * t603;
t526 = -t1015 * t666 + t1021 * t549;
t525 = t1015 * t549 + t1021 * t666;
t524 = t1014 * t586 + t1020 * t585;
t523 = t1014 * t594 + t1020 * t567;
t522 = -t1015 * t659 + t1021 * t547;
t521 = t1015 * t547 + t1021 * t659;
t520 = t1014 * t580 + t1020 * t579;
t519 = -t1014 * t576 + t1020 * t577;
t518 = t1014 * t577 + t1020 * t576;
t517 = -t1013 * t608 + t1019 * t563;
t516 = -t1013 * t607 + t1019 * t562;
t515 = t1013 * t563 + t1019 * t608;
t514 = t1013 * t562 + t1019 * t607;
t513 = -pkin(3) * t666 + t1013 * t578 + t1019 * t620;
t512 = -pkin(2) * t569 + pkin(3) * t646 - pkin(4) * t838 - pkin(5) * t669;
t511 = -t1013 * t595 + t1019 * t559;
t510 = t1013 * t559 + t1019 * t595;
t509 = t1011 * t697 + t1017 * t530;
t508 = t1011 * t530 - t1017 * t697;
t507 = -pkin(3) * t659 + t1013 * t575 + t1019 * t619;
t506 = -t1013 * t592 + t1019 * t552;
t505 = t1013 * t552 + t1019 * t592;
t504 = t1014 * t591 + t1020 * t554;
t503 = -t1013 * t565 + t1019 * t564;
t502 = t1031 * t597;
t501 = -t1015 * t640 + t1021 * t518;
t500 = t1015 * t518 + t1021 * t640;
t499 = pkin(6) * t603 + t529;
t498 = pkin(6) * t605 + t530;
t497 = -t1013 * t587 + t1019 * t532;
t496 = t1013 * t532 + t1019 * t587;
t495 = -t1013 * t573 + t1019 * t528;
t494 = t1013 * t528 + t1019 * t573;
t493 = -pkin(3) * t640 + t1013 * t564 + t1019 * t565;
t492 = -t1014 * t545 + t1020 * t546;
t491 = t1014 * t546 + t1020 * t545;
t490 = -pkin(4) * t558 + t1011 * t602 + t1017 * t590;
t489 = t1014 * t544 + t1020 * t542;
t488 = t1014 * t543 + t1020 * t541;
t487 = -pkin(4) * t551 + t1011 * t599 + t1017 * t589;
t486 = -pkin(2) * t550 + pkin(3) * t617 + pkin(4) * t731 - pkin(5) * t667 - t1018 * t707 - t1068 * t750;
t485 = -pkin(2) * t548 + pkin(3) * t614 + pkin(4) * t723 - pkin(5) * t660 - t1011 * t1092 - t1018 * t706;
t484 = -t1015 * t597 + t1021 * t491;
t483 = t1015 * t491 + t1021 * t597;
t482 = t1014 * t537 + t1020 * t513;
t481 = pkin(5) * t558 - t1012 * t601 + t1018 * t534;
t480 = t1014 * t535 + t1020 * t507;
t479 = pkin(5) * t551 - t1012 * t600 + t1018 * t533;
t478 = t1012 * t529 + t1018 * t509;
t477 = -t1012 * t509 + t1018 * t529;
t476 = t1014 * t517 + t1020 * t515;
t475 = t1014 * t516 + t1020 * t514;
t474 = t1014 * t536 + t1020 * t502;
t473 = -t1014 * t510 + t1020 * t511;
t472 = t1014 * t511 + t1020 * t510;
t471 = -pkin(4) * t527 + t1011 * t499;
t470 = -t1014 * t505 + t1020 * t506;
t469 = t1014 * t506 + t1020 * t505;
t468 = -pkin(2) * t519 + pkin(3) * t576 + pkin(4) * t678 - pkin(5) * t641 + t1012 * t631;
t467 = t1014 * t503 + t1020 * t493;
t466 = t1014 * t497 + t1020 * t496;
t465 = -t1015 * t558 + t1021 * t472;
t464 = t1015 * t472 + t1021 * t558;
t463 = -t1014 * t494 + t1020 * t495;
t462 = t1014 * t495 + t1020 * t494;
t461 = t1011 * pkin(6) * t529 - pkin(4) * t477;
t460 = -t1015 * t551 + t1021 * t469;
t459 = t1015 * t469 + t1021 * t551;
t458 = -pkin(2) * t492 + pkin(3) * t545 + pkin(4) * t631 - pkin(5) * t598;
t457 = -t1013 * t508 + t1019 * t478;
t456 = t1013 * t478 + t1019 * t508;
t455 = -t1013 * t490 + t1019 * t481;
t454 = -t1013 * t487 + t1019 * t479;
t453 = pkin(5) * t527 - t1012 * t498 + t1063 * t499;
t452 = -t1015 * t527 + t1021 * t462;
t451 = t1015 * t462 + t1021 * t527;
t450 = pkin(5) * t477 + (-t1012 * t530 + t1063 * t529) * pkin(6);
t449 = -pkin(3) * t558 + t1013 * t481 + t1019 * t490;
t448 = -pkin(3) * t551 + t1013 * t479 + t1019 * t487;
t447 = -pkin(2) * t473 + pkin(3) * t510 + pkin(4) * t595 - pkin(5) * t559 - t1012 * t534 - t1018 * t601;
t446 = -pkin(2) * t470 + pkin(3) * t505 + pkin(4) * t592 - pkin(5) * t552 - t1012 * t533 - t1018 * t600;
t445 = -t1013 * t471 + t1019 * t453;
t444 = -t1014 * t456 + t1020 * t457;
t443 = t1014 * t457 + t1020 * t456;
t442 = -pkin(3) * t527 + t1013 * t453 + t1019 * t471;
t441 = -t1013 * t461 + t1019 * t450;
t440 = t1014 * t455 + t1020 * t449;
t439 = t1014 * t454 + t1020 * t448;
t438 = -t1015 * t477 + t1021 * t443;
t437 = t1015 * t443 + t1021 * t477;
t436 = -pkin(2) * t463 + pkin(3) * t494 + pkin(4) * t573 - pkin(5) * t528 - t1018 * t498 - t1068 * t499;
t435 = -pkin(3) * t477 + t1013 * t450 + t1019 * t461;
t434 = t1014 * t445 + t1020 * t442;
t433 = -pkin(2) * t444 + pkin(3) * t456 + pkin(4) * t508 - pkin(5) * t478 + (-t1018 * t530 - t1068 * t529) * pkin(6);
t432 = t1014 * t441 + t1020 * t435;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t987, -t988, 0, 0, 0, 0, 0, 0, 0, 0, t918, t919, t939, t921, 0, 0, 0, 0, 0, 0, t774, t777, t720, t772, 0, 0, 0, 0, 0, 0, t628, t630, t612, t540, 0, 0, 0, 0, 0, 0, t522, t526, t501, t484, 0, 0, 0, 0, 0, 0, t460, t465, t452, t438; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t988, -t987, 0, 0, 0, 0, 0, 0, 0, 0, t916, t917, t938, t920, 0, 0, 0, 0, 0, 0, t773, t776, t719, t771, 0, 0, 0, 0, 0, 0, t627, t629, t611, t539, 0, 0, 0, 0, 0, 0, t521, t525, t500, t483, 0, 0, 0, 0, 0, 0, t459, t464, t451, t437; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t952, t953, 0, t1037, 0, 0, 0, 0, 0, 0, t798, t817, t741, t779, 0, 0, 0, 0, 0, 0, t656, t658, t639, t569, 0, 0, 0, 0, 0, 0, t548, t550, t519, t492, 0, 0, 0, 0, 0, 0, t470, t473, t463, t444; 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, t988, 0, -t987, 0, t1034, -t967, 0, 0, t1021 * t958 - t1036, -t1015 * t989 + t1021 * t932, t1021 * t950 - t1042, t1021 * t957 + t1036, t1021 * t948 + t1043, -t1015 * qJDD(2) + t1021 * t978, -pkin(1) * t916 - pkin(2) * t1040 - t1015 * t922, -pkin(1) * t917 + pkin(2) * t1041 - t1015 * t923, -pkin(1) * t938 + t1021 * t1037, -pkin(1) * t920 + t1015 * t1105, t1021 * t803 + t1052, -t1015 * t929 + t1021 * t739, -t1015 * t883 + t1021 * t825, t1021 * t802 - t1052, -t1015 * t1029 + t1021 * t826, -t1015 * t1006 + t1021 * t850, -pkin(1) * t773 - t1015 * t734 + t1021 * t827, -pkin(1) * t776 - t1015 * t767 + t1021 * t828, -pkin(1) * t719 - t1015 * t700 + t1021 * t766, -pkin(1) * t771 - t1015 * t725 - t1021 * t1056, -t1015 * t822 + t1021 * t704, -t1015 * t762 + t1021 * t652, -t1015 * t804 + t1021 * t663, -t1015 * t820 + t1021 * t703, -t1015 * t805 + t1021 * t664, -t1015 * t852 + t1021 * t730, -pkin(1) * t627 - t1015 * t566 + t1021 * t553, -pkin(1) * t629 - t1015 * t572 + t1021 * t557, -pkin(1) * t611 - t1015 * t538 + t1021 * t523, -pkin(1) * t539 - t1015 * t512 + t1021 * t504, -t1015 * t709 + t1021 * t571, -t1015 * t653 + t1021 * t524, -t1015 * t673 + t1021 * t555, -t1015 * t708 + t1021 * t570, -t1015 * t674 + t1021 * t556, -t1015 * t768 + t1021 * t621, -pkin(1) * t521 - t1015 * t485 + t1021 * t480, -pkin(1) * t525 - t1015 * t486 + t1021 * t482, -pkin(1) * t500 - t1015 * t468 + t1021 * t467, -pkin(1) * t483 - t1015 * t458 + t1021 * t474, -t1015 * t582 + t1021 * t489, -t1015 * t531 + t1021 * t466, -t1015 * t560 + t1021 * t475, -t1015 * t581 + t1021 * t488, -t1015 * t561 + t1021 * t476, -t1015 * t634 + t1021 * t520, -pkin(1) * t459 - t1015 * t446 + t1021 * t439, -pkin(1) * t464 - t1015 * t447 + t1021 * t440, -pkin(1) * t451 - t1015 * t436 + t1021 * t434, -pkin(1) * t437 - t1015 * t433 + t1021 * t432; 0, 0, 0, 0, 0, 0, g(3), 0, 0, 0, 0, 0, t987, 0, t988, 0, t967, t1034, 0, 0, t1015 * t958 + t1035, t1015 * t932 + t1021 * t989, t1015 * t950 + t1040, t1015 * t957 - t1035, t1015 * t948 - t1041, t1021 * qJDD(2) + t1015 * t978, pkin(1) * t918 - pkin(2) * t1042 + t1021 * t922, pkin(1) * t919 + pkin(2) * t1043 + t1021 * t923, pkin(1) * t939 + t1015 * t1037, pkin(1) * t921 - t1021 * t1105, t1015 * t803 - t1048, t1015 * t739 + t1021 * t929, t1015 * t825 + t1021 * t883, t1015 * t802 + t1048, t1015 * t826 + t1021 * t1029, t1021 * t1006 + t1015 * t850, pkin(1) * t774 + t1015 * t827 + t1021 * t734, pkin(1) * t777 + t1015 * t828 + t1021 * t767, pkin(1) * t720 + t1015 * t766 + t1021 * t700, pkin(1) * t772 - t1015 * t1056 + t1021 * t725, t1015 * t704 + t1021 * t822, t1015 * t652 + t1021 * t762, t1015 * t663 + t1021 * t804, t1015 * t703 + t1021 * t820, t1015 * t664 + t1021 * t805, t1015 * t730 + t1021 * t852, pkin(1) * t628 + t1015 * t553 + t1021 * t566, pkin(1) * t630 + t1015 * t557 + t1021 * t572, pkin(1) * t612 + t1015 * t523 + t1021 * t538, pkin(1) * t540 + t1015 * t504 + t1021 * t512, t1015 * t571 + t1021 * t709, t1015 * t524 + t1021 * t653, t1015 * t555 + t1021 * t673, t1015 * t570 + t1021 * t708, t1015 * t556 + t1021 * t674, t1015 * t621 + t1021 * t768, pkin(1) * t522 + t1015 * t480 + t1021 * t485, pkin(1) * t526 + t1015 * t482 + t1021 * t486, pkin(1) * t501 + t1015 * t467 + t1021 * t468, pkin(1) * t484 + t1015 * t474 + t1021 * t458, t1015 * t489 + t1021 * t582, t1015 * t466 + t1021 * t531, t1015 * t475 + t1021 * t560, t1015 * t488 + t1021 * t581, t1015 * t476 + t1021 * t561, t1015 * t520 + t1021 * t634, pkin(1) * t460 + t1015 * t439 + t1021 * t446, pkin(1) * t465 + t1015 * t440 + t1021 * t447, pkin(1) * t452 + t1015 * t434 + t1021 * t436, pkin(1) * t438 + t1015 * t432 + t1021 * t433; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, (t982 - t1046) * t1020, -t1014 * t983 - t1020 * t980, -t1014 * t995 + t979, t1118 * t1014, t1020 * t993 - t1087, 0, (t980 + t1059) * pkin(2), (t983 + t1002) * pkin(2), pkin(2) * t990 - t933, pkin(2) ^ 2 * qJDD(1), -t1014 * t875 + t1020 * t876, -t1014 * t812 + t1020 * t814, -t1014 * t886 + t1020 * t888, -t1014 * t873 + t1020 * t874, -t1014 * t887 + t1020 * t889, -t1014 * t911 + t1020 * t912, pkin(2) * t878 - t1014 * t851 + t1066 * t955, pkin(2) * t1119 - t1014 * t849 + t1062 * t955, pkin(2) * t910 - t1014 * t808 - t1120, (pkin(3) * t1014 + pkin(2)) * t955, -t1014 * t783 + t1020 * t785, -t1014 * t721 + t1020 * t722, -t1014 * t735 + t1020 * t737, -t1014 * t782 + t1020 * t784, -t1014 * t736 + t1020 * t738, -t1014 * t810 + t1020 * t811, pkin(2) * t792 - t1014 * t613 + t1020 * t636, pkin(2) * t795 - t1014 * t616 + t1020 * t637, pkin(2) * t763 - t1014 * t567 + t1020 * t594, pkin(2) * t668 - t1014 * t554 + t1020 * t591, -t1014 * t649 + t1020 * t651, -t1014 * t585 + t1020 * t586, -t1014 * t622 + t1020 * t624, -t1014 * t648 + t1020 * t650, -t1014 * t623 + t1020 * t625, -t1014 * t701 + t1020 * t702, pkin(2) * t659 - t1014 * t507 + t1020 * t535, pkin(2) * t666 - t1014 * t513 + t1020 * t537, pkin(2) * t640 - t1014 * t493 + t1020 * t503, pkin(2) * t597 - t1014 * t502 + t1020 * t536, -t1014 * t542 + t1020 * t544, -t1014 * t496 + t1020 * t497, -t1014 * t514 + t1020 * t516, -t1014 * t541 + t1020 * t543, -t1014 * t515 + t1020 * t517, -t1014 * t579 + t1020 * t580, pkin(2) * t551 - t1014 * t448 + t1020 * t454, pkin(2) * t558 - t1014 * t449 + t1020 * t455, pkin(2) * t527 - t1014 * t442 + t1020 * t445, pkin(2) * t477 - t1014 * t435 + t1020 * t441;];
tauB_reg = t1;
