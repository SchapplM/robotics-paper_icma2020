% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% CloosQRC350OL
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6]';
% 
% Output:
% tau_reg [6x36]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-06-20 08:27
% Revision: 6013df02bda2c1f6ebc95d3649839f696d960e41 (2020-06-19)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = CloosQRC350OL_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'CloosQRC350OL_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'CloosQRC350OL_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'CloosQRC350OL_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'CloosQRC350OL_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'CloosQRC350OL_invdynJ_fixb_regmin_slag_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2020-06-20 08:18:58
% EndTime: 2020-06-20 08:19:29
% DurationCPUTime: 18.60s
% Computational Cost: add. (11655->581), mult. (25515->825), div. (0->0), fcn. (20484->12), ass. (0->283)
t204 = sin(qJ(4));
t376 = sin(qJ(3));
t287 = t376 * qJD(3);
t288 = t376 * qJD(2);
t237 = t288 + t287;
t196 = qJD(2) + qJD(3);
t205 = sin(qJ(2));
t209 = cos(qJ(2));
t377 = cos(qJ(3));
t304 = t377 * t209;
t268 = qJD(1) * t304;
t283 = qJDD(1) * t376;
t284 = qJDD(1) * t377;
t270 = t196 * t268 + t205 * t284 + t209 * t283;
t331 = qJD(1) * t205;
t219 = t237 * t331 - t270;
t398 = qJDD(4) + t219;
t406 = t204 * t398;
t302 = t376 * t205;
t148 = qJD(1) * t302 - t268;
t301 = t376 * t209;
t153 = t377 * t205 + t301;
t149 = t153 * qJD(1);
t203 = sin(qJ(5));
t207 = cos(qJ(5));
t208 = cos(qJ(4));
t337 = t207 * t208;
t105 = t148 * t203 - t149 * t337;
t326 = qJD(5) * t203;
t296 = t204 * t326;
t400 = -t105 + t296;
t390 = -t149 + qJD(4);
t399 = qJD(4) * t390;
t405 = -t204 * t399 + t208 * t398;
t251 = t148 * t204 - t196 * t208;
t391 = qJD(5) - t251;
t124 = -t148 * t208 - t204 * t196;
t92 = t124 * t203 - t207 * t390;
t404 = t391 * t92;
t94 = t207 * t124 + t203 * t390;
t403 = t391 * t94;
t402 = t204 * t390;
t354 = t391 * t203;
t401 = t391 * t207;
t334 = qJD(6) - t92;
t202 = sin(qJ(6));
t206 = cos(qJ(6));
t61 = t202 * t94 + t206 * t391;
t397 = t334 * t61;
t62 = -t202 * t391 + t206 * t94;
t396 = t334 * t62;
t325 = qJD(5) * t206;
t328 = qJD(4) * t207;
t338 = t206 * t208;
t344 = t202 * t204;
t361 = t105 * t206 + t149 * t344 + (qJD(6) + t328) * t338 + (-t203 * t325 + (-qJD(6) * t207 - qJD(4)) * t202) * t204;
t339 = t206 * t207;
t152 = t202 * t208 + t204 * t339;
t341 = t204 * t206;
t360 = t152 * qJD(6) + t390 * t341 + (t337 * qJD(4) - t400) * t202;
t195 = qJDD(2) + qJDD(3);
t118 = t196 * t153;
t90 = -qJD(1) * t118 - t205 * t283 + t209 * t284;
t278 = -t204 * t195 + t208 * t90;
t57 = qJD(4) * t251 + t278;
t395 = qJD(5) * t390 + t57;
t342 = t203 * t208;
t104 = -t207 * t148 - t149 * t342;
t327 = qJD(4) * t208;
t299 = t203 * t327;
t394 = t104 + t299;
t318 = qJD(1) * qJD(2);
t286 = t209 * t318;
t317 = t205 * qJDD(1);
t393 = t286 + t317;
t323 = qJD(5) * t208;
t392 = t203 * t323 + t204 * t328;
t110 = -pkin(4) * t148 - t149 * pkin(5);
t330 = qJD(1) * t209;
t106 = pkin(3) * t330 + t110;
t271 = pkin(3) * t288;
t158 = -t196 * pkin(5) + t271;
t163 = qJD(1) * pkin(2) + pkin(3) * t331;
t102 = pkin(4) * t149 - pkin(5) * t148 + t163;
t281 = t376 * qJDD(2);
t289 = t377 * qJD(3);
t140 = -t195 * pkin(5) + (qJD(2) * t289 + t281) * pkin(3);
t329 = qJD(4) * t204;
t280 = -t102 * t329 + t204 * t140;
t143 = qJDD(1) * pkin(2) + t393 * pkin(3);
t47 = -pkin(4) * t219 + pkin(5) * t90 + t143;
t35 = (qJD(4) * t158 + t47) * t208 + t280;
t389 = -t106 * t391 - t35;
t388 = t251 * t390;
t387 = t124 * t390;
t386 = t400 * pkin(6);
t383 = t208 * t399 + t406;
t324 = qJD(5) * t207;
t290 = t377 * qJD(2);
t272 = pkin(3) * t290;
t99 = -t204 * t110 + t208 * t272;
t382 = -pkin(4) * t324 - t392 * pkin(5) - t203 * t271 + t207 * t99;
t274 = pkin(3) * t289;
t381 = -t208 * t106 + t204 * t274;
t37 = -t124 * t326 + t203 * t398 + t395 * t207;
t380 = t204 * t37 + t94 * t327;
t379 = 0.2e1 * pkin(2);
t378 = pkin(6) * t334;
t375 = pkin(6) * t207;
t374 = g(3) * t204;
t373 = g(3) * t208;
t185 = t205 * pkin(3) + pkin(2);
t372 = pkin(3) * qJD(2);
t321 = qJD(6) * t206;
t322 = qJD(6) * t202;
t279 = -t196 * t329 + t204 * t90;
t58 = (-qJD(4) * t148 + t195) * t208 + t279;
t56 = qJDD(5) + t58;
t17 = t202 * t56 - t206 * t37 + t321 * t391 + t94 * t322;
t371 = t17 * t202;
t38 = t124 * t324 + t395 * t203 - t207 * t398;
t36 = -qJDD(6) + t38;
t370 = t202 * t36;
t369 = t202 * t334;
t368 = t203 * t56;
t78 = t102 * t208 + t158 * t204;
t367 = t203 * t78;
t365 = t206 * t36;
t364 = t207 * t56;
t363 = t37 * t203;
t362 = t57 * t204;
t300 = t203 * t329;
t359 = t203 * t99 + t207 * t271 - pkin(4) * t326 + (t207 * t323 - t300) * pkin(5);
t358 = qJD(4) * t94;
t154 = t304 - t302;
t111 = pkin(4) * t153 + pkin(5) * t154 + t185;
t356 = t111 * t208;
t355 = t118 * t204;
t352 = t251 * t207;
t351 = t124 * t208;
t350 = t148 * t149;
t349 = t149 * t204;
t348 = t154 * t204;
t347 = t154 * t208;
t159 = t196 * pkin(4) + t272;
t346 = t159 * t204;
t345 = t159 * t208;
t343 = t203 * t204;
t340 = t204 * t207;
t211 = qJD(1) ^ 2;
t335 = t209 * t211;
t183 = pkin(3) * t376 - pkin(5);
t313 = t377 * pkin(3);
t184 = t313 + pkin(4);
t333 = t183 * t337 + t203 * t184;
t198 = t209 ^ 2;
t332 = t205 ^ 2 - t198;
t320 = t159 * qJD(4);
t316 = t209 * qJDD(1);
t199 = qJ(2) + qJ(3);
t192 = cos(t199);
t315 = t192 * t374;
t314 = t192 * t373;
t312 = t209 * t372;
t119 = (t290 + t289) * t209 - t237 * t205;
t70 = pkin(4) * t119 - pkin(5) * t118 + t312;
t311 = t70 * t343;
t309 = t192 * t344;
t308 = t192 * t341;
t306 = -pkin(5) - t375;
t305 = t377 * t196;
t303 = t376 * t196;
t297 = t207 * t327;
t294 = t204 * t324;
t293 = t204 * t320;
t292 = t208 * t320;
t191 = sin(t199);
t187 = qJDD(2) * t313;
t139 = t195 * pkin(4) - qJD(3) * t271 + t187;
t252 = t208 * t140 - t204 * t47;
t34 = -qJD(4) * t78 + t252;
t79 = -t102 * t204 + t158 * t208;
t65 = t159 * t203 + t207 * t79;
t24 = -qJD(5) * t65 + t207 * t139 - t203 * t34;
t291 = -g(3) * (-t191 * t207 - t192 * t342) + t24;
t285 = t183 - t375;
t282 = t334 ^ 2;
t277 = t206 * t334;
t276 = g(3) * t192 + t163 * t149;
t273 = pkin(3) * t287;
t269 = -t35 + t315;
t144 = t285 * t204;
t190 = pkin(6) * t329;
t254 = t208 * t274;
t215 = -t392 * t183 + t184 * t324 - t203 * t273 + t207 * t254;
t267 = qJD(6) * t144 + (pkin(6) * t149 - t106 * t207) * t204 - t190 - t215;
t244 = -t118 * t208 - t154 * t329;
t43 = (-t154 * t323 - t119) * t203 + (-qJD(5) * t153 + t244) * t207;
t265 = qJD(6) * t348 - t43;
t125 = -pkin(6) * t208 + t333;
t264 = qJD(6) * t125 + t285 * t327 + t381 + t386;
t156 = t306 * t204;
t263 = pkin(6) * t349 + qJD(6) * t156 - t190 + t382;
t193 = t203 * pkin(4);
t146 = t193 + (-pkin(5) * t207 - pkin(6)) * t208;
t98 = t208 * t110 + t204 * t272;
t262 = qJD(6) * t146 + t306 * t327 + t386 - t98;
t261 = g(3) * t191 + t163 * t148 + t187;
t260 = -t105 - t297;
t259 = t104 + t294;
t258 = -pkin(6) * t154 - t111 * t207;
t15 = pkin(6) * t37 + t35;
t23 = t203 * t139 + t159 * t324 + t207 * t34 - t326 * t79;
t16 = -pkin(6) * t56 + t23;
t257 = t202 * t15 - t206 * t16;
t109 = -t153 * t203 + t154 * t337;
t67 = pkin(6) * t109 + t356;
t83 = t258 * t204;
t256 = t202 * t83 + t206 * t67;
t255 = t202 * t67 - t206 * t83;
t136 = -t191 * t337 - t192 * t203;
t250 = -g(3) * t136 - t78 * t104 + t24 * t208;
t249 = -t321 * t334 + t370;
t248 = -t322 * t334 - t365;
t247 = t324 * t391 + t368;
t246 = t326 * t391 - t364;
t245 = t327 * t154 - t355;
t64 = t159 * t207 - t203 * t79;
t243 = -g(3) * (t136 * t202 - t191 * t341) + t24 * t152 + t361 * t64;
t241 = pkin(6) * t36;
t240 = pkin(6) * t94 + t78;
t239 = -g(3) * (t191 * t342 - t192 * t207) + t400 * t78 + (t329 - t349) * t65;
t238 = -t324 * t78 - t390 * t64;
t236 = t259 + t299;
t235 = t202 * t240;
t18 = t202 * t37 - t391 * t322 + (qJD(6) * t94 + t56) * t206;
t234 = qJD(6) * t109 + t245;
t151 = t202 * t340 - t338;
t50 = -pkin(6) * t391 + t65;
t30 = t202 * t50 + t206 * t240;
t6 = -qJD(6) * t235 + t206 * t15 + t202 * t16 + t50 * t321;
t231 = -g(3) * (-t136 * t206 - t191 * t344) + t24 * t151 + t6 * t343 + t360 * t64 + (t294 + t394) * t30;
t230 = t139 * t208 + t78 * t148 + t149 * t346 + t191 * t373 - t293;
t227 = t208 * t390;
t226 = t390 * t148;
t218 = -t139 * t204 + t79 * t148 + t149 * t345 - t191 * t374 - t292;
t210 = qJD(2) ^ 2;
t155 = pkin(4) * t207 + pkin(5) * t342;
t138 = -t191 * t203 + t192 * t337;
t131 = -t183 * t342 + t184 * t207;
t108 = t207 * t153 + t154 * t342;
t96 = t148 ^ 2 - t149 ^ 2;
t84 = (-t183 * t323 - t273) * t207 + (-qJD(5) * t184 + t183 * t329 - t254) * t203;
t82 = -t109 * t206 + t154 * t344;
t81 = t109 * t202 + t154 * t341;
t76 = t124 * t202 - t251 * t339;
t75 = t124 * t206 + t202 * t352;
t69 = -t148 * t196 + t219;
t68 = t149 * t196 + t90;
t55 = pkin(6) * t352 + t79;
t53 = -pkin(6) * t124 - t207 * t78;
t44 = qJD(5) * t109 - t118 * t342 + t207 * t119 - t154 * t300;
t42 = -t124 * t148 + t149 * t227 - t383;
t41 = -t148 * t251 - t149 * t402 - t405;
t40 = -t351 * t390 - t362;
t39 = t56 * t208 - t391 * t402;
t33 = t258 * t327 + (pkin(6) * t118 + t111 * t326 - t207 * t70) * t204;
t31 = t206 * t50 - t235;
t27 = pkin(6) * t43 - t111 * t329 + t208 * t70;
t26 = -t202 * t265 + t206 * t234;
t25 = t202 * t234 + t206 * t265;
t19 = (-t57 - t388) * t208 + (t58 + t387) * t204;
t14 = -t37 * t340 + (t260 + t296) * t94;
t11 = t236 * t334 - t343 * t36;
t10 = -t208 * t38 + t394 * t391 + (t390 * t92 + t247) * t204;
t9 = t208 * t37 + t260 * t391 + (-t390 * t94 + t246) * t204;
t8 = t17 * t152 - t361 * t62;
t7 = t104 * t94 + t105 * t92 + (t203 * t94 + t207 * t92) * t327 + (t363 + t207 * t38 + (-t203 * t92 + t207 * t94) * qJD(5)) * t204;
t5 = t30 * qJD(6) + t257;
t3 = t151 * t36 + t18 * t343 + t236 * t61 - t334 * t360;
t2 = -t152 * t36 + t17 * t343 - t236 * t62 + t334 * t361;
t1 = -t151 * t17 + t152 * t18 + t360 * t62 + t361 * t61;
t4 = [qJDD(1), qJDD(1) * t198 - 0.2e1 * t205 * t286, -0.2e1 * t205 * t316 + 0.2e1 * t318 * t332, qJDD(2) * t209 - t205 * t210, -qJDD(2) * t205 - t209 * t210, 0, t393 * t379, (-t205 * t318 + t316) * t379, t118 * t148 + t154 * t90, t118 * t149 + t119 * t148 - t153 * t90 + t154 * t219, -t118 * t196 + t154 * t195, -t119 * t196 - t153 * t195, 0, t119 * t163 + t143 * t153 + t149 * t312 - t185 * t219, -t118 * t163 + t143 * t154 - t148 * t312 + t185 * t90, t124 * t244 + t347 * t57, -(-t124 * t204 + t208 * t251) * t118 + (-t362 - t208 * t58 + (-t204 * t251 - t351) * qJD(4)) * t154, -t118 * t227 - t124 * t119 - t57 * t153 + t154 * t405, t118 * t402 - t119 * t251 + t58 * t153 - t383 * t154, -(qJDD(4) - t270) * t153 - qJD(4) * t119 + (t119 * t301 + (t119 * t377 - t153 * t237) * t205) * qJD(1), -t111 * t405 - t118 * t346 + t78 * t119 + t139 * t348 + t35 * t153 + t154 * t292 - t227 * t70, t111 * t406 - t118 * t345 + t79 * t119 + t139 * t347 + t34 * t153 - t154 * t293 + t356 * t399 + t402 * t70, t109 * t37 + t43 * t94, -t108 * t37 - t109 * t38 - t43 * t92 - t44 * t94, t109 * t56 + t380 * t154 - t94 * t355 + t391 * t43, t92 * t355 - t108 * t56 - t391 * t44 + (-t204 * t38 - t92 * t327) * t154, t245 * t391 + t348 * t56, t108 * t35 + t44 * t78 + (t111 * t38 + t70 * t92 + (t111 * t354 + t154 * t64) * qJD(4)) * t208 + (t70 * t354 - t118 * t64 + t154 * t24 + (-qJD(4) * t92 + t247) * t111) * t204, t109 * t35 + t43 * t78 + (t111 * t37 + t70 * t94 + (t111 * t401 - t154 * t65) * qJD(4)) * t208 + (t70 * t401 + t118 * t65 - t154 * t23 + (-t246 - t358) * t111) * t204, t17 * t82 - t25 * t62, t17 * t81 + t18 * t82 + t25 * t61 - t26 * t62, -t108 * t17 + t25 * t334 - t36 * t82 + t44 * t62, -t108 * t18 + t26 * t334 - t36 * t81 - t44 * t61, t108 * t36 - t334 * t44, (-qJD(6) * t255 + t202 * t33 + t206 * t27) * t334 - t256 * t36 - t6 * t108 - t30 * t44 - t61 * t311 - t24 * t81 - t64 * t26 + (-t61 * t294 + (-t18 * t204 - t327 * t61) * t203) * t111, -(qJD(6) * t256 + t202 * t27 - t206 * t33) * t334 + t255 * t36 + t5 * t108 - t31 * t44 - t62 * t311 + t24 * t82 + t64 * t25 + (-t62 * t294 + (t17 * t204 - t327 * t62) * t203) * t111; 0, t205 * t335, -t332 * t211, t316, -t317, qJDD(2), -pkin(2) * t335 + g(3) * t205, pkin(2) * t205 * t211 + g(3) * t209, -t350, t96, t68, t69, t195, (-t149 * t330 + t377 * t195 + (-t288 - t303) * qJD(3)) * pkin(3) + t261, (t148 * t330 - t281 - t376 * t195 + (-t290 - t305) * qJD(3)) * pkin(3) + t276, t40, t19, t42, t41, -t226, t106 * t227 - t383 * t183 + t184 * t58 + t251 * t273 - t274 * t402 + t230, -t106 * t402 - t124 * t273 - t183 * t405 + t184 * t57 - t254 * t390 + t218, t14, t7, t9, t10, t39, t84 * t391 + t131 * t56 + (-t106 * t92 + (t183 * t92 - t367) * qJD(4)) * t208 + (t183 * t38 + t389 * t203 + t92 * t274 + t238) * t204 + t250, t380 * t183 - t23 * t208 - t215 * t391 - t297 * t78 - t333 * t56 + t389 * t340 + t381 * t94 + t239, t8, t1, t2, t3, t11, -(t125 * t202 + t144 * t206) * t36 - t131 * t18 - (t202 * t267 - t206 * t264) * t334 + (t106 * t343 - t84) * t61 + t231, (-t125 * t206 + t144 * t202) * t36 - t84 * t62 + t131 * t17 - (t202 * t264 + t206 * t267) * t334 + t259 * t31 + (t31 * t327 + (t106 * t62 - t5) * t204) * t203 + t243; 0, 0, 0, 0, 0, 0, 0, 0, -t350, t96, t68, t69, t195, (-t287 + t303) * t372 + t261, (-t281 + (-t289 + t305) * qJD(2)) * pkin(3) + t276, t40, t19, t42, t41, -t226, pkin(4) * t58 + t383 * pkin(5) - t251 * t271 + t390 * t98 + t230, pkin(4) * t57 + pkin(5) * t405 + t124 * t271 + t390 * t99 + t218, t14, t7, t9, t10, t39, t155 * t56 - t92 * t98 + t359 * t391 + (-pkin(5) * t92 - t367) * t327 + (-pkin(5) * t38 - t35 * t203 + t238) * t204 + t250, -t193 * t56 - t98 * t94 + (-pkin(5) * t37 - t35 * t207) * t204 + t382 * t391 + (-t78 * t328 - t23 + (-t358 + t364) * pkin(5)) * t208 + t239, t8, t1, t2, t3, t11, -(t146 * t202 + t156 * t206) * t36 - t155 * t18 - (t202 * t263 - t206 * t262) * t334 - t359 * t61 + t231, (-t146 * t206 + t156 * t202) * t36 - t5 * t343 + t155 * t17 - (t202 * t262 + t206 * t263) * t334 - t359 * t62 + t236 * t31 + t243; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t124 * t251, t124 ^ 2 - t251 ^ 2, t148 * t329 - t196 * t327 + t278 - t388, t148 * t327 - t208 * t195 - t279 + t387, t398, -t159 * t124 - t158 * t327 - t208 * t47 + t390 * t79 - t280 + t315, t102 * t327 + t158 * t329 - t159 * t251 - t390 * t78 - t252 + t314, t401 * t94 + t363, (t37 - t404) * t207 + (-t38 - t403) * t203, -t94 * t124 + t391 * t401 + t368, t92 * t124 - t354 * t391 + t364, -t391 * t124, -t124 * t64 + t207 * t269 - t79 * t92, t124 * t65 - t203 * t269 - t79 * t94, -t17 * t206 * t203 + (-t203 * t322 + t206 * t324 + t76) * t62, -t61 * t76 + t62 * t75 + (-t202 * t62 - t206 * t61) * t324 + (t371 - t18 * t206 + (t202 * t61 - t206 * t62) * qJD(6)) * t203, -t76 * t334 + (-t325 * t334 + t17) * t207 + (t391 * t62 - t248) * t203, -t75 * t334 + (qJD(5) * t369 + t18) * t207 + (-t391 * t61 - t249) * t203, -t36 * t207 - t334 * t354, -(t202 * t53 + t206 * t55) * t334 + t64 * t75 - t202 * t314 + (-g(3) * t308 + t6 + (-t202 * t64 + t206 * t378) * qJD(5)) * t207 + (pkin(6) * t248 - t202 * t24 - t30 * t391 - t321 * t64 + t78 * t61) * t203, (t202 * t55 - t206 * t53) * t334 - t64 * t76 - t206 * t314 + (g(3) * t309 - t5 + (-pkin(6) * t369 - t206 * t64) * qJD(5)) * t207 + (pkin(6) * t249 - t24 * t206 - t31 * t391 + t322 * t64 + t78 * t62) * t203; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t94 * t92, -t92 ^ 2 + t94 ^ 2, t37 + t404, -t38 + t403, t56, t391 * t65 - t78 * t94 + t291, g(3) * t138 + t391 * t64 + t78 * t92 - t23, -t277 * t62 + t371, (t17 + t397) * t206 + (t18 + t396) * t202, t277 * t334 - t62 * t94 - t370, -t202 * t282 + t61 * t94 - t365, t334 * t94, t30 * t94 - t65 * t61 + (-pkin(6) * t282 - t291) * t206 + t241 * t202, t31 * t94 - t65 * t62 + t241 * t206 + (t334 * t378 + t291) * t202; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62 * t61, -t61 ^ 2 + t62 ^ 2, t17 - t397, t18 - t396, -t36, -t31 * t334 + t64 * t62 - g(3) * (t138 * t202 + t308) + t6, -t64 * t61 - g(3) * (t138 * t206 - t309) - t257 + (t334 - qJD(6)) * t30;];
tau_reg = t4;
