% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% CloosQRC350OL
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-06-20 08:27
% Revision: 6013df02bda2c1f6ebc95d3649839f696d960e41 (2020-06-19)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = CloosQRC350OL_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'CloosQRC350OL_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'CloosQRC350OL_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'CloosQRC350OL_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'CloosQRC350OL_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'CloosQRC350OL_invdynJ_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-06-20 08:19:04
% EndTime: 2020-06-20 08:19:36
% DurationCPUTime: 19.76s
% Computational Cost: add. (50482->504), mult. (103057->765), div. (0->0), fcn. (79840->10), ass. (0->352)
t321 = qJDD(2) + qJDD(3);
t329 = sin(qJ(2));
t333 = cos(qJ(3));
t328 = sin(qJ(3));
t334 = cos(qJ(2));
t381 = t334 * t328;
t300 = (-t329 * t333 - t381) * qJD(1);
t382 = t333 * t334;
t416 = -t328 * t329 + t382;
t302 = t416 * qJD(1);
t402 = t302 * t300;
t274 = t321 + t402;
t431 = t274 * t333;
t326 = sin(qJ(5));
t322 = qJD(2) + qJD(3);
t327 = sin(qJ(4));
t332 = cos(qJ(4));
t287 = t332 * t302 - t327 * t322;
t297 = qJD(4) + t300;
t331 = cos(qJ(5));
t262 = t326 * t287 - t331 * t297;
t264 = t331 * t287 + t326 * t297;
t227 = t264 * t262;
t376 = qJD(1) * qJD(2);
t364 = t334 * t376;
t375 = t329 * qJDD(1);
t308 = -t364 - t375;
t318 = t334 * qJDD(1);
t365 = t329 * t376;
t309 = t318 - t365;
t267 = t300 * qJD(3) + t328 * t308 + t333 * t309;
t355 = t327 * t267 + t332 * t321;
t233 = -t287 * qJD(4) - t355;
t232 = qJDD(5) - t233;
t420 = -t227 + t232;
t430 = t326 * t420;
t429 = t331 * t420;
t401 = t322 * t300;
t428 = t267 + t401;
t427 = -t308 + t364;
t325 = sin(qJ(6));
t285 = t327 * t302 + t332 * t322;
t234 = -t285 * qJD(4) + t332 * t267 - t327 * t321;
t362 = -t333 * t308 + t328 * t309;
t266 = -t302 * qJD(3) - t362;
t265 = qJDD(4) + t266;
t363 = t326 * t234 - t331 * t265;
t182 = -t264 * qJD(5) - t363;
t181 = qJDD(6) + t182;
t282 = qJD(5) + t285;
t330 = cos(qJ(6));
t239 = t325 * t264 + t330 * t282;
t240 = t330 * t264 - t325 * t282;
t411 = t239 * t240;
t341 = t181 - t411;
t426 = t325 * t341;
t405 = t287 * t285;
t342 = t265 - t405;
t425 = t327 * t342;
t424 = t330 * t341;
t423 = t332 * t342;
t289 = qJDD(1) * pkin(2) + t427 * pkin(3);
t194 = t428 * pkin(5) + (t322 * t302 - t266) * pkin(4) + t289;
t336 = qJD(1) ^ 2;
t380 = t334 * t336;
t312 = pkin(2) * t380 - t329 * g(3);
t314 = t329 * t380;
t361 = qJDD(2) - t314;
t338 = t361 * pkin(3) - t312;
t415 = pkin(2) * t336;
t311 = t334 * g(3) + t329 * t415;
t335 = qJD(2) ^ 2;
t323 = t329 ^ 2;
t398 = t323 * t336;
t294 = (-t335 - t398) * pkin(3) - t311;
t383 = t333 * t294;
t269 = t328 * t338 + t383;
t276 = -t300 * pkin(4) + t302 * pkin(5);
t320 = t322 ^ 2;
t221 = -t320 * pkin(4) - t321 * pkin(5) + t300 * t276 + t269;
t161 = -t327 * t194 + t332 * t221;
t268 = t328 * t294 - t333 * t338;
t220 = -t321 * pkin(4) + t320 * pkin(5) + t302 * t276 + t268;
t132 = t326 * t161 + t331 * t220;
t133 = t331 * t161 - t326 * t220;
t422 = t326 * t132 + t331 * t133;
t356 = -t331 * t234 - t326 * t265;
t183 = -t262 * qJD(5) - t356;
t246 = t282 * t262;
t169 = t183 - t246;
t138 = t240 * qJD(6) + t325 * t183 + t330 * t232;
t257 = -qJD(6) + t262;
t208 = t257 * t240;
t421 = t208 + t138;
t419 = -t232 - t227;
t261 = t264 ^ 2;
t281 = t282 ^ 2;
t418 = t261 + t281;
t273 = t297 * t285;
t417 = -t273 + t234;
t166 = (qJD(5) - t282) * t264 + t363;
t237 = t239 ^ 2;
t238 = t240 ^ 2;
t256 = t257 ^ 2;
t260 = t262 ^ 2;
t283 = t285 ^ 2;
t284 = t287 ^ 2;
t296 = t297 ^ 2;
t298 = t300 ^ 2;
t299 = t302 ^ 2;
t160 = t332 * t194 + t327 * t221;
t339 = pkin(6) * t169 + t160;
t94 = pkin(6) * t419 + t133;
t49 = t325 * t94 + t330 * t339;
t127 = pkin(6) * t418 + t132;
t397 = t325 * t127;
t179 = -t256 - t237;
t93 = t325 * t179 + t424;
t60 = pkin(6) * t93 + t397;
t414 = t326 * t60 + t331 * t49;
t50 = -t325 * t339 + t330 * t94;
t184 = -t238 - t256;
t140 = -t181 - t411;
t396 = t325 * t140;
t100 = t330 * t184 + t396;
t389 = t330 * t127;
t64 = pkin(6) * t100 + t389;
t413 = t326 * t64 + t331 * t50;
t412 = t160 * t332;
t410 = t239 * t257;
t409 = t257 * t325;
t408 = t257 * t330;
t407 = t282 * t326;
t406 = t282 * t331;
t404 = t297 * t327;
t403 = t297 * t332;
t400 = t322 * t328;
t399 = t322 * t333;
t152 = t326 * t160;
t395 = t326 * t419;
t394 = t327 * t160;
t393 = t327 * t220;
t223 = -t265 - t405;
t392 = t327 * t223;
t391 = t327 * t331;
t388 = t330 * t140;
t153 = t331 * t160;
t387 = t331 * t419;
t386 = t331 * t332;
t385 = t332 * t220;
t384 = t332 * t223;
t377 = qJD(5) + t282;
t374 = t328 * t405;
t373 = t333 * t405;
t372 = t326 * t411;
t371 = t327 * t227;
t370 = t331 * t411;
t369 = t332 * t227;
t368 = -pkin(4) * t333 - pkin(3);
t58 = t332 * t422 + t394;
t78 = t331 * t132 - t326 * t133;
t367 = -pkin(4) * t78 - pkin(5) * t58;
t98 = t332 * t161 + t394;
t366 = -pkin(4) * t220 - pkin(5) * t98;
t139 = t239 * qJD(6) - t330 * t183 + t325 * t232;
t20 = -t325 * t50 + t330 * t49;
t21 = t325 * t49 + t330 * t50;
t118 = -t139 - t410;
t360 = t118 * t325 - t330 * t421;
t359 = t325 * t184 - t388;
t358 = -t330 * t179 + t426;
t357 = -t161 * t327 + t412;
t354 = t268 * t333 - t269 * t328;
t170 = t183 + t246;
t108 = -t166 * t326 - t331 * t170;
t110 = -t166 * t331 + t326 * t170;
t201 = t260 + t261;
t83 = t332 * t110 - t327 * t201;
t353 = pkin(4) * t108 - pkin(5) * t83 - t327 * t78;
t247 = -t296 - t283;
t189 = t332 * t247 - t425;
t211 = (qJD(4) + t297) * t287 + t355;
t352 = pkin(4) * t211 - pkin(5) * t189 - t385;
t253 = -t284 - t296;
t192 = -t327 * t253 + t384;
t351 = pkin(4) * t417 - pkin(5) * t192 + t393;
t217 = -t281 - t260;
t144 = t326 * t217 + t429;
t145 = t331 * t217 - t430;
t167 = -t377 * t264 - t363;
t91 = t332 * t145 - t327 * t167;
t350 = pkin(4) * t144 - pkin(5) * t91 - t332 * t132 - t326 * t394;
t349 = t139 - t410;
t249 = (-qJD(3) + t322) * t302 - t362;
t24 = -t326 * t49 + t331 * t60;
t117 = -t208 + t138;
t53 = t326 * t117 + t331 * t358;
t27 = t327 * t93 + t332 * t53;
t52 = -t331 * t117 + t326 * t358;
t61 = -pkin(6) * t358 + t389;
t348 = pkin(4) * t52 - pkin(5) * t27 - t327 * t24 + t332 * t61;
t25 = -t326 * t50 + t331 * t64;
t56 = -t326 * t349 + t331 * t359;
t29 = t100 * t327 + t332 * t56;
t55 = t326 * t359 + t331 * t349;
t63 = -pkin(6) * t359 - t397;
t347 = pkin(4) * t55 - pkin(5) * t29 - t327 * t25 + t332 * t63;
t215 = t273 + t234;
t343 = (-qJD(4) + t297) * t287 - t355;
t175 = t327 * t215 + t332 * t343;
t243 = -t283 - t284;
t346 = pkin(4) * t243 - pkin(5) * t175 - t98;
t12 = -pkin(6) * t360 - t21;
t66 = t330 * t118 + t325 * t421;
t13 = pkin(6) * t66 + t20;
t178 = -t237 - t238;
t38 = -t326 * t178 + t331 * t360;
t18 = t327 * t66 + t332 * t38;
t37 = t331 * t178 + t326 * t360;
t345 = pkin(4) * t37 - pkin(5) * t18 + t332 * t12 - t13 * t391;
t147 = -t331 * t418 + t395;
t148 = t326 * t418 + t387;
t171 = t377 * t262 + t356;
t96 = t332 * t148 - t327 * t171;
t344 = pkin(4) * t147 - pkin(5) * t96 - t332 * t133 - t327 * t153;
t15 = -t127 * t331 + t21 * t326;
t16 = t127 * t326 + t21 * t331;
t6 = t16 * t332 + t20 * t327;
t340 = -pkin(5) * t6 + pkin(4) * t15 + (-t20 * t391 - t21 * t332) * pkin(6);
t337 = t334 * (pkin(4) * t328 + pkin(5) * t333) - t329 * (pkin(5) * t328 + t368) + pkin(2);
t324 = t334 ^ 2;
t310 = t318 - 0.2e1 * t365;
t307 = 0.2e1 * t364 + t375;
t291 = -t299 + t320;
t290 = t298 - t320;
t277 = t299 - t298;
t275 = -t402 + t321;
t272 = -t284 + t296;
t271 = t283 - t296;
t270 = -t298 - t299;
t254 = t284 - t283;
t252 = -t401 + t267;
t248 = (qJD(3) + t322) * t302 + t362;
t245 = -t261 + t281;
t244 = t260 - t281;
t229 = (-t285 * t332 + t287 * t327) * t297;
t228 = (t285 * t327 + t287 * t332) * t297;
t226 = t261 - t260;
t207 = t332 * t234 - t287 * t404;
t206 = -t327 * t234 - t287 * t403;
t205 = -t327 * t233 + t285 * t403;
t204 = -t332 * t233 - t285 * t404;
t203 = -t238 + t256;
t202 = t237 - t256;
t200 = t332 * t271 + t392;
t199 = -t327 * t272 + t423;
t198 = -t327 * t271 + t384;
t197 = -t332 * t272 - t425;
t196 = (-t262 * t331 + t264 * t326) * t282;
t195 = (-t262 * t326 - t264 * t331) * t282;
t191 = -t332 * t253 - t392;
t190 = t238 - t237;
t188 = -t327 * t247 - t423;
t177 = t332 * t196 + t327 * t232;
t176 = -t327 * t196 + t332 * t232;
t174 = -t332 * t211 - t327 * t417;
t173 = t332 * t215 - t327 * t343;
t172 = t327 * t211 - t332 * t417;
t165 = t331 * t244 + t395;
t164 = -t326 * t245 + t429;
t163 = t326 * t244 - t387;
t162 = t331 * t245 + t430;
t159 = (t239 * t330 - t240 * t325) * t257;
t158 = (-t239 * t325 - t240 * t330) * t257;
t157 = t331 * t183 - t264 * t407;
t156 = t326 * t183 + t264 * t406;
t155 = -t326 * t182 + t262 * t406;
t154 = t331 * t182 + t262 * t407;
t151 = pkin(5) * t191 - t385;
t149 = pkin(5) * t188 - t393;
t137 = t332 * t157 + t371;
t136 = t332 * t155 - t371;
t135 = -t327 * t157 + t369;
t134 = -t327 * t155 - t369;
t129 = -pkin(4) * t191 - t161;
t128 = -pkin(4) * t188 - t160;
t126 = t331 * t159 - t326 * t181;
t125 = t326 * t159 + t331 * t181;
t124 = -t330 * t202 - t396;
t123 = t325 * t203 - t424;
t122 = t325 * t202 - t388;
t121 = t330 * t203 + t426;
t114 = -t330 * t139 + t240 * t409;
t113 = t325 * t139 + t240 * t408;
t112 = t325 * t138 - t239 * t408;
t111 = -t330 * t138 - t239 * t409;
t109 = t331 * t167 - t326 * t169;
t107 = t326 * t167 + t331 * t169;
t105 = t332 * t165 - t327 * t166;
t104 = t332 * t164 + t327 * t170;
t103 = -t327 * t165 - t332 * t166;
t102 = -t327 * t164 + t332 * t170;
t95 = -t327 * t148 - t332 * t171;
t90 = -t327 * t145 - t332 * t167;
t89 = t332 * t109 + t327 * t226;
t88 = -t327 * t109 + t332 * t226;
t87 = t331 * t114 - t372;
t86 = t331 * t112 + t372;
t85 = t326 * t114 + t370;
t84 = t326 * t112 - t370;
t82 = -t327 * t110 - t332 * t201;
t81 = t332 * t126 + t327 * t158;
t80 = -t327 * t126 + t332 * t158;
t74 = -pkin(4) * t95 + t152;
t73 = -pkin(4) * t90 - t153;
t72 = t331 * t124 - t326 * t421;
t71 = t326 * t118 + t331 * t123;
t70 = t326 * t124 + t331 * t421;
t69 = -t331 * t118 + t326 * t123;
t68 = -t330 * t117 + t325 * t349;
t67 = t325 * t117 + t330 * t349;
t46 = -t190 * t326 + t331 * t68;
t45 = t190 * t331 + t326 * t68;
t44 = t113 * t327 + t332 * t87;
t43 = -t111 * t327 + t332 * t86;
t42 = t113 * t332 - t327 * t87;
t41 = -t111 * t332 - t327 * t86;
t40 = pkin(5) * t95 - t133 * t327 + t160 * t386;
t39 = pkin(5) * t90 - t132 * t327 + t332 * t152;
t35 = -pkin(4) * t82 + t422;
t34 = pkin(5) * t82 + t332 * t78;
t33 = t122 * t327 + t332 * t72;
t32 = t121 * t327 + t332 * t71;
t31 = t122 * t332 - t327 * t72;
t30 = t121 * t332 - t327 * t71;
t28 = t100 * t332 - t327 * t56;
t26 = -t327 * t53 + t332 * t93;
t23 = t327 * t67 + t332 * t46;
t22 = -t327 * t46 + t332 * t67;
t19 = t326 * pkin(6) * t20;
t17 = -t327 * t38 + t332 * t66;
t11 = t326 * t13;
t10 = -pkin(4) * t28 + t413;
t9 = -pkin(4) * t26 + t414;
t8 = pkin(5) * t28 + t25 * t332 + t327 * t63;
t7 = pkin(5) * t26 + t24 * t332 + t327 * t61;
t5 = -t16 * t327 + t20 * t332;
t4 = -pkin(4) * t17 + t11;
t3 = -pkin(4) * t5 + t19;
t2 = pkin(5) * t17 + t12 * t327 + t13 * t386;
t1 = pkin(5) * t5 + (t20 * t386 - t21 * t327) * pkin(6);
t14 = [0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, (t309 - t365) * t334, -t307 * t334 - t310 * t329, t334 * t361 - t329 * (-t324 * t336 + t335), t427 * t329, t334 * (-t335 + t398) - t329 * (qJDD(2) + t314), 0, (t307 + t375) * pkin(2), (t310 + t318) * pkin(2), t329 * t311 + t334 * t312 + (-t323 - t324) * t415, pkin(2) ^ 2 * qJDD(1), t334 * (t267 * t333 - t302 * t400) - t329 * (t267 * t328 + t302 * t399), t334 * (-t248 * t333 - t328 * t428) - t329 * (-t248 * t328 + t333 * t428), t334 * (-t291 * t328 + t431) - t329 * (t274 * t328 + t291 * t333), t334 * (-t266 * t328 - t300 * t399) - t329 * (t266 * t333 - t300 * t400), t334 * (-t328 * t275 + t290 * t333) - t329 * (t275 * t333 + t290 * t328), (t334 * (t300 * t333 + t302 * t328) - t329 * (t300 * t328 - t302 * t333)) * t322, t289 * t381 - t329 * (-pkin(3) * t248 - t289 * t333) + pkin(2) * t248, t289 * t382 - t329 * (-pkin(3) * t428 + t289 * t328) + pkin(2) * t428, t334 * t354 - t329 * (-pkin(3) * t270 + t268 * t328 + t269 * t333) + pkin(2) * t270, (t329 * pkin(3) + pkin(2)) * t289, t334 * (t207 * t333 - t374) - t329 * (t207 * t328 + t373), t334 * (t174 * t333 - t254 * t328) - t329 * (t174 * t328 + t254 * t333), t334 * (t199 * t333 - t215 * t328) - t329 * (t199 * t328 + t215 * t333), t334 * (t205 * t333 + t374) - t329 * (t205 * t328 - t373), t334 * (t200 * t333 - t328 * t343) - t329 * (t200 * t328 + t333 * t343), t334 * (t229 * t333 - t265 * t328) - t329 * (t229 * t328 + t265 * t333), t334 * (-t128 * t328 + t149 * t333) - t329 * (-pkin(3) * t188 + t128 * t333 + t149 * t328) + pkin(2) * t188, t334 * (-t129 * t328 + t151 * t333) - t329 * (-pkin(3) * t191 + t129 * t333 + t151 * t328) + pkin(2) * t191, t416 * (pkin(5) * t173 + t357) + (pkin(4) * t381 - t329 * t368 + pkin(2)) * t173, t337 * t357, t334 * (t137 * t333 - t156 * t328) - t329 * (t137 * t328 + t156 * t333), t334 * (-t107 * t328 + t333 * t89) - t329 * (t107 * t333 + t328 * t89), t334 * (t104 * t333 - t162 * t328) - t329 * (t104 * t328 + t162 * t333), t334 * (t136 * t333 - t154 * t328) - t329 * (t136 * t328 + t154 * t333), t334 * (t105 * t333 - t163 * t328) - t329 * (t105 * t328 + t163 * t333), t334 * (t177 * t333 - t195 * t328) - t329 * (t177 * t328 + t195 * t333), t334 * (-t328 * t73 + t333 * t39) - t329 * (-pkin(3) * t90 + t328 * t39 + t333 * t73) + pkin(2) * t90, t334 * (-t328 * t74 + t333 * t40) - t329 * (-pkin(3) * t95 + t328 * t40 + t333 * t74) + pkin(2) * t95, t334 * (-t328 * t35 + t333 * t34) - t329 * (-pkin(3) * t82 + t328 * t34 + t333 * t35) + pkin(2) * t82, t337 * (-t327 * t422 + t412), t334 * (-t328 * t85 + t333 * t44) - t329 * (t328 * t44 + t333 * t85), t334 * (t23 * t333 - t328 * t45) - t329 * (t23 * t328 + t333 * t45), t334 * (t32 * t333 - t328 * t69) - t329 * (t32 * t328 + t333 * t69), t334 * (-t328 * t84 + t333 * t43) - t329 * (t328 * t43 + t333 * t84), t334 * (-t328 * t70 + t33 * t333) - t329 * (t328 * t33 + t333 * t70), t334 * (-t125 * t328 + t333 * t81) - t329 * (t125 * t333 + t328 * t81), t334 * (-t328 * t9 + t333 * t7) - t329 * (-pkin(3) * t26 + t328 * t7 + t333 * t9) + pkin(2) * t26, t334 * (-t10 * t328 + t333 * t8) - t329 * (-pkin(3) * t28 + t10 * t333 + t328 * t8) + pkin(2) * t28, t334 * (t2 * t333 - t328 * t4) - t329 * (-pkin(3) * t17 + t2 * t328 + t333 * t4) + pkin(2) * t17, t334 * (t1 * t333 - t3 * t328) - t329 * (-pkin(3) * t5 + t1 * t328 + t3 * t333) + pkin(2) * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t314, (-t323 + t324) * t336, t318, -t314, -t375, qJDD(2), -t312, t311, 0, 0, -t402, t277, t252, t402, t249, t321, pkin(3) * (t328 * (-t320 - t298) + t431) - t268, -t383 + t328 * t312 + (t333 * (-t299 - t320) + (-t275 - t361) * t328) * pkin(3), pkin(3) * (t249 * t328 - t333 * t252), -pkin(3) * t354, t206, t172, t197, t204, t198, t228, pkin(3) * (t189 * t328 + t211 * t333) + t352, pkin(3) * (t192 * t328 + t333 * t417) + t351, pkin(3) * (t175 * t328 + t243 * t333) + t346, pkin(3) * (-t220 * t333 + t328 * t98) + t366, t135, t88, t102, t134, t103, t176, pkin(3) * (t144 * t333 + t328 * t91) + t350, pkin(3) * (t147 * t333 + t328 * t96) + t344, pkin(3) * (t108 * t333 + t328 * t83) + t353, pkin(3) * (t328 * t58 - t333 * t78) + t367, t42, t22, t30, t41, t31, t80, pkin(3) * (t27 * t328 + t333 * t52) + t348, pkin(3) * (t29 * t328 + t333 * t55) + t347, pkin(3) * (t18 * t328 + t333 * t37) + t345, pkin(3) * (t15 * t333 + t328 * t6) + t340; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t402, t277, t252, t402, t249, t321, -t268, -t269, 0, 0, t206, t172, t197, t204, t198, t228, t352, t351, t346, t366, t135, t88, t102, t134, t103, t176, t350, t344, t353, t367, t42, t22, t30, t41, t31, t80, t348, t347, t345, t340; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t405, t254, t215, -t405, t343, t265, -t160, -t161, 0, 0, t156, t107, t162, t154, t163, t195, -t153, t152, t422, 0, t85, t45, t69, t84, t70, t125, t414, t413, t11, t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t227, t226, t170, -t227, -t166, t232, -t132, -t133, 0, 0, t113, t67, t121, -t111, t122, t158, t61, t63, t12, -pkin(6) * t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t411, t190, -t118, -t411, t421, t181, t49, t50, 0, 0;];
tauJ_reg = t14;
