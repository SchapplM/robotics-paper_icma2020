% Calculate inertial parameters regressor of coriolis joint torque vector for
% CloosQRC350OL
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-06-23 22:05
% Revision: 9ee7546dde8543a81bf40e37a1400ef9d9e232c4 (2020-06-23)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = CloosQRC350OL_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'CloosQRC350OL_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'CloosQRC350OL_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'CloosQRC350OL_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-06-23 22:03:19
% EndTime: 2020-06-23 22:03:34
% DurationCPUTime: 11.65s
% Computational Cost: add. (9468->403), mult. (22292->608), div. (0->0), fcn. (16773->10), ass. (0->243)
t314 = sin(qJ(3));
t315 = sin(qJ(2));
t219 = t314 * t315;
t204 = qJD(1) * t219;
t181 = cos(qJ(3));
t182 = cos(qJ(2));
t262 = qJD(1) * t182;
t242 = t181 * t262;
t145 = -t204 + t242;
t176 = sin(qJ(5));
t148 = t181 * t315 + t182 * t314;
t263 = qJD(1) * t148;
t179 = cos(qJ(5));
t180 = cos(qJ(4));
t267 = t179 * t180;
t117 = -t145 * t176 - t263 * t267;
t177 = sin(qJ(4));
t256 = qJD(5) * t176;
t325 = t177 * t256 - t117;
t125 = pkin(4) * t145 - pkin(5) * t263;
t304 = pkin(3) * qJD(2);
t245 = t181 * t304;
t111 = -t125 * t177 + t180 * t245;
t236 = t314 * qJD(2);
t223 = pkin(3) * t236;
t255 = qJD(5) * t179;
t254 = qJD(5) * t180;
t258 = qJD(4) * t179;
t322 = t176 * t254 + t177 * t258;
t290 = pkin(4) * t255 + pkin(5) * t322 - t111 * t179 + t176 * t223;
t333 = t325 * pkin(6);
t261 = qJD(2) * t182;
t248 = pkin(3) * t261;
t332 = 0.2e1 * t248;
t249 = pkin(3) * t262;
t118 = t125 + t249;
t259 = qJD(4) * t177;
t172 = pkin(6) * t259;
t250 = t314 * pkin(3);
t168 = t250 - pkin(5);
t313 = pkin(3) * t181;
t169 = pkin(4) + t313;
t235 = t314 * qJD(3);
t224 = pkin(3) * t235;
t260 = qJD(3) * t181;
t247 = pkin(3) * t260;
t227 = t180 * t247;
t98 = -t168 * t322 + t169 * t255 - t176 * t224 + t179 * t227;
t331 = -(pkin(6) * t263 - t118 * t179) * t177 + t172 + t98;
t175 = sin(qJ(6));
t178 = cos(qJ(6));
t225 = qJD(6) + t258;
t226 = -qJD(6) * t179 - qJD(4);
t269 = t178 * t180;
t274 = t175 * t177;
t330 = -t117 * t178 - t263 * t274 - t225 * t269 - (t175 * t226 - t178 * t256) * t177;
t271 = t177 * t178;
t329 = (t263 + t226) * t271 + (-t180 * t225 + t325) * t175;
t228 = t177 * t247;
t311 = pkin(6) * t179;
t233 = t168 - t311;
t257 = qJD(4) * t180;
t328 = -t118 * t180 + t233 * t257 + t228 + t333;
t279 = t263 * t177;
t327 = -pkin(6) * t279 + t172 + t290;
t110 = t125 * t180 + t177 * t245;
t244 = -pkin(5) - t311;
t326 = t244 * t257 - t110 + t333;
t170 = pkin(3) * t315 + pkin(2);
t156 = qJD(1) * t170;
t188 = pkin(4) * t263 + pkin(5) * t145 + t156;
t324 = qJD(3) * t245 - qJD(4) * t188;
t323 = t176 * t257 + t177 * t255;
t321 = t259 - t279;
t251 = qJD(2) + qJD(3);
t128 = t251 * t148;
t120 = t128 * qJD(1);
t266 = t181 * t182;
t215 = t251 * t266;
t264 = t251 * t204;
t121 = qJD(1) * t215 - t264;
t196 = -pkin(5) * t251 + t223;
t234 = qJD(1) * t261;
t319 = pkin(3) * t234 + pkin(4) * t121 - pkin(5) * t120 + qJD(4) * t196;
t42 = t177 * t324 + t319 * t180;
t38 = t42 * t177;
t91 = t177 * t196 + t180 * t188;
t202 = -t257 * t91 - t38;
t229 = t177 * t251;
t132 = t180 * t145 - t229;
t139 = qJD(4) - t263;
t103 = t132 * t179 + t139 * t176;
t185 = t103 * pkin(6) + t91;
t153 = pkin(4) * t251 + t245;
t208 = qJD(3) * t223;
t41 = -t177 * t319 + t180 * t324;
t92 = -t177 * t188 + t180 * t196;
t20 = -t176 * (qJD(5) * t92 + t208) + t153 * t255 + t179 * t41;
t82 = -qJD(4) * t229 - t120 * t177 + t145 * t257;
t320 = -pkin(6) * t82 - qJD(6) * t185 + t20;
t131 = -t177 * t145 - t180 * t251;
t199 = qJD(5) - t131;
t191 = t179 * t199;
t102 = -t132 * t176 + t139 * t179;
t294 = t180 * t91;
t211 = t177 * t92 - t294;
t293 = t41 * t180;
t317 = qJD(4) * t211 - t293 - t38;
t316 = qJD(2) ^ 2;
t312 = pkin(6) * t102;
t69 = t103 * t175 + t178 * t199;
t70 = t103 * t178 - t175 * t199;
t310 = t69 * t70;
t74 = t153 * t176 + t179 * t92;
t21 = -qJD(5) * t74 - t176 * t41 - t179 * t208;
t272 = t176 * t180;
t73 = t153 * t179 - t176 * t92;
t309 = t21 * (-t168 * t272 + t169 * t179) + t73 * ((-t168 * t254 - t224) * t179 + (-qJD(5) * t169 + t168 * t259 - t227) * t176);
t173 = t176 * pkin(4);
t142 = t173 + (-pkin(5) * t179 - pkin(6)) * t180;
t151 = t244 * t177;
t206 = t142 * t178 - t151 * t175;
t308 = t206 * qJD(6) + t175 * t327 + t178 * t326;
t123 = t142 * t175 + t151 * t178;
t307 = -qJD(6) * t123 - t175 * t326 + t178 * t327;
t136 = t168 * t267 + t169 * t176;
t133 = -pkin(6) * t180 + t136;
t140 = t233 * t177;
t207 = t133 * t178 - t140 * t175;
t306 = t207 * qJD(6) + t175 * t331 + t178 * t328;
t105 = t133 * t175 + t140 * t178;
t305 = -t105 * qJD(6) - t175 * t328 + t178 * t331;
t288 = qJD(6) * t69;
t81 = qJD(4) * t131 - t180 * t120;
t35 = qJD(5) * t102 - t121 * t176 + t179 * t81;
t11 = t175 * t82 - t178 * t35 + t288;
t303 = t11 * t178;
t287 = qJD(6) * t70;
t12 = t175 * t35 + t178 * t82 + t287;
t302 = t12 * t175;
t300 = t175 * t69;
t299 = t176 * t73;
t298 = t177 * t81;
t297 = t178 * t70;
t296 = t179 * t74;
t295 = t179 * t91;
t292 = t82 * t180;
t291 = t91 * t110;
t286 = t103 * t102;
t285 = t128 * t177;
t284 = t131 * t177;
t283 = t132 * t131;
t281 = t132 * t180;
t280 = t139 * t145;
t278 = t145 * t263;
t149 = -t219 + t266;
t277 = t149 * t177;
t276 = t156 * t263;
t275 = t156 * t145;
t273 = t176 * t177;
t270 = t177 * t179;
t268 = t179 * t131;
t265 = t182 * qJD(1) ^ 2;
t253 = qJD(6) * t175;
t252 = qJD(6) * t178;
t101 = qJD(6) + t102;
t246 = t73 * t273;
t243 = t314 * t153;
t126 = pkin(4) * t148 + pkin(5) * t149 + t170;
t129 = -t219 * t251 + t215;
t79 = pkin(4) * t129 - pkin(5) * t128 + t248;
t232 = t79 * t246 + (t21 * t273 + t323 * t73) * t126;
t231 = t199 * t176;
t230 = qJD(4) * t168 - t118;
t221 = t21 * (pkin(4) * t179 + pkin(5) * t272) + (t176 * t111 + t179 * t223 - pkin(4) * t256 + (-t176 * t259 + t179 * t254) * pkin(5)) * t73;
t220 = t315 * t265;
t218 = t263 * t294 + t321 * t92 + t202;
t200 = -t128 * t180 - t149 * t259;
t195 = qJD(5) * t148 - t200;
t216 = -t149 * t254 - t129;
t55 = t176 * t216 - t179 * t195;
t217 = qJD(6) * t277 - t55;
t214 = -pkin(6) * t149 - t126 * t179;
t60 = -pkin(6) * t199 + t74;
t25 = t175 * t60 + t178 * t185;
t26 = -t175 * t185 + t178 * t60;
t213 = t175 * t26 - t178 * t25;
t122 = -t148 * t176 + t149 * t267;
t78 = pkin(6) * t122 + t126 * t180;
t97 = t214 * t177;
t50 = t175 * t97 + t178 * t78;
t51 = t175 * t78 - t178 * t97;
t210 = t177 * t91 + t180 * t92;
t209 = t321 * t74 + t325 * t91;
t205 = t230 * t180;
t203 = t315 * t234;
t201 = -t149 * t257 + t285;
t197 = t145 * t179 - t263 * t272 + t323;
t194 = qJD(6) * t122 - t201;
t146 = -t175 * t270 + t269;
t147 = t175 * t180 + t178 * t270;
t14 = t35 * pkin(6) + t42;
t2 = t175 * t14 - t178 * t320 + t60 * t253;
t3 = t178 * t14 + t175 * t320 + t60 * t252;
t193 = t2 * t146 - t147 * t3 + t25 * t330 - t26 * t329;
t192 = t177 * t199;
t190 = qJD(4) * t199;
t187 = t175 * t2 + t178 * t3 + (-t175 * t25 - t178 * t26) * qJD(6);
t150 = -pkin(5) * t267 + t173;
t108 = t145 ^ 2 - t263 ^ 2;
t107 = t121 * t148;
t100 = t264 + (t145 - t242) * t251;
t96 = -t122 * t178 + t149 * t274;
t95 = t122 * t175 + t149 * t271;
t89 = t132 * t175 - t178 * t268;
t88 = t132 * t178 + t175 * t268;
t66 = pkin(6) * t268 + t92;
t65 = -pkin(6) * t132 - t295;
t56 = t176 * t195 + t179 * t216;
t53 = t175 * t312 - t178 * t73;
t52 = t175 * t73 + t178 * t312;
t49 = t91 * t299;
t48 = t139 * t284 + t292;
t47 = -t139 * t281 - t298;
t46 = -t177 * t190 + t192 * t263 + t292;
t36 = -qJD(5) * t103 - t121 * t179 - t176 * t81;
t34 = t36 * t179;
t33 = t36 * t273;
t30 = t175 * t66 - t178 * t65;
t29 = t175 * t65 + t178 * t66;
t28 = t36 * (-t148 * t179 - t149 * t272);
t27 = t214 * t257 + (pkin(6) * t128 + t126 * t256 - t179 * t79) * t177;
t24 = pkin(6) * t55 - t126 * t259 + t180 * t79;
t23 = -t175 * t217 + t178 * t194;
t22 = t175 * t194 + t178 * t217;
t10 = t102 * t197 + t33;
t9 = -t35 * t270 + (-t179 * t257 + t325) * t103;
t8 = t101 * t197 + t33;
t7 = -qJD(6) * t51 + t175 * t27 + t178 * t24;
t6 = qJD(6) * t50 + t175 * t24 - t178 * t27;
t5 = t12 * t146 + t329 * t69;
t4 = t11 * t147 + t330 * t70;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t203, 0, -t316 * t315, 0.2e1 * t203, 0, 0, 0.2e1 * pkin(2) * t234, 0, 0, 0, -t120 * t149 - t128 * t145, t120 * t148 - t121 * t149 + t128 * t263 - t129 * t145, -t128 * t251, t129 * t263 + t107, -t129 * t251, 0, t121 * t170 + t129 * t156 + t263 * t332, -t120 * t170 - t128 * t156 + (qJD(1) * t149 + t145) * t248, (-t314 * t129 + t128 * t181 + (-t148 * t181 + t149 * t314) * qJD(3)) * t304, t156 * t332, t149 * t180 * t81 + t132 * t200, 0, 0, t131 * t201 + t277 * t82, 0, -t129 * t139 + t107, 0, 0, (t126 * t81 - t128 * t91 + t132 * t79 + t149 * t42 + (-t126 * t131 - t149 * t92) * qJD(4)) * t180 + (t126 * t82 + t128 * t92 - t131 * t79 - t149 * t41 + (-t126 * t132 - t149 * t91) * qJD(4)) * t177, -t211 * t79 + (-qJD(4) * t210 - t177 * t41 + t180 * t42) * t126, t103 * t55 + t122 * t35, 0, 0, t102 * t56 + t28, 0, -t128 * t192 + (t82 * t177 + t180 * t190) * t149, 0, t74 * t285 + t42 * t122 + t91 * t55 + (t180 * t103 + t177 * t191) * t79 + (-t177 * t20 - t257 * t74) * t149 + (-t192 * t256 + t82 * t270 + t180 * t35 + (-t177 * t103 + t180 * t191) * qJD(4)) * t126, 0, (-t270 * t74 + t294) * t79 + ((-t258 * t74 + t42) * t180 + (-qJD(4) * t91 - t179 * t20 + t256 * t74) * t177) * t126 + t232, t11 * t96 - t22 * t70, 0, 0, t12 * t95 + t23 * t69, 0, t101 * t56 + t28, 0, 0, -t11 * t50 + t12 * t51 + t2 * t95 - t22 * t25 - t23 * t26 - t3 * t96 + t6 * t69 + t7 * t70, t2 * t51 + t25 * t7 - t26 * t6 + t3 * t50 + t232; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t220, 0, 0, -t220, 0, 0, -pkin(2) * t265, 0, 0, 0, t278, t108, 0, -t278, t100, 0, -t275 + (-t263 * t262 + (-0.2e1 * t236 - t235) * qJD(3)) * pkin(3), t276 + (-t145 * t262 + (-0.2e1 * qJD(2) - qJD(3)) * t260) * pkin(3), (-t314 * t121 + (t236 + t235) * t145 + (-t251 * t263 + t120) * t181) * pkin(3), -t156 * t249, t47, 0, 0, t48, 0, t280, 0, 0, (-t131 * t230 + t132 * t247 + t168 * t81) * t177 + (t131 * t247 + t132 * t230 - t168 * t82 - t41) * t180 + t218, t211 * t118 - t317 * t168 + (-t169 * t236 + t181 * t210 - t243) * qJD(3) * pkin(3), t9, 0, 0, t10, 0, t46, 0, -t98 * t199 - t136 * t82 - t20 * t180 + t177 * t168 * t35 + (-t118 * t192 + t202) * t179 + (t205 + t228) * t103 + t209, 0, t136 * t20 + t74 * t98 + t91 * t205 + (t91 * t247 + t168 * t42 + (t296 - t299) * t118) * t177 + t309, t4, 0, 0, t5, 0, t8, 0, 0, -t105 * t11 - t12 * t207 - t305 * t69 + t306 * t70 + t193, t105 * t3 - t118 * t246 - t2 * t207 + t25 * t306 + t26 * t305 + t309; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t278, t108, 0, -t278, t100, 0, t250 * t316 - t275, t313 * t316 + t276, 0, 0, t47, 0, 0, t48, 0, t280, 0, 0, -t110 * t132 - t111 * t131 - t293 + (-t298 + t292 + (-t281 + t284) * qJD(4)) * pkin(5) + t218, -t291 - t92 * t111 + (-pkin(4) * t235 + t243) * t304 + t317 * pkin(5), t9, 0, 0, t10, 0, t46, 0, -t110 * t103 - t150 * t82 - t290 * qJD(5) + (-pkin(5) * t35 - t145 * t290 - t179 * t42) * t177 + (-t20 + (-pkin(5) * t103 - t295) * qJD(4) - t290 * t251) * t180 + t209, 0, pkin(5) * t202 + t150 * t20 + t290 * t74 + t221 - t291, t4, 0, 0, t5, 0, t8, 0, 0, -t11 * t123 - t12 * t206 - t307 * t69 + t308 * t70 + t193, t123 * t3 - t2 * t206 + t25 * t308 + t26 * t307 + t221; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t283, 0, 0, t283, 0, -t121, 0, 0, 0, 0, t103 * t191 + t176 * t35, 0, 0, -t102 * t231 + t34, 0, -t199 * t132, 0, -t92 * t103 + t74 * t132 + t42 * t176, 0, -t49 + (-t92 + t296) * t91, -t176 * t303 + (-t176 * t253 + t178 * t255 + t89) * t70, 0, 0, t176 * t302 + (t175 * t255 + t176 * t252 - t88) * t69, 0, -t101 * t231 + t34, 0, 0, t25 * t89 + t26 * t88 - t29 * t70 - t30 * t69 + ((t297 + t300) * pkin(6) - t213) * t255 + ((-t303 + t302 + (-t175 * t70 + t178 * t69) * qJD(6)) * pkin(6) + t187) * t176, -t25 * t29 + t26 * t30 - t49 + (t176 * t187 - t213 * t255) * pkin(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t286, 0, 0, t286, 0, t82, 0, -t91 * t102 + t199 * t73 - t20, 0, 0, -t101 * t297 + t11 * t175, 0, 0, -t101 * t300 + t12 * t178, 0, t101 * t103, 0, 0, -t52 * t70 - t53 * t69 + (t2 - t101 * t25 + (t12 - t287) * pkin(6)) * t178 + (-t3 + t101 * t26 + (t11 - t288) * pkin(6)) * t175, -t25 * t52 + t26 * t53 + t73 * t74 + (qJD(6) * t213 - t175 * t3 + t178 * t2) * pkin(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t310, 0, 0, -t310, 0, t36, 0, 0, 0, 0;];
tauc_reg = t1;
