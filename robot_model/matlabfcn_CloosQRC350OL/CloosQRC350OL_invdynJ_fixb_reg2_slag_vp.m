% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% CloosQRC350OL
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-06-23 22:05
% Revision: 9ee7546dde8543a81bf40e37a1400ef9d9e232c4 (2020-06-23)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = CloosQRC350OL_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'CloosQRC350OL_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'CloosQRC350OL_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'CloosQRC350OL_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'CloosQRC350OL_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'CloosQRC350OL_invdynJ_fixb_reg2_slag_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-06-23 22:03:19
% EndTime: 2020-06-23 22:03:36
% DurationCPUTime: 13.34s
% Computational Cost: add. (11043->456), mult. (24393->664), div. (0->0), fcn. (18494->12), ass. (0->264)
t200 = sin(qJ(3));
t201 = sin(qJ(2));
t205 = cos(qJ(3));
t206 = cos(qJ(2));
t158 = t200 * t206 + t201 * t205;
t152 = t158 * qJD(1);
t295 = t200 * t201;
t259 = qJD(1) * t295;
t289 = qJD(1) * t206;
t154 = t205 * t289 - t259;
t198 = sin(qJ(5));
t203 = cos(qJ(5));
t204 = cos(qJ(4));
t292 = t203 * t204;
t119 = -t152 * t292 - t154 * t198;
t199 = sin(qJ(4));
t283 = qJD(5) * t198;
t350 = t199 * t283 - t119;
t126 = pkin(4) * t154 - pkin(5) * t152;
t329 = pkin(3) * qJD(2);
t271 = t205 * t329;
t113 = -t126 * t199 + t204 * t271;
t288 = qJD(2) * t200;
t272 = pkin(3) * t288;
t282 = qJD(5) * t203;
t279 = t203 * qJD(4);
t281 = qJD(5) * t204;
t347 = t198 * t281 + t199 * t279;
t316 = pkin(4) * t282 + pkin(5) * t347 - t113 * t203 + t198 * t272;
t194 = qJD(2) + qJD(3);
t230 = t154 * t199 + t194 * t204;
t345 = qJD(5) + t230;
t218 = t203 * t345;
t357 = t350 * pkin(6);
t120 = pkin(3) * t289 + t126;
t285 = qJD(4) * t199;
t188 = pkin(6) * t285;
t343 = pkin(3) * t200;
t182 = -pkin(5) + t343;
t342 = pkin(3) * t205;
t183 = pkin(4) + t342;
t286 = qJD(3) * t205;
t268 = pkin(3) * t286;
t248 = t204 * t268;
t287 = qJD(3) * t200;
t269 = pkin(3) * t287;
t99 = -t182 * t347 + t183 * t282 - t198 * t269 + t203 * t248;
t356 = -(pkin(6) * t152 - t120 * t203) * t199 + t188 + t99;
t197 = sin(qJ(6));
t202 = cos(qJ(6));
t245 = qJD(6) + t279;
t246 = -qJD(6) * t203 - qJD(4);
t293 = t202 * t204;
t301 = t197 * t199;
t355 = -t119 * t202 - t152 * t301 - t245 * t293 - (t197 * t246 - t202 * t283) * t199;
t297 = t199 * t202;
t354 = (t152 + t246) * t297 + (-t204 * t245 + t350) * t197;
t247 = t199 * t268;
t340 = pkin(6) * t203;
t256 = t182 - t340;
t284 = qJD(4) * t204;
t353 = -t120 * t204 + t256 * t284 + t247 + t357;
t305 = t152 * t199;
t352 = -pkin(6) * t305 + t188 + t316;
t112 = t126 * t204 + t199 * t271;
t265 = -pkin(5) - t340;
t351 = t265 * t284 - t112 + t357;
t277 = qJD(1) * qJD(2);
t257 = t206 * t277;
t276 = qJDD(1) * t201;
t349 = t257 + t276;
t348 = t198 * t284 + t199 * t282;
t346 = t285 - t305;
t192 = t201 * pkin(3);
t184 = pkin(2) + t192;
t166 = t184 * qJD(1);
t213 = pkin(4) * t152 + pkin(5) * t154 + t166;
t114 = t199 * t213;
t193 = qJDD(2) + qJDD(3);
t275 = qJDD(2) * t200;
t144 = -pkin(5) * t193 + (qJD(2) * t286 + t275) * pkin(3);
t227 = -pkin(5) * t194 + t272;
t129 = t194 * t158;
t274 = t206 * qJDD(1);
t238 = t200 * t276 - t205 * t274;
t103 = qJD(1) * t129 + t238;
t258 = t201 * t277;
t226 = -qJD(3) * t259 + (-t258 + t274) * t200;
t249 = t206 * t194;
t104 = (qJD(1) * t249 + t276) * t205 + t226;
t148 = qJDD(1) * pkin(2) + pkin(3) * t349;
t57 = pkin(4) * t104 - pkin(5) * t103 + t148;
t31 = t199 * t144 - qJD(4) * t114 + (qJD(4) * t227 + t57) * t204;
t28 = t31 * t199;
t92 = t199 * t227 + t204 * t213;
t225 = -t284 * t92 - t28;
t133 = t154 * t204 - t194 * t199;
t147 = qJD(4) - t152;
t105 = -t133 * t198 + t147 * t203;
t68 = -qJD(4) * t133 + t103 * t199 - t193 * t204;
t317 = t204 * t92;
t93 = t204 * t227 - t114;
t235 = t199 * t93 - t317;
t290 = t92 * qJD(4);
t30 = t204 * t144 - t199 * t57 - t290;
t319 = t204 * t30;
t344 = qJD(4) * t235 - t28 - t319;
t341 = pkin(6) * t105;
t195 = qJ(2) + qJ(3);
t189 = sin(t195);
t190 = cos(t195);
t299 = t198 * t204;
t141 = t189 * t299 - t190 * t203;
t339 = g(3) * t141;
t338 = g(3) * (t189 * t198 - t190 * t292);
t157 = -pkin(4) * t189 - pkin(5) * t190;
t145 = t157 - t192;
t337 = g(3) * t145;
t180 = g(3) * t190;
t336 = g(3) * t201;
t106 = t133 * t203 + t147 * t198;
t71 = t197 * t106 + t202 * t345;
t72 = t106 * t202 - t197 * t345;
t335 = t71 * t72;
t186 = qJDD(2) * t342;
t143 = pkin(4) * t193 - qJD(2) * t269 + t186;
t163 = pkin(4) * t194 + t271;
t75 = t163 * t198 + t203 * t93;
t19 = -qJD(5) * t75 + t143 * t203 - t198 * t30;
t74 = t163 * t203 - t198 * t93;
t334 = t19 * (-t182 * t299 + t183 * t203) + t74 * ((-t182 * t281 - t269) * t203 + (-qJD(5) * t183 + t182 * t285 - t248) * t198);
t138 = t182 * t292 + t183 * t198;
t134 = -pkin(6) * t204 + t138;
t149 = t256 * t199;
t108 = t134 * t197 + t149 * t202;
t333 = -qJD(6) * t108 - t197 * t353 + t202 * t356;
t232 = t134 * t202 - t149 * t197;
t332 = qJD(6) * t232 + t197 * t356 + t202 * t353;
t191 = t198 * pkin(4);
t151 = t191 + (-pkin(5) * t203 - pkin(6)) * t204;
t161 = t265 * t199;
t124 = t151 * t197 + t161 * t202;
t331 = -qJD(6) * t124 - t197 * t351 + t202 * t352;
t231 = t151 * t202 - t161 * t197;
t330 = qJD(6) * t231 + t197 * t352 + t202 * t351;
t315 = qJD(6) * t71;
t210 = (-t194 * t289 - t276) * t205 - t226;
t101 = qJDD(4) + t210;
t67 = -qJD(4) * t230 - t103 * t204 - t193 * t199;
t33 = qJD(5) * t105 + t101 * t198 + t203 * t67;
t66 = qJDD(5) - t68;
t13 = t197 * t66 - t202 * t33 + t315;
t327 = t13 * t202;
t314 = qJD(6) * t72;
t14 = t197 * t33 + t202 * t66 + t314;
t326 = t14 * t197;
t325 = t197 * t71;
t324 = t198 * t74;
t323 = t199 * t67;
t322 = t202 * t72;
t321 = t203 * t75;
t320 = t203 * t92;
t318 = t204 * t68;
t313 = t106 * t105;
t312 = t230 * t199;
t311 = t230 * t203;
t310 = t133 * t230;
t308 = t133 * t204;
t307 = t147 * t154;
t304 = t154 * t152;
t303 = t154 * t194;
t159 = t205 * t206 - t295;
t302 = t159 * t199;
t300 = t198 * t199;
t298 = t199 * t129;
t296 = t199 * t203;
t294 = t202 * t203;
t291 = t206 * qJD(1) ^ 2;
t280 = qJD(6) * t198;
t102 = qJD(6) + t105;
t273 = t199 * t180;
t270 = t206 * t329;
t267 = t74 * t300;
t266 = t201 * t291;
t127 = pkin(4) * t158 + pkin(5) * t159 + t184;
t130 = t205 * t249 + (-t287 - t288) * t201;
t82 = pkin(4) * t130 - pkin(5) * t129 + t270;
t255 = t82 * t267 + (t19 * t300 + t348 * t74) * t127;
t254 = t152 * t166 + t180;
t253 = t345 * t198;
t252 = qJD(4) * t182 - t120;
t251 = qJD(2) * (-qJD(3) + t194);
t250 = qJD(3) * (-qJD(2) - t194);
t244 = t19 * (pkin(4) * t203 + pkin(5) * t299) + (t113 * t198 + t203 * t272 - pkin(4) * t283 + (-t198 * t285 + t203 * t281) * pkin(5)) * t74;
t223 = -t129 * t204 - t159 * t285;
t215 = qJD(5) * t158 - t223;
t240 = -t159 * t281 - t130;
t53 = t198 * t240 - t203 * t215;
t243 = qJD(6) * t302 - t53;
t242 = g(3) * t189 - t154 * t166 + t186;
t241 = -g(3) * t157 - t112 * t92;
t239 = -pkin(6) * t159 - t127 * t203;
t209 = t106 * pkin(6) + t92;
t59 = -pkin(6) * t345 + t75;
t25 = t197 * t59 + t202 * t209;
t26 = -t197 * t209 + t202 * t59;
t237 = t197 * t26 - t202 * t25;
t123 = -t158 * t198 + t159 * t292;
t79 = pkin(6) * t123 + t127 * t204;
t98 = t239 * t199;
t48 = t197 * t98 + t202 * t79;
t49 = t197 * t79 - t202 * t98;
t234 = t199 * t92 + t204 * t93;
t229 = t252 * t204;
t228 = t152 * t317 + t346 * t93 + t180 + t225;
t224 = -t159 * t284 + t298;
t221 = -t143 * t198 - t163 * t282 - t203 * t30 + t283 * t93;
t220 = t346 * t75 + t350 * t92 - t339;
t219 = t199 * t345;
t217 = qJD(4) * t345;
t216 = -t152 * t299 + t154 * t203 + t348;
t214 = qJD(6) * t123 - t224;
t34 = -qJD(5) * t106 + t101 * t203 - t198 * t67;
t155 = -t197 * t296 + t293;
t156 = t197 * t204 + t199 * t294;
t11 = t33 * pkin(6) + t31;
t12 = -pkin(6) * t66 - t221;
t2 = qJD(6) * t25 + t197 * t11 - t202 * t12;
t3 = qJD(6) * t26 + t11 * t202 + t12 * t197;
t212 = t2 * t155 - t156 * t3 + t25 * t355 - t26 * t354 - t339;
t211 = -t273 + t197 * t2 + t202 * t3 + (-t197 * t25 - t202 * t26) * qJD(6);
t160 = -pkin(5) * t292 + t191;
t139 = t141 * pkin(6);
t122 = -t158 * t203 - t159 * t299;
t110 = -t152 ^ 2 + t154 ^ 2;
t97 = -t123 * t202 + t159 * t301;
t96 = t123 * t197 + t159 * t297;
t90 = t133 * t197 + t230 * t294;
t89 = t133 * t202 - t197 * t311;
t81 = t210 + t303;
t65 = -pkin(6) * t311 + t93;
t64 = -pkin(6) * t133 - t320;
t54 = t198 * t215 + t203 * t240;
t51 = t197 * t341 - t202 * t74;
t50 = t197 * t74 + t202 * t341;
t47 = t92 * t324;
t41 = -t147 * t312 - t318;
t40 = -t147 * t308 - t323;
t39 = t152 * t219 - t199 * t217 + t66 * t204;
t36 = t197 * t65 - t202 * t64;
t35 = t197 * t64 + t202 * t65;
t32 = qJDD(6) + t34;
t29 = t239 * t284 + (pkin(6) * t129 + t127 * t283 - t203 * t82) * t199;
t24 = pkin(6) * t53 - t127 * t285 + t204 * t82;
t23 = -t197 * t243 + t202 * t214;
t22 = t197 * t214 + t202 * t243;
t10 = t105 * t216 + t300 * t34;
t9 = -t33 * t296 + (-t204 * t279 + t350) * t106;
t8 = t102 * t216 + t300 * t32;
t7 = -qJD(6) * t49 + t197 * t29 + t202 * t24;
t6 = qJD(6) * t48 + t197 * t24 - t202 * t29;
t5 = t14 * t155 + t354 * t71;
t4 = t13 * t156 + t355 * t72;
t1 = [0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, (-0.2e1 * t258 + t274) * t206, 0, -qJD(2) ^ 2 * t201 + qJDD(2) * t206, (0.2e1 * t257 + t276) * t201, 0, 0, 0.2e1 * t349 * pkin(2), 0, 0, qJDD(1) * pkin(2) ^ 2, -t103 * t159 - t129 * t154, t103 * t158 - t104 * t159 + t129 * t152 - t130 * t154, -t129 * t194 + t159 * t193, t104 * t158 + t130 * t152, -t130 * t194 - t158 * t193, 0, t104 * t184 + t130 * t166 + t148 * t158 + t152 * t270, -t103 * t184 - t129 * t166 + t148 * t159 + t154 * t270, ((-t158 * t200 - t159 * t205) * qJDD(2) + (t129 * t205 - t130 * t200 + (-t158 * t205 + t159 * t200) * qJD(3)) * qJD(2)) * pkin(3), t148 * t184 + t166 * t270, t159 * t204 * t67 + t133 * t223, 0, 0, -t224 * t230 - t302 * t68, 0, -t101 * t158 - t130 * t147, 0, 0, (t127 * t67 - t129 * t92 + t133 * t82 + t159 * t31 + (t127 * t230 - t159 * t93) * qJD(4)) * t204 + (-t127 * t68 + t129 * t93 + t230 * t82 - t159 * t30 + (-t127 * t133 - t159 * t92) * qJD(4)) * t199, -t235 * t82 + (-qJD(4) * t234 - t199 * t30 + t204 * t31) * t127, t106 * t53 + t123 * t33, 0, 0, t105 * t54 + t122 * t34, 0, -t129 * t219 + (t66 * t199 + t204 * t217) * t159, 0, t75 * t298 + t31 * t123 + t92 * t53 + (t204 * t106 + t199 * t218) * t82 + (t199 * t221 - t284 * t75) * t159 + (-t219 * t283 + t66 * t296 + t204 * t33 + (-t106 * t199 + t204 * t218) * qJD(4)) * t127, 0, (-t296 * t75 + t317) * t82 + ((-t279 * t75 + t31) * t204 + (t203 * t221 + t283 * t75 - t290) * t199) * t127 + t255, t13 * t97 - t22 * t72, 0, 0, t14 * t96 + t23 * t71, 0, t102 * t54 + t122 * t32, 0, 0, -t13 * t48 + t14 * t49 + t2 * t96 - t22 * t25 - t23 * t26 - t3 * t97 + t6 * t71 + t7 * t72, t2 * t49 + t25 * t7 - t26 * t6 + t3 * t48 + t255; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t266, 0, t274, -t266, 0, qJDD(2), -pkin(2) * t291 + t336, 0, 0, 0, t304, t110, -t238, -t304, t81, t193, (-t152 * t289 + t193 * t205 + t200 * t250) * pkin(3) + t242, (-t154 * t289 + (-qJDD(2) - t193) * t200 + t205 * t250) * pkin(3) + t254, ((-t152 * t194 + t103) * t205 + (-t104 + t303) * t200) * pkin(3), (-t166 * t289 + t336 + (t200 ^ 2 + t205 ^ 2) * qJDD(2) * pkin(3)) * pkin(3), t40, 0, 0, t41, 0, t307, 0, 0, (t133 * t268 + t182 * t67 + t230 * t252) * t199 + (t133 * t252 + t182 * t68 - t230 * t268 - t30) * t204 + t228, -t337 + t143 * t183 + t235 * t120 + (-t163 * t200 + t205 * t234) * qJD(3) * pkin(3) - t344 * t182, t9, 0, 0, t10, 0, t39, 0, -t99 * t345 - t138 * t66 + t221 * t204 + t199 * t182 * t33 + (-t120 * t219 + t225) * t203 + (t229 + t247) * t106 + t220, 0, -t337 - t138 * t221 + t75 * t99 + t92 * t229 + (t92 * t268 + t182 * t31 + (t321 - t324) * t120) * t199 + t334, t4, 0, 0, t5, 0, t8, 0, 0, -t108 * t13 - t14 * t232 + t332 * t72 - t333 * t71 + t212, -t2 * t232 + t3 * t108 - t120 * t267 - g(3) * (t139 + t145) + t333 * t26 + t332 * t25 + t334; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t304, t110, -t238, -t304, t81, t193, t251 * t343 + t242, (t205 * t251 - t275) * pkin(3) + t254, 0, 0, t40, 0, 0, t41, 0, t307, 0, 0, -t112 * t133 + t113 * t230 - t319 + (-t323 - t318 + (-t308 - t312) * qJD(4)) * pkin(5) + t228, pkin(4) * t143 + pkin(5) * t344 - t113 * t93 + t163 * t272 + t241, t9, 0, 0, t10, 0, t39, 0, -t112 * t106 - t160 * t66 - t316 * qJD(5) + (-pkin(5) * t33 - t154 * t316 - t31 * t203) * t199 + (t221 - t316 * t194 + (-pkin(5) * t106 - t320) * qJD(4)) * t204 + t220, 0, pkin(5) * t225 - t160 * t221 + t316 * t75 + t241 + t244, t4, 0, 0, t5, 0, t8, 0, 0, -t124 * t13 - t14 * t231 + t330 * t72 - t331 * t71 + t212, -t2 * t231 + t3 * t124 - g(3) * (t139 + t157) + t331 * t26 + t330 * t25 + t244; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t310, 0, 0, -t310, 0, t101, 0, 0, 0, 0, t106 * t218 + t198 * t33, 0, 0, -t105 * t253 + t203 * t34, 0, -t345 * t133, 0, -t93 * t106 + t75 * t133 + (t31 - t273) * t198, 0, -t47 + (-t93 + t321) * t92, -t198 * t327 + (-t197 * t280 + t202 * t282 + t90) * t72, 0, 0, t198 * t326 + (t197 * t282 + t202 * t280 - t89) * t71, 0, -t102 * t253 + t203 * t32, 0, 0, t25 * t90 + t26 * t89 - t35 * t72 - t36 * t71 + ((t322 + t325) * pkin(6) - t237) * t282 + ((-t327 + t326 + (-t197 * t72 + t202 * t71) * qJD(6)) * pkin(6) + t211) * t198, -t25 * t35 + t26 * t36 - t47 + (t198 * t211 - t237 * t282) * pkin(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t313, 0, 0, t313, 0, t66, 0, -t92 * t105 + t345 * t74 + t221 - t338, 0, 0, -t102 * t322 + t13 * t197, 0, 0, -t102 * t325 + t14 * t202, 0, t102 * t106, 0, 0, -t338 - t50 * t72 - t51 * t71 + (t2 - t102 * t25 + (t14 - t314) * pkin(6)) * t202 + (-t3 + t102 * t26 + (t13 - t315) * pkin(6)) * t197, -t25 * t50 + t26 * t51 + t74 * t75 + (qJD(6) * t237 - t197 * t3 + t2 * t202 - t338) * pkin(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t335, 0, 0, -t335, 0, t32, 0, 0, 0, 0;];
tau_reg = t1;
