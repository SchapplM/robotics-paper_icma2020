% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% CloosQRC350OL
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-06-20 08:27
% Revision: 6013df02bda2c1f6ebc95d3649839f696d960e41 (2020-06-19)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = CloosQRC350OL_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'CloosQRC350OL_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'CloosQRC350OL_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'CloosQRC350OL_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'CloosQRC350OL_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'CloosQRC350OL_invdynJ_fixb_reg2_slag_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-06-20 08:18:58
% EndTime: 2020-06-20 08:20:01
% DurationCPUTime: 40.59s
% Computational Cost: add. (21782->785), mult. (47839->1080), div. (0->0), fcn. (37115->12), ass. (0->362)
t262 = cos(qJ(3));
t263 = cos(qJ(2));
t422 = qJD(1) * t263;
t258 = sin(qJ(3));
t259 = sin(qJ(2));
t430 = t258 * t259;
t204 = -qJD(1) * t430 + t262 * t422;
t208 = t258 * t263 + t259 * t262;
t494 = t208 * qJDD(1);
t324 = -t262 * t263 + t430;
t496 = t324 * qJD(2);
t497 = qJD(3) * t324;
t275 = t496 + t497;
t521 = t275 * qJD(1);
t269 = t521 - t494;
t404 = qJD(2) + qJD(3);
t109 = t204 * t404 + t269;
t202 = t208 * qJD(1);
t256 = sin(qJ(5));
t261 = cos(qJ(4));
t482 = cos(qJ(5));
t383 = t261 * t482;
t149 = -t202 * t383 - t256 * t204;
t257 = sin(qJ(4));
t414 = qJD(5) * t256;
t374 = t257 * t414;
t513 = t149 - t374;
t370 = qJD(4) * t482;
t346 = t261 * t370;
t322 = -t346 - t149;
t530 = t322 + t374;
t509 = qJD(4) - t202;
t255 = sin(qJ(6));
t435 = t255 * t257;
t432 = t256 * t261;
t148 = -t202 * t432 + t482 * t204;
t369 = t482 * qJD(5);
t344 = t257 * t369;
t410 = t256 * qJD(4);
t375 = t261 * t410;
t512 = t344 + t375;
t529 = t148 + t512;
t508 = qJDD(4) - t494;
t528 = t521 + t508;
t249 = t259 * pkin(3);
t241 = pkin(2) + t249;
t158 = pkin(4) * t208 - pkin(5) * t324 + t241;
t419 = qJD(3) * t208;
t165 = qJD(2) * t208 + t419;
t481 = pkin(3) * t262;
t243 = qJDD(2) * t481;
t250 = qJDD(2) + qJDD(3);
t421 = qJD(2) * t258;
t397 = pkin(3) * t421;
t190 = pkin(4) * t250 - qJD(3) * t397 + t243;
t396 = qJD(2) * t481;
t214 = t404 * pkin(4) + t396;
t522 = qJD(4) * t509;
t527 = t158 * t522 - t214 * t165 - t190 * t324;
t420 = qJD(2) * t263;
t395 = pkin(3) * t420;
t417 = qJD(3) * t262;
t424 = t262 * t420 + t263 * t417;
t489 = -t404 * t430 + t424;
t110 = pkin(4) * t489 - t165 * pkin(5) + t395;
t434 = t256 * t257;
t390 = t110 * t434;
t526 = t158 * t512 + t390;
t157 = pkin(4) * t204 - t202 * pkin(5);
t150 = pkin(3) * t422 + t157;
t239 = pkin(3) * t258 - pkin(5);
t525 = t150 * t509 - t239 * t522;
t143 = -t157 * t257 + t261 * t396;
t297 = t257 * t370 + t261 * t414;
t425 = -pkin(4) * t369 - pkin(5) * t297 + t482 * t143 - t256 * t397;
t523 = t513 * pkin(6);
t418 = qJD(3) * t258;
t274 = -t424 + (t418 + t421) * t259;
t520 = t158 * t508 - (t110 * t208 - t158 * t274) * qJD(1) - (-t214 * t324 - t110) * qJD(4);
t352 = t257 * t404;
t171 = t261 * t204 - t352;
t184 = t482 * t509;
t134 = t171 * t256 - t184;
t409 = qJD(6) - t134;
t136 = t482 * t171 + t256 * t509;
t169 = t257 * t204 + t261 * t404;
t168 = qJD(5) + t169;
t260 = cos(qJ(6));
t99 = t136 * t255 + t168 * t260;
t519 = t409 * t99;
t401 = pkin(6) * t482;
t339 = -t401 + t239;
t399 = pkin(3) * t417;
t415 = qJD(4) * t261;
t518 = -t150 * t261 + t257 * t399 + t339 * t415 - t523;
t142 = t157 * t261 + t257 * t396;
t348 = -t401 - pkin(5);
t517 = t348 * t415 - t142 - t523;
t100 = t136 * t260 - t255 * t168;
t516 = t100 * t409;
t416 = qJD(4) * t257;
t245 = pkin(6) * t416;
t439 = t202 * t257;
t515 = -pkin(6) * t439 + t245 - t425;
t240 = pkin(4) + t481;
t465 = pkin(3) * qJD(3);
t349 = t482 * t465;
t400 = pkin(3) * t418;
t127 = t261 * t262 * t349 - t239 * t297 + t240 * t369 - t256 * t400;
t514 = -(pkin(6) * t202 - t482 * t150) * t257 + t245 + t127;
t384 = t260 * t482;
t206 = t255 * t261 + t257 * t384;
t431 = t257 * t260;
t428 = t206 * qJD(6) + t509 * t431 + (t383 * qJD(4) + t513) * t255;
t412 = qJD(6) * t260;
t427 = t261 * t412 - t530 * t260 + (-t482 * qJD(6) - t509) * t435;
t342 = t261 * t369;
t376 = t257 * t410;
t426 = -t256 * t143 - t482 * t397 + pkin(4) * t414 - (t342 - t376) * pkin(5);
t408 = qJD(1) * qJD(2);
t368 = t263 * t408;
t406 = t259 * qJDD(1);
t511 = t368 + t406;
t510 = t416 - t439;
t219 = t241 * qJD(1);
t287 = pkin(4) * t202 + pkin(5) * t204 + t219;
t302 = -t404 * pkin(5) + t397;
t120 = t257 * t302 + t261 * t287;
t270 = t136 * pkin(6) + t120;
t268 = t255 * t270;
t121 = -t257 * t287 + t261 * t302;
t103 = t482 * t121 + t256 * t214;
t83 = -t168 * pkin(6) + t103;
t44 = t260 * t83 - t268;
t407 = t258 * qJDD(2);
t191 = -pkin(5) * t250 + (qJD(2) * t417 + t407) * pkin(3);
t277 = qJD(4) * t287;
t405 = t263 * qJDD(1);
t132 = qJD(1) * t165 + t258 * t406 - t262 * t405;
t197 = qJDD(1) * pkin(2) + pkin(3) * t511;
t80 = -pkin(4) * t269 - pkin(5) * t132 + t197;
t279 = qJD(4) * t302 + t80;
t491 = -t257 * t277 + t279 * t261;
t49 = t257 * t191 + t491;
t267 = qJDD(4) + t269;
t328 = t261 * t132 + t257 * t250;
t92 = qJD(4) * t169 + t328;
t52 = -qJD(5) * t184 + t171 * t414 - t256 * t267 + t482 * t92;
t21 = -t52 * pkin(6) + t49;
t411 = t120 * qJD(4);
t48 = t261 * t191 - t257 * t80 - t411;
t34 = -t121 * t414 + t256 * t190 + t214 * t369 + t482 * t48;
t93 = (qJD(4) * t204 + t250) * t261 - qJD(4) * t352 - t257 * t132;
t91 = qJDD(5) + t93;
t22 = -pkin(6) * t91 + t34;
t8 = -qJD(6) * t268 + t260 * t21 + t255 * t22 + t83 * t412;
t506 = t409 * t44 - t8;
t293 = t258 * t405 + t262 * t406 - qJDD(4);
t504 = (-t239 * t496 + (t208 * t481 - t239 * t324) * qJD(3)) * qJD(1) + t239 * t293 + (-t214 - t399) * qJD(4) + t214 * t202;
t46 = t49 * t257;
t503 = -t261 * t411 - t46;
t502 = t171 * t509;
t377 = t482 * t169;
t118 = -t255 * t171 - t260 * t377;
t320 = t260 * t369 - t118;
t413 = qJD(6) * t255;
t501 = -t256 * t413 + t320;
t117 = t260 * t171 - t255 * t377;
t321 = -t255 * t369 + t117;
t500 = t256 * t412 - t321;
t480 = pkin(6) * t409;
t53 = qJD(5) * t136 - t256 * t92 - t482 * t267;
t51 = -qJDD(6) + t53;
t483 = pkin(6) * t51;
t499 = t256 * t483 - t369 * t480;
t498 = -t169 * t256 - t414;
t35 = -qJD(5) * t103 + t482 * t190 - t256 * t48;
t493 = -t103 * t168 + t120 * t136 - t35;
t492 = -t202 * t404 + t132;
t448 = t120 * t261;
t330 = -t121 * t257 + t448;
t457 = t261 * t48;
t488 = qJD(4) * t330 + t457 + t46;
t485 = 0.2e1 * pkin(2);
t264 = qJD(2) ^ 2;
t484 = qJD(4) ^ 2;
t479 = pkin(6) * t134;
t253 = qJ(2) + qJ(3);
t246 = sin(t253);
t247 = cos(t253);
t186 = t246 * t432 - t247 * t482;
t478 = g(3) * t186;
t477 = g(3) * (-t246 * t482 - t247 * t432);
t189 = -t246 * t256 + t247 * t383;
t476 = g(3) * t189;
t207 = -pkin(4) * t246 - pkin(5) * t247;
t195 = t207 - t249;
t475 = g(3) * t195;
t236 = g(3) * t247;
t474 = g(3) * t257;
t473 = g(3) * t259;
t472 = g(3) * t261;
t102 = -t256 * t121 + t482 * t214;
t128 = -t258 * t349 - t239 * t342 + (-qJD(5) * t240 + t239 * t416 - t261 * t399) * t256;
t179 = -t239 * t432 + t482 * t240;
t471 = t102 * t128 + t35 * t179;
t180 = t239 * t383 + t256 * t240;
t172 = -t261 * pkin(6) + t180;
t198 = t339 * t257;
t138 = t172 * t255 + t198 * t260;
t470 = -qJD(6) * t138 - t518 * t255 + t514 * t260;
t326 = t172 * t260 - t198 * t255;
t469 = qJD(6) * t326 + t514 * t255 + t518 * t260;
t248 = t256 * pkin(4);
t200 = t248 + (-pkin(5) * t482 - pkin(6)) * t261;
t212 = t348 * t257;
t155 = t200 * t255 + t212 * t260;
t468 = -qJD(6) * t155 - t517 * t255 + t515 * t260;
t325 = t200 * t260 - t212 * t255;
t467 = qJD(6) * t325 + t515 * t255 + t517 * t260;
t466 = pkin(3) * t264;
t453 = qJD(6) * t99;
t23 = t255 * t91 + t260 * t52 + t453;
t464 = t23 * t255;
t24 = -t255 * t52 - t168 * t413 + (qJD(6) * t136 + t91) * t260;
t463 = t24 * t260;
t462 = t255 * t51;
t461 = t255 * t99;
t460 = t256 * t91;
t459 = t257 * t92;
t458 = t260 * t51;
t456 = t261 * t93;
t455 = t52 * t256;
t454 = t99 * t100;
t449 = t120 * t256;
t447 = t134 * t256;
t446 = t136 * t134;
t445 = t136 * t168;
t444 = t136 * t256;
t360 = t168 * t256;
t442 = t169 * t257;
t441 = t171 * t169;
t440 = t171 * t261;
t438 = t204 * t202;
t437 = t324 * t257;
t436 = t255 * t256;
t433 = t256 * t260;
t265 = qJD(1) ^ 2;
t429 = t263 * t265;
t251 = t259 ^ 2;
t252 = t263 ^ 2;
t423 = t251 - t252;
t402 = t247 * t474;
t398 = qJD(6) * t480;
t394 = t34 * t482;
t393 = t49 * t482;
t392 = t53 * t482;
t391 = t482 * t91;
t389 = t150 * t434;
t388 = t158 * t434;
t387 = t259 * t429;
t386 = t255 * t482;
t385 = t257 * t482;
t382 = t482 * t103;
t381 = t482 * t120;
t380 = t482 * t134;
t379 = t482 * t136;
t378 = t482 * t168;
t367 = -t191 + t236;
t366 = t102 * t526 + t35 * t388;
t221 = t246 * t474;
t363 = -t121 * t204 - t221;
t361 = t219 * t202 + t236;
t359 = t257 * t509;
t358 = t261 * t509;
t357 = t509 * t214;
t356 = t409 * t260;
t355 = qJD(4) * t239 - t150;
t351 = t256 * t398;
t350 = qJD(3) * (-0.2e1 * qJD(2) - qJD(3));
t341 = t259 * t368;
t210 = t482 * pkin(4) + pkin(5) * t432;
t340 = -t102 * t426 + t35 * t210;
t74 = t165 * t383 + t208 * t369 + t256 * t489 - t297 * t324;
t338 = -qJD(6) * t437 + t74;
t337 = -t120 * t204 + t190 * t261 + t246 * t472;
t336 = g(3) * t246 - t219 * t204 + t243;
t335 = -g(3) * t207 - t120 * t142;
t333 = t255 * t21 - t260 * t22;
t154 = -t256 * t208 - t324 * t383;
t107 = pkin(6) * t154 + t158 * t261;
t318 = pkin(6) * t324 - t482 * t158;
t126 = t318 * t257;
t69 = t107 * t260 + t126 * t255;
t70 = t107 * t255 - t126 * t260;
t329 = t120 * t257 + t121 * t261;
t187 = -t246 * t383 - t247 * t256;
t323 = -g(3) * t187 - t120 * t148 + t35 * t261;
t319 = t121 * t510 + t202 * t448 + t236 + t503;
t317 = t380 - t444;
t316 = -t165 * t257 - t324 * t415;
t315 = t409 * t102 + t483;
t314 = -t35 - t398 + t477;
t313 = -g(3) * (t187 * t255 - t246 * t431) + t35 * t206 + t427 * t102;
t312 = qJD(4) * t208;
t307 = -t168 * t414 + t391;
t306 = t168 * t369 + t460;
t205 = t255 * t385 - t260 * t261;
t303 = t369 + t377;
t301 = t103 * t510 - t120 * t513 - t478;
t300 = t102 * t346 + t103 * t529 + t34 * t434 + t35 * t385 + t221;
t292 = qJD(6) * t154 + t316;
t291 = -t102 * t509 - t120 * t369;
t43 = t255 * t83 + t260 * t270;
t290 = t43 * t384 - t44 * t386;
t286 = t165 * t509;
t285 = t509 * t204;
t7 = qJD(6) * t43 + t333;
t282 = -t7 * t205 - t8 * t206 - t427 * t43 + t428 * t44 - t478;
t281 = t257 * t293;
t280 = t261 * t293;
t278 = -g(3) * (-t187 * t260 - t246 * t435) + t35 * t205 + t8 * t434 + t428 * t102 + t529 * t43;
t276 = t202 * t208 - t312;
t273 = -t402 + t255 * t7 + t260 * t8 + (-t255 * t43 - t260 * t44) * qJD(6);
t211 = -pkin(5) * t383 + t248;
t183 = t186 * pkin(6);
t153 = t482 * t208 - t324 * t432;
t140 = -t202 ^ 2 + t204 ^ 2;
t125 = t154 * t260 + t324 * t435;
t124 = t154 * t255 - t324 * t431;
t90 = -pkin(6) * t377 + t121;
t88 = -t171 * pkin(6) - t381;
t75 = t154 * qJD(5) - t165 * t432 + t324 * t376 + t482 * t489;
t72 = -t102 * t260 - t255 * t479;
t71 = t102 * t255 - t260 * t479;
t68 = t102 * t449;
t67 = t281 + t171 * t204 - qJD(4) * t358 + (-t257 * t275 - t261 * t276) * qJD(1);
t66 = t280 - t169 * t204 + t509 * t416 + (t257 * t276 - t261 * t275) * qJD(1);
t60 = -t169 * t359 + t456;
t59 = -t171 * t358 + t459;
t58 = -t168 * t359 + t261 * t91;
t55 = t255 * t90 - t260 * t88;
t54 = t255 * t88 + t260 * t90;
t47 = t318 * t415 + (pkin(6) * t165 - t482 * t110 + t158 * t414) * t257;
t40 = -pkin(6) * t74 + t261 * t110 - t158 * t416;
t39 = -t255 * t338 + t260 * t292;
t38 = t255 * t292 + t260 * t338;
t27 = (t169 * t509 + t92) * t261 + (t93 + t502) * t257;
t20 = -t134 * t529 - t53 * t434;
t19 = t530 * t136 + t52 * t385;
t16 = t409 * t529 - t51 * t434;
t15 = -t53 * t261 + (t148 + t375) * t168 + (t134 * t509 + t306) * t257;
t14 = -t52 * t261 + t322 * t168 + (-t136 * t509 - t307) * t257;
t13 = -qJD(6) * t70 + t255 * t47 + t260 * t40;
t12 = qJD(6) * t69 + t255 * t40 - t260 * t47;
t11 = -t205 * t24 - t428 * t99;
t10 = -t427 * t100 + t206 * t23;
t9 = t149 * t134 + t136 * t148 + (t380 + t444) * t415 + (t392 - t455 + (t379 - t447) * qJD(5)) * t257;
t3 = t205 * t51 + t24 * t434 - t409 * t428 + t529 * t99;
t2 = -t100 * t529 - t206 * t51 + t23 * t434 + t409 * t427;
t1 = t428 * t100 - t205 * t23 + t206 * t24 + t427 * t99;
t4 = [0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, qJDD(1) * t252 - 0.2e1 * t341, -0.2e1 * t259 * t405 + 0.2e1 * t423 * t408, qJDD(2) * t263 - t259 * t264, qJDD(1) * t251 + 0.2e1 * t341, -qJDD(2) * t259 - t263 * t264, 0, t511 * t485, (-t259 * t408 + t405) * t485, 0, qJDD(1) * pkin(2) ^ 2, t132 * t324 - t165 * t204, t132 * t208 + t165 * t202 - t204 * t489 - t269 * t324, -t165 * t404 - t250 * t324, t202 * t489 - t208 * t269, -t208 * t250 - t404 * t489, 0, t197 * t208 + t202 * t395 + t219 * t489 - t241 * t269, -t132 * t241 - t165 * t219 - t197 * t324 + t204 * t395, ((-t208 * t258 + t262 * t324) * qJDD(2) + ((t165 - t419) * t262 + (-t489 - t497) * t258) * qJD(2)) * pkin(3), t197 * t241 + t219 * t395, t324 * t261 * t92 + (-t165 * t261 + t324 * t416) * t171, (t169 * t261 + t171 * t257) * t165 - (t459 - t456 + (-t440 + t442) * qJD(4)) * t324, -t261 * t286 + t92 * t208 - t171 * t489 - (-t484 * t257 - t280 + (t257 * t312 + t261 * t274) * qJD(1)) * t324, t169 * t316 - t437 * t93, t257 * t286 + t93 * t208 + t169 * t489 - (-t484 * t261 + t281 + (-t257 * t274 + t261 * t312) * qJD(1)) * t324, -t208 * t267 - t489 * t509, t120 * t489 + t49 * t208 + t257 * t527 - t520 * t261, t121 * t489 + t48 * t208 + t520 * t257 + t261 * t527, (t110 * t171 - t120 * t165 - t158 * t92 - t324 * t49 + (t121 * t324 + t158 * t169) * qJD(4)) * t261 + (t110 * t169 + t121 * t165 + t158 * t93 + t324 * t48 + (t120 * t324 - t158 * t171) * qJD(4)) * t257, t330 * t110 + (-qJD(4) * t329 - t257 * t48 + t261 * t49) * t158, -t136 * t74 - t154 * t52, t134 * t74 - t136 * t75 + t153 * t52 - t154 * t53, t136 * t316 + t154 * t91 - t168 * t74 + t437 * t52, t134 * t75 + t153 * t53, -t134 * t316 - t153 * t91 - t168 * t75 + t437 * t53, t168 * t316 - t437 * t91, t120 * t75 + t49 * t153 + (t110 * t134 + t158 * t53 + (-t102 * t324 + t158 * t360) * qJD(4)) * t261 + (t110 * t360 - t102 * t165 - t324 * t35 + (-qJD(4) * t134 + t306) * t158) * t257, -t120 * t74 + t49 * t154 + (t110 * t136 - t158 * t52 + (t103 * t324 + t158 * t378) * qJD(4)) * t261 + (t110 * t378 + t103 * t165 + t324 * t34 + (-qJD(4) * t136 + t307) * t158) * t257, t102 * t74 - t103 * t75 - t34 * t153 - t35 * t154 + t317 * t257 * t110 + (t317 * t415 + (t392 + t455 + (-t379 - t447) * qJD(5)) * t257) * t158, (-t257 * t382 + t448) * t110 + ((-t103 * t370 + t49) * t261 + (t103 * t414 - t394 - t411) * t257) * t158 + t366, -t100 * t38 - t125 * t23, -t100 * t39 + t124 * t23 - t125 * t24 + t38 * t99, t100 * t75 + t125 * t51 - t153 * t23 + t38 * t409, t124 * t24 + t39 * t99, -t124 * t51 - t153 * t24 + t39 * t409 - t75 * t99, t153 * t51 - t409 * t75, -t99 * t390 - t102 * t39 - t35 * t124 + t13 * t409 - t8 * t153 - t43 * t75 - t69 * t51 + (-t99 * t344 + (-t24 * t257 - t415 * t99) * t256) * t158, -t100 * t526 + t102 * t38 - t12 * t409 - t35 * t125 + t7 * t153 + t23 * t388 - t44 * t75 + t70 * t51, t100 * t13 + t12 * t99 + t124 * t7 + t125 * t8 - t23 * t69 + t24 * t70 - t38 * t43 - t39 * t44, -t12 * t44 + t13 * t43 + t69 * t8 + t7 * t70 + t366; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t387, -t423 * t265, t405, -t387, -t406, qJDD(2), -pkin(2) * t429 + t473, pkin(2) * t259 * t265 + g(3) * t263, 0, 0, t438, t140, -t492, -t438, t109, t250, (-t202 * t422 + t262 * t250 + t258 * t350) * pkin(3) + t336, (-t204 * t422 + t262 * t350 + (-t250 - qJDD(2)) * t258) * pkin(3) + t361, (t109 * t258 + t492 * t262) * pkin(3), (-t219 * t422 + t473 + (t258 ^ 2 + t262 ^ 2) * qJDD(2) * pkin(3)) * pkin(3), t59, t27, t67, t60, t66, t285, -t169 * t400 + t240 * t93 + t504 * t257 + t261 * t525 + t337, -t171 * t400 - t240 * t92 + (-t190 - t525) * t257 + t504 * t261 + t363, (t169 * t355 + t171 * t399 - t239 * t92) * t257 + (-t169 * t399 + t171 * t355 - t239 * t93 - t48) * t261 + t319, -t475 + t190 * t240 - t330 * t150 + (-t214 * t258 + t262 * t329) * t465 + t488 * t239, t19, t9, t14, t20, t15, t58, t128 * t168 + t179 * t91 + (-t134 * t150 + (t134 * t239 - t449) * qJD(4)) * t261 + (t134 * t399 + t239 * t53 + (-t150 * t168 - t49) * t256 + t291) * t257 + t323, -t127 * t168 - t180 * t91 + (-t136 * t150 - t34 + (t136 * t239 - t381) * qJD(4)) * t261 + (t136 * t399 - t150 * t378 - t239 * t52 - t393) * t257 + t301, t102 * t149 - t127 * t134 - t128 * t136 + t179 * t52 - t180 * t53 + (-t102 * t414 - t150 * t317) * t257 + t300, -t475 + t103 * t127 + t34 * t180 + t355 * t448 + (t120 * t399 + t239 * t49 + (-t102 * t256 + t382) * t150) * t257 + t471, t10, t1, t2, t11, t3, t16, -t138 * t51 - t179 * t24 + (-t128 + t389) * t99 + t469 * t409 + t278, -t128 * t100 - t326 * t51 + t179 * t23 + (t344 + t148) * t44 + t470 * t409 + (t44 * t415 + (t100 * t150 - t7) * t257) * t256 + t313, t100 * t469 - t138 * t23 - t24 * t326 - t470 * t99 + t282, -t7 * t326 + t8 * t138 - t102 * t389 - g(3) * (t183 + t195) + t470 * t44 + t469 * t43 + t471; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t438, t140, -t492, -t438, t109, t250, t258 * t466 + t336, -pkin(3) * t407 + t262 * t466 + t361, 0, 0, t59, t27, t67, t60, t66, t285, pkin(4) * t93 + t142 * t509 + t169 * t397 - t357 * t257 + t337 + (t257 * t528 + t522 * t261) * pkin(5), -pkin(4) * t92 + t143 * t509 + t171 * t397 + (-pkin(5) * t522 - t190) * t257 + (pkin(5) * t528 - t357) * t261 + t363, -t142 * t171 + t143 * t169 - t457 + (t459 + t456 + (-t440 - t442) * qJD(4)) * pkin(5) + t319, pkin(4) * t190 - pkin(5) * t488 - t121 * t143 + t214 * t397 + t335, t19, t9, t14, t20, t15, t58, -t142 * t134 + t210 * t91 - t426 * t168 + (-pkin(5) * t134 - t449) * t415 + (-pkin(5) * t53 - t49 * t256 + t291) * t257 + t323, -t142 * t136 - t211 * t91 + (pkin(5) * t52 - t393) * t257 + t425 * t168 + (-t34 + (-pkin(5) * t136 - t381) * qJD(4)) * t261 + t301, t102 * t513 + t425 * t134 + t426 * t136 + t210 * t52 - t211 * t53 + t300, pkin(5) * t503 - t425 * t103 + t211 * t34 + t335 + t340, t10, t1, t2, t11, t3, t16, -t155 * t51 - t210 * t24 + t409 * t467 + t426 * t99 + t278, t100 * t426 + t210 * t23 - t325 * t51 + t409 * t468 - t434 * t7 + t44 * t529 + t313, t100 * t467 - t155 * t23 - t24 * t325 - t468 * t99 + t282, -t7 * t325 + t8 * t155 - g(3) * (t183 + t207) + t468 * t44 + t467 * t43 + t340; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t441, -t169 ^ 2 + t171 ^ 2, -t169 * t202 - t328, -t441, -t93 + t502, t267, t121 * t509 - t214 * t171 + t257 * t367 - t491, -t120 * t509 + t214 * t169 + t279 * t257 + (t277 + t367) * t261, 0, 0, t136 * t303 - t455, -t52 * t482 - t303 * t134 + (-t53 - t445) * t256, -t136 * t171 + t168 * t303 + t460, t134 * t360 - t392, -t168 ^ 2 * t256 + t134 * t171 + t391, -t168 * t171, -t102 * t171 - t121 * t134 + t385 * t236 - t393, t103 * t171 - t121 * t136 + (t49 - t402) * t256 + (-t378 + t303) * t120, -t303 * t102 - t120 * t380 - t247 * t472 + t256 * t493 + t394, -t68 + (t382 - t121) * t120, t100 * t501 - t23 * t433, t100 * t117 + t118 * t99 + (-t100 * t386 - t384 * t99) * qJD(5) + (t464 - t463 + (-t100 * t260 + t461) * qJD(6)) * t256, t23 * t482 - t320 * t409 + (t100 * t168 + t409 * t413 + t458) * t256, t24 * t436 + t500 * t99, t24 * t482 - t321 * t409 + (-t168 * t99 + t409 * t412 - t462) * t256, -t360 * t409 - t51 * t482, -t102 * t500 - t206 * t236 - t255 * t351 - t260 * t499 - t35 * t436 - t409 * t54 + t43 * t498 + t99 * t449 + t8 * t482, t100 * t449 - t102 * t501 + t205 * t236 + t255 * t499 - t260 * t351 - t35 * t433 + t409 * t55 + t44 * t498 - t7 * t482, -t54 * t100 + t44 * t117 - t43 * t118 - t55 * t99 + ((t100 * t384 + t386 * t99) * pkin(6) + t290) * qJD(5) + ((-t23 * t260 + t24 * t255 + (-t100 * t255 + t260 * t99) * qJD(6)) * pkin(6) + t273) * t256, -t43 * t54 + t44 * t55 - t68 + (qJD(5) * t290 + t256 * t273) * pkin(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t446, -t134 ^ 2 + t136 ^ 2, t134 * t168 - t52, -t446, t445 - t53, t91, -t477 - t493, t102 * t168 + t120 * t134 - t34 + t476, 0, 0, -t100 * t356 + t464, (t23 + t519) * t260 + (t24 + t516) * t255, -t100 * t136 + t356 * t409 - t462, -t409 * t461 + t463, -t255 * t409 ^ 2 + t136 * t99 - t458, t409 * t136, -t103 * t99 + t136 * t43 + t255 * t315 + t260 * t314 - t409 * t71, -t100 * t103 + t136 * t44 - t255 * t314 + t260 * t315 + t409 * t72, t476 - t100 * t71 - t72 * t99 + (t7 - t409 * t43 + (-qJD(6) * t100 + t24) * pkin(6)) * t260 + ((t23 - t453) * pkin(6) + t506) * t255, t102 * t103 - t43 * t71 + t44 * t72 + (t476 - t255 * t8 + t260 * t7 + (t255 * t44 - t260 * t43) * qJD(6)) * pkin(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t454, t100 ^ 2 - t99 ^ 2, t23 - t519, -t454, t24 - t516, -t51, t102 * t100 - g(3) * (t189 * t255 + t247 * t431) - t506, -t102 * t99 - g(3) * (t189 * t260 - t247 * t435) - t333 + (t409 - qJD(6)) * t43, 0, 0;];
tau_reg = t4;
